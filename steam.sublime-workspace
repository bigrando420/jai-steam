{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"pchVer",
				"pchVersionString"
			],
			[
				"eServ",
				"eServerMode"
			],
			[
				"compil",
				"compiler_create_workspace"
			],
			[
				"toch",
				"torch"
			],
			[
				"poof",
				"single_poof"
			],
			[
				"hovere",
				"hovered_en"
			],
			[
				"hot_",
				"hot_slot"
			],
			[
				"remove",
				"remove_props"
			],
			[
				"is_in",
				"is_in_inventory"
			],
			[
				"store",
				"stored_items"
			],
			[
				"enti",
				"entities"
			],
			[
				"stored",
				"stored_en"
			],
			[
				"entitfrom",
				"entity_from_handle(handle: EntityHandle) -> *Entity"
			],
			[
				"light",
				"light_count"
			],
			[
				"light_ra",
				"light_radius"
			],
			[
				"time",
				"time_elapsed"
			],
			[
				"strip",
				"path_strip_extension"
			],
			[
				"SPrite",
				"SpriteID"
			],
			[
				"Sprit",
				"SpriteID"
			],
			[
				"randomflo",
				"random_get_within_range(min: float, max: float) -> float"
			],
			[
				"random",
				"random_get"
			],
			[
				"random_",
				"random_sign() -> float"
			],
			[
				"push_see",
				"push_random_seed(new_seed: u64) "
			],
			[
				"Rang",
				"Range1"
			],
			[
				"cam",
				"cam_zoom"
			],
			[
				"li",
				"light_count"
			],
			[
				"get_const",
				"get_global_const_buff() -> *GlobalConstBuffer"
			],
			[
				"Glob",
				"GlobalConstBuffer"
			],
			[
				"align",
				"align_forward(orig_size: s64, alignment: s64) -> s64"
			],
			[
				"size",
				"size_of"
			],
			[
				"point",
				"point_light"
			],
			[
				"entit",
				"entities"
			],
			[
				"render",
				"render_rect"
			],
			[
				"layer",
				"layer_cbuffer_resource"
			],
			[
				"cbu",
				"layer_cbuffer"
			],
			[
				"layer_cbu",
				"layer_cbuffer_resource"
			],
			[
				"Global",
				"GlobalConstBuffer"
			],
			[
				"Ve",
				"Vector4"
			],
			[
				"Vec",
				"Vector2"
			],
			[
				"get_textu",
				"get_texture(id: ResourceID) -> *ArcResource"
			],
			[
				"resouce",
				"resource_id_from_name(name: string) -> ResourceID"
			],
			[
				"Resour",
				"ResourceID"
			],
			[
				"bgf",
				"bg_forest3"
			],
			[
				"bgfor",
				"bg_forest2"
			],
			[
				"resour",
				"resources"
			],
			[
				"charjum",
				"char_jump_apex"
			],
			[
				"char_jump",
				"char_jump_rise"
			],
			[
				"is_state",
				"is_state_entry(en: *Entity, state: EntityState) -> bool"
			],
			[
				"resource",
				"resource_id"
			],
			[
				"get_re",
				"get_resource(id: ResourceID) -> *ArcResource"
			],
			[
				"weight",
				"total_weight_in_storage() -> int"
			],
			[
				"hover",
				"hovered_en"
			],
			[
				"pikcu",
				"pick_up"
			],
			[
				"remove_p",
				"remove_props(properties: *Properties, to_remove: Properties) "
			],
			[
				"hot",
				"hot_slot"
			],
			[
				"hov",
				"hovered_en"
			],
			[
				"equi",
				"equipped_items"
			],
			[
				"hotba",
				"hotbar_slots"
			],
			[
				"handle",
				"handle_from_entity(entity: *Entity) -> EntityHandle"
			],
			[
				"set_state",
				"set_interface_state(state: InterfaceState) "
			],
			[
				"consume",
				"consume_key(key: Input.Key_Code) "
			],
			[
				"push_rando",
				"push_random_seed(new_seed: u64) "
			],
			[
				"mark",
				"marked_for_destroy"
			],
			[
				"emitt",
				"create_emitter(pos: Vector2, kind: EmitterKind) -> *Entity"
			],
			[
				"set_next_pref_",
				"set_next_pref_width"
			],
			[
				"set_next_p",
				"set_next_pref_width"
			],
			[
				"auto_ro",
				"auto_row() -> *Box"
			],
			[
				"noti",
				"create_notification(txt: string, is_big := false) -> *Entity"
			],
			[
				"can_st",
				"can_store_item(entity_item: *Entity) -> bool"
			],
			[
				"emit",
				"create_emitter(pos: Vector2, kind: EmitterKind) -> *Entity"
			],
			[
				"brea",
				"breathe_target"
			],
			[
				"inter",
				"interactable_alpha_t"
			],
			[
				"get",
				"get_item"
			],
			[
				"item",
				"item_id"
			],
			[
				"empt",
				"empty_slot"
			],
			[
				"interaction",
				"interaction_target"
			],
			[
				"array_res",
				"array_reset(array: *[] $T) "
			],
			[
				"perman",
				"permanent_allocator"
			],
			[
				"default",
				"default_allocator"
			],
			[
				"item_",
				"item_count"
			],
			[
				"goblin",
				"goblin_meat"
			],
			[
				"consum",
				"consumable"
			],
			[
				"window",
				"window_w"
			],
			[
				"set_ne",
				"set_next_pref_width"
			],
			[
				"set_next",
				"set_next_flags"
			],
			[
				"addp",
				"add_props(properties: *Properties, to_add: .. properties.enum_type) "
			],
			[
				"alpha",
				"float_alpha"
			],
			[
				"wood_",
				"wood_defense_wall_props"
			],
			[
				"remain",
				"remaining_items"
			],
			[
				"unloc",
				"unlocked_recipes"
			],
			[
				"clicke",
				"clicked_r"
			],
			[
				"equipp",
				"equipped_items"
			],
			[
				"equip",
				"equipped_items"
			],
			[
				"get_item",
				"get_item_equipped_slot(item_en: *Entity) -> *EntityHandle"
			],
			[
				"equpi",
				"equip_slot"
			],
			[
				"E",
				"EntityHandle"
			],
			[
				"prop",
				"properties"
			],
			[
				"spac",
				"spacer(size: Size) "
			],
			[
				"font_",
				"font_size_pct(pct: float) -> int"
			],
			[
				"make_p",
				"make_props(props: .. $T) -> Properties(T)"
			],
			[
				"mouse",
				"mouse_pos"
			],
			[
				"set_next_floa",
				"set_next_floating_y"
			],
			[
				"set_next_flo",
				"set_next_floating_x"
			],
			[
				"icon",
				"icon(sprite_id: SpriteID, name: string, size: Size, vertical_pad_pct: float = 0.1, horizontal_pad_pct: float = 0.1) -> *Box"
			],
			[
				"screen",
				"screen_mouse_to_cardinal(right_handed: bool = true) -> Vector2"
			],
			[
				"windo",
				"window_h"
			],
			[
				"set_next_text",
				"set_next_text_justify_y(in: PivotY) "
			],
			[
				"stack",
				"stackable_slot"
			],
			[
				"emp",
				"empty_slot"
			],
			[
				"Enti",
				"EntityHandle"
			],
			[
				"totalw",
				"total_weight_in_storage() -> int"
			],
			[
				"set_enxt_text",
				"set_next_text_justify_x"
			],
			[
				"rgb",
				"rbg_helper(r: float, g: float, b: float, a: = 1.0) -> Vector4"
			],
			[
				"total",
				"total_weight_in_storage() -> int"
			],
			[
				"entityfrom",
				"entity_from_handle(handle: EntityHandle) -> *Entity"
			],
			[
				"entityf",
				"entity_from_handle(handle: EntityHandle) -> *Entity"
			],
			[
				"camera_",
				"camera_offset"
			],
			[
				"slot",
				"slot_active"
			],
			[
				"invent",
				"inventory_slots"
			],
			[
				"Resourc",
				"ResourceID"
			],
			[
				"eq",
				"equip"
			],
			[
				"unlock",
				"unlocked_recipes"
			],
			[
				"Res",
				"ResourceID"
			],
			[
				"REs",
				"ResourceID"
			],
			[
				"QueryPer",
				"QueryPerformanceCounter"
			],
			[
				"fre",
				"frequency"
			],
			[
				"QueryP",
				"QueryPerformanceFrequency"
			],
			[
				"spall",
				"spall_buffer_end"
			]
		]
	},
	"buffers":
	[
		{
			"file": "module.jai",
			"settings":
			{
				"buffer_size": 3766,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "steam.jai",
			"settings":
			{
				"buffer_size": 16675,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"AwAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					11,
					1,
					"paste",
					null,
					"AQAAAAEAAAAAAAAAiAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAAEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAA"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAIoAAAAAAAAAiwAAAAAAAAAAAAAAiwAAAAAAAACMAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKAAAAAAAAAIoAAAAAAAAA////////738"
				],
				[
					26,
					1,
					"paste",
					null,
					"AQAAAIwAAAAAAAAAoAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMAAAAAAAAAIwAAAAAAAAAAAAAAAAAAAA"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " ::"
					},
					"AwAAAKAAAAAAAAAAoQAAAAAAAAAAAAAAoQAAAAAAAACiAAAAAAAAAAAAAACiAAAAAAAAAKMAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgAAAAAAAAAKAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKMAAAAAAAAApAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjAAAAAAAAAKMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKQAAAAAAAAApgAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkAAAAAAAAAKQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " #forieg"
					},
					"CAAAAKYAAAAAAAAApwAAAAAAAAAAAAAApwAAAAAAAACoAAAAAAAAAAAAAACoAAAAAAAAAKkAAAAAAAAAAAAAAKkAAAAAAAAAqgAAAAAAAAAAAAAAqgAAAAAAAACrAAAAAAAAAAAAAACrAAAAAAAAAKwAAAAAAAAAAAAAAKwAAAAAAAAArQAAAAAAAAAAAAAArQAAAAAAAACuAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmAAAAAAAAAKYAAAAAAAAA////////738"
				],
				[
					35,
					1,
					"insert_completion",
					{
						"completion": "foreign",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "foreign"
					},
					"AgAAAKgAAAAAAAAAqAAAAAAAAAAGAAAAZm9yaWVnqAAAAAAAAACvAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuAAAAAAAAAK4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " Stea"
					},
					"BQAAAK8AAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAACxAAAAAAAAAAAAAACxAAAAAAAAALIAAAAAAAAAAAAAALIAAAAAAAAAswAAAAAAAAAAAAAAswAAAAAAAAC0AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvAAAAAAAAAK8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert_completion",
					{
						"completion": "steam",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "steam"
					},
					"AgAAALAAAAAAAAAAsAAAAAAAAAAEAAAAU3RlYbAAAAAAAAAAtQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0AAAAAAAAALQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALUAAAAAAAAAtgAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1AAAAAAAAALUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "u16"
					},
					"AwAAAKUAAAAAAAAApgAAAAAAAAAAAAAApgAAAAAAAACnAAAAAAAAAAAAAACnAAAAAAAAAKgAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClAAAAAAAAAKUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "unIP:"
					},
					"BQAAAKUAAAAAAAAApgAAAAAAAAAAAAAApgAAAAAAAACnAAAAAAAAAAAAAACnAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAAqQAAAAAAAAAAAAAAqQAAAAAAAACqAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClAAAAAAAAAKUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKoAAAAAAAAAqwAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqAAAAAAAAAKoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAK4AAAAAAAAArwAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuAAAAAAAAAK4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " u"
					},
					"AgAAAK8AAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAACxAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvAAAAAAAAAK8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "sGamePort:"
					},
					"CgAAALEAAAAAAAAAsgAAAAAAAAAAAAAAsgAAAAAAAACzAAAAAAAAAAAAAACzAAAAAAAAALQAAAAAAAAAAAAAALQAAAAAAAAAtQAAAAAAAAAAAAAAtQAAAAAAAAC2AAAAAAAAAAAAAAC2AAAAAAAAALcAAAAAAAAAAAAAALcAAAAAAAAAuAAAAAAAAAAAAAAAuAAAAAAAAAC5AAAAAAAAAAAAAAC5AAAAAAAAALoAAAAAAAAAAAAAALoAAAAAAAAAuwAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxAAAAAAAAALEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": " u16,"
					},
					"BQAAALsAAAAAAAAAvAAAAAAAAAAAAAAAvAAAAAAAAAC9AAAAAAAAAAAAAAC9AAAAAAAAAL4AAAAAAAAAAAAAAL4AAAAAAAAAvwAAAAAAAAAAAAAAvwAAAAAAAADAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7AAAAAAAAALsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": " u16"
					},
					"BAAAAMAAAAAAAAAAwQAAAAAAAAAAAAAAwQAAAAAAAADCAAAAAAAAAAAAAADCAAAAAAAAAMMAAAAAAAAAAAAAAMMAAAAAAAAAxAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAAAAAAAAAAMAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAMEAAAAAAAAAwQAAAAAAAAADAAAAdTE2",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEAAAAAAAAAMQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "usQue"
					},
					"BQAAAMEAAAAAAAAAwgAAAAAAAAAAAAAAwgAAAAAAAADDAAAAAAAAAAAAAADDAAAAAAAAAMQAAAAAAAAAAAAAAMQAAAAAAAAAxQAAAAAAAAAAAAAAxQAAAAAAAADGAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBAAAAAAAAAMEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"insert_completion",
					{
						"completion": "usQueryPort",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "usQueryPort"
					},
					"AgAAAMEAAAAAAAAAwQAAAAAAAAAFAAAAdXNRdWXBAAAAAAAAAMwAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGAAAAAAAAAMYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAMwAAAAAAAAAzQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMAAAAAAAAAMwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": " u176"
					},
					"BQAAAM0AAAAAAAAAzgAAAAAAAAAAAAAAzgAAAAAAAADPAAAAAAAAAAAAAADPAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA0QAAAAAAAAAAAAAA0QAAAAAAAADSAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNAAAAAAAAAM0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					2,
					"left_delete",
					null,
					"AgAAANEAAAAAAAAA0QAAAAAAAAABAAAANtAAAAAAAAAA0AAAAAAAAAABAAAANw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSAAAAAAAAANIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "6,"
					},
					"AgAAANAAAAAAAAAA0QAAAAAAAAAAAAAA0QAAAAAAAADSAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQAAAAAAAAANAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANIAAAAAAAAA0wAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSAAAAAAAAANIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "eServ"
					},
					"BQAAANMAAAAAAAAA1AAAAAAAAAAAAAAA1AAAAAAAAADVAAAAAAAAAAAAAADVAAAAAAAAANYAAAAAAAAAAAAAANYAAAAAAAAA1wAAAAAAAAAAAAAA1wAAAAAAAADYAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTAAAAAAAAANMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					62,
					1,
					"insert_completion",
					{
						"completion": "eServerMode",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "eServerMode"
					},
					"AgAAANMAAAAAAAAA0wAAAAAAAAAFAAAAZVNlcnbTAAAAAAAAAN4AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYAAAAAAAAANgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAN4AAAAAAAAA3wAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADeAAAAAAAAAN4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": " ESer"
					},
					"BQAAAN8AAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAAADhAAAAAAAAAAAAAADhAAAAAAAAAOIAAAAAAAAAAAAAAOIAAAAAAAAA4wAAAAAAAAAAAAAA4wAAAAAAAADkAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfAAAAAAAAAN8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "verMode"
					},
					"BwAAAOQAAAAAAAAA5QAAAAAAAAAAAAAA5QAAAAAAAADmAAAAAAAAAAAAAADmAAAAAAAAAOcAAAAAAAAAAAAAAOcAAAAAAAAA6AAAAAAAAAAAAAAA6AAAAAAAAADpAAAAAAAAAAAAAADpAAAAAAAAAOoAAAAAAAAAAAAAAOoAAAAAAAAA6wAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkAAAAAAAAAOQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOsAAAAAAAAA7AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrAAAAAAAAAOsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOwAAAAAAAAA7QAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsAAAAAAAAAOwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "pchVer"
					},
					"BgAAAO0AAAAAAAAA7gAAAAAAAAAAAAAA7gAAAAAAAADvAAAAAAAAAAAAAADvAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAAA8QAAAAAAAAAAAAAA8QAAAAAAAADyAAAAAAAAAAAAAADyAAAAAAAAAPMAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtAAAAAAAAAO0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"insert_completion",
					{
						"completion": "pchVersionString",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pchVersionString"
					},
					"AgAAAO0AAAAAAAAA7QAAAAAAAAAGAAAAcGNoVmVy7QAAAAAAAAD9AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzAAAAAAAAAPMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAP0AAAAAAAAA/gAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9AAAAAAAAAP0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": " u8U"
					},
					"BAAAAP4AAAAAAAAA/wAAAAAAAAAAAAAA/wAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAEBAAAAAAAAAAAAAAEBAAAAAAAAAgEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+AAAAAAAAAP4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"left_delete",
					null,
					"AQAAAAEBAAAAAAAAAQEAAAAAAAABAAAAVQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACAQAAAAAAAAIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAP8AAAAAAAAAAAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/AAAAAAAAAP8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": " ->"
					},
					"AwAAAAMBAAAAAAAABAEAAAAAAAAAAAAABAEAAAAAAAAFAQAAAAAAAAAAAAAFAQAAAAAAAAYBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADAQAAAAAAAAMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": " bool"
					},
					"BQAAAAYBAAAAAAAABwEAAAAAAAAAAAAABwEAAAAAAAAIAQAAAAAAAAAAAAAIAQAAAAAAAAkBAAAAAAAAAAAAAAkBAAAAAAAACgEAAAAAAAAAAAAACgEAAAAAAAALAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGAQAAAAAAAAYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					88,
					1,
					"paste",
					null,
					"AgAAAIwAAAAAAAAAqQAAAAAAAAAAAAAAqQAAAAAAAACpAAAAAAAAABQAAABTdGVhbUdhbWVTZXJ2ZXJfSW5pdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMAAAAAAAAAKAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"cut",
					null,
					"AQAAAIwAAAAAAAAAjAAAAAAAAAAdAAAAU3RlYW1JbnRlcm5hbF9HYW1lU2VydmVyX0luaXQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMAAAAAAAAAKkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "GameServer"
					},
					"CgAAAIwAAAAAAAAAjQAAAAAAAAAAAAAAjQAAAAAAAACOAAAAAAAAAAAAAACOAAAAAAAAAI8AAAAAAAAAAAAAAI8AAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACRAAAAAAAAAAAAAACRAAAAAAAAAJIAAAAAAAAAAAAAAJIAAAAAAAAAkwAAAAAAAAAAAAAAkwAAAAAAAACUAAAAAAAAAAAAAACUAAAAAAAAAJUAAAAAAAAAAAAAAJUAAAAAAAAAlgAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMAAAAAAAAAIwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "_Init"
					},
					"BQAAAJYAAAAAAAAAlwAAAAAAAAAAAAAAlwAAAAAAAACYAAAAAAAAAAAAAACYAAAAAAAAAJkAAAAAAAAAAAAAAJkAAAAAAAAAmgAAAAAAAAAAAAAAmgAAAAAAAACbAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWAAAAAAAAAJYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA8BAAAAAAAAEAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPAQAAAAAAAA8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					101,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAABABAAAAAAAAEgEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQAQAAAAAAABABAAAAAAAAAAAAAAAA8L8"
				],
				[
					102,
					1,
					"paste",
					null,
					"AQAAABEBAAAAAAAALgEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARAQAAAAAAABEBAAAAAAAAAAAAAAAA8L8"
				],
				[
					105,
					1,
					"cut",
					null,
					"AQAAABABAAAAAAAAEAEAAAAAAAAfAAAAIlN0ZWFtSW50ZXJuYWxfR2FtZVNlcnZlcl9Jbml0Ig",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQAQAAAAAAAC8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"left_delete",
					null,
					"AQAAAA8BAAAAAAAADwEAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQAQAAAAAAABABAAAAAAAAAAAAAAAA8L8"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABUBAAAAAAAAFgEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVAQAAAAAAABUBAAAAAAAAAAAAAAAA8L8"
				],
				[
					110,
					1,
					"paste",
					null,
					"AQAAABYBAAAAAAAANQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWAQAAAAAAABYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					119,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoBQAAAAAAAOgFAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"AwAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAOQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n\n\n\n"
					},
					"BAAAADoBAAAAAAAAOwEAAAAAAAAAAAAAOwEAAAAAAAA8AQAAAAAAAAAAAAA8AQAAAAAAAD0BAAAAAAAAAAAAAD0BAAAAAAAAPgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgEAAAAAAAA6AQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"paste",
					null,
					"AQAAADwBAAAAAAAAqRgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAEAAAAAAAA8AQAAAAAAAAAAAAAAAAAA"
				],
				[
					24,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAswEAAAAAAACzAQAAAAAAAAAAAAAAAEtA"
				],
				[
					25,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAswEAAAAAAACzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line.sublime-macro",
						"register": "\""
					},
					"AQAAAEsBAAAAAAAATAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwEAAAAAAABLAQAAAAAAAAAAAAAAAAAA"
				],
				[
					57,
					1,
					"paste",
					null,
					"AQAAAEwBAAAAAAAA2AEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAEAAAAAAABMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEsBAAAAAAAATAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwEAAAAAAABLAQAAAAAAAAAAAAAAWI1A"
				],
				[
					60,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Line.sublime-macro"
					},
					"AQAAAEwBAAAAAAAATAEAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAATAEAAAAAAABMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "*/"
					},
					"AgAAAEgZAAAAAAAASRkAAAAAAAAAAAAASRkAAAAAAABKGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASBkAAAAAAABIGQAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "\n/*"
					},
					"AwAAAEsBAAAAAAAATAEAAAAAAAAAAAAATAEAAAAAAABNAQAAAAAAAAAAAABNAQAAAAAAAE4BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwEAAAAAAABLAQAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"cut",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAABKAQAALy9ib29sIFN0ZWFtR2FtZVNlcnZlcl9Jbml0KCB1aW50MzIgdW5JUCwgdWludDE2IHVzR2FtZVBvcnQsIHVpbnQxNiB1c1F1ZXJ5UG9ydCwgRVNlcnZlck1vZGUgZVNlcnZlck1vZGUsIGNvbnN0IGNoYXIgKnBjaFZlcnNpb25TdHJpbmcgKTsKU3RlYW1HYW1lU2VydmVyX0luaXQgOjogKHVuSVA6IHUxNiwgbGVnYWN5UG9ydDogdTE2LCB1c0dhbWVQb3J0OiB1MTYsIHVzUXVlcnlQb3J0OiB1MTYsIGVTZXJ2ZXJNb2RlOiBFU2VydmVyTW9kZSwgcGNoVmVyc2lvblN0cmluZzogKnU4KSAtPiBib29sICNmb3JlaWduIHN0ZWFtICJTdGVhbUludGVybmFsX0dhbWVTZXJ2ZXJfSW5pdCI7",
					"AQAAAAAAAAABAAAASgEAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "sdk/steamworksexample/SpaceWarServer.cpp",
			"settings":
			{
				"buffer_size": 37562,
				"encoding": "Western (Windows 1252)",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "sdk/public/steam/steamclientpublic.h",
			"settings":
			{
				"buffer_size": 67678,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "sdk/steamworksexample/SpaceWarClient.cpp",
			"settings":
			{
				"buffer_size": 87493,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "steam_flat.jai",
			"settings":
			{
				"buffer_size": 11446,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4IAAAAAAAAPggAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"cut",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAA5AQAALy9ib29sIFN0ZWFtR2FtZVNlcnZlcl9Jbml0KCB1aW50MzIgdW5JUCwgdWludDE2IHVzR2FtZVBvcnQsIHVpbnQxNiB1c1F1ZXJ5UG9ydCwgRVNlcnZlck1vZGUgZVNlcnZlck1vZGUsIGNvbnN0IGNoYXIgKnBjaFZlcnNpb25TdHJpbmcgKTsKU3RlYW1HYW1lU2VydmVyX0luaXQgOjogKHVuSVA6IHUxNiwgdXNHYW1lUG9ydDogdTE2LCB1c1F1ZXJ5UG9ydDogdTE2LCBlU2VydmVyTW9kZTogRVNlcnZlck1vZGUsIHBjaFZlcnNpb25TdHJpbmc6ICp1OCkgLT4gYm9vbCAjZm9yZWlnbiBzdGVhbSAiU3RlYW1JbnRlcm5hbF9HYW1lU2VydmVyX0luaXQiOw",
					"AQAAAAAAAAABAAAAOQEAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					3,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Line.sublime-macro"
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAAABAAAACgAAAAAAAAAAAAAAAAAAAAABAAAACgAAAAAAAAAAAAAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					35,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAASgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "generate_files.jai",
			"settings":
			{
				"buffer_size": 45273,
				"line_ending": "Windows"
			}
		},
		{
			"file": "sdk/public/steam/steam_api_common.h",
			"settings":
			{
				"buffer_size": 9435,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "sdk/steamworksexample/SpaceWarServer.h",
			"settings":
			{
				"buffer_size": 5750,
				"encoding": "Western (Windows 1252)",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "sdk/public/steam/steam_gameserver.h",
			"settings":
			{
				"buffer_size": 5420,
				"encoding": "Western (Windows 1252)",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "README.jai",
			"settings":
			{
				"buffer_size": 8056,
				"line_ending": "Windows"
			}
		},
		{
			"file": "example/spacewar.jai",
			"settings":
			{
				"buffer_size": 53892,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "sdk/public/steam/isteamgameserver.h",
			"settings":
			{
				"buffer_size": 15674,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "src-autogen/steam_game_server_utils.jai",
			"settings":
			{
				"buffer_size": 6304,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src-autogen/steam_game_server_networking_sockets.jai",
			"settings":
			{
				"buffer_size": 10110,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src-autogen/partial_steam_callbacks.jai",
			"settings":
			{
				"buffer_size": 209029,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "src-autogen/api_flat.jai",
			"redo_stack":
			[
				[
					11,
					1,
					"left_delete",
					null,
					"AQAAALCdAgAAAAAAsZ0CAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwnQIAAAAAALCdAgAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "w"
					},
					"AQAAALCdAgAAAAAAsJ0CAAAAAAABAAAAdw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxnQIAAAAAALGdAgAAAAAAAAAAAAAA8L8"
				]
			],
			"settings":
			{
				"buffer_size": 339522,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/build.jai",
			"settings":
			{
				"buffer_size": 2337,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src-autogen/steam_client.jai",
			"settings":
			{
				"buffer_size": 7096,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"contents": "Searching 351 files for \"CSteamID\"\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\steam.jai:\n   29  SetGameData :: (self: *ISteamGameServer, pchGameData: *char) #foreign steam \"SteamAPI_ISteamGameServer_SetGameData\";\n   30  SetRegion :: (self: *ISteamGameServer, pszRegion: *char) #foreign steam \"SteamAPI_ISteamGameServer_SetRegion\";\n   31: SendUserConnectAndAuthenticate :: (self: *ISteamGameServer, unIPClient: uint32, pvAuthBlob: *void, cubAuthBlobSize: uint32, pSteamIDUser: *CSteamID) -> bool #foreign steam \"SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate\";\n   32  CreateUnauthenticatedUserConnection :: (self: *ISteamGameServer) -> uint64_steamid #foreign steam \"SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection\";\n   33  SendUserDisconnect :: (self: *ISteamGameServer, steamIDUser: uint64_steamid) #foreign steam \"SteamAPI_ISteamGameServer_SendUserDisconnect\";\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\example\\spacewar.jai:\n  142  \n  143  \n  144: make_player :: (player: *Player, handle: CSteamID, name: string, position: Vector2, color: Vector4) {\n  145      player.handle = handle;\n  146      player.position = position;\n  ...\n  157  \n  158  \n  159: add_player :: (handle: CSteamID, name: string, position: Vector2, color: Vector4) {\n  160      make_player(*players[player_count], handle, name, position, color);\n  161  }\n  ...\n  461      name       : string;\n  462      label      : Label;\n  463:     handle     : CSteamID;  // @Steam\n  464      color      : Vector4;\n  465      shot_color : Vector4;\n  ...\n 1635  \n 1636  \n 1637: joined_lobby  : CSteamID = 0;\n 1638: hosted_lobby : CSteamID = 0;\n 1639  hosted_lobby_is_public := true;\n 1640  \n ....\n 1650  \n 1651  Lobby :: struct {\n 1652:     handle       : CSteamID;\n 1653      host_name    : string;\n 1654      player_count : int;\n ....\n 1656  \n 1657  \n 1658: add_lobby :: (handle: CSteamID, host_name: string, player_count_string: string) {\n 1659      log(\"% % %\", handle, host_name, player_count_string);\n 1660      lobby : Lobby = ---;\n ....\n 1720  \n 1721  \n 1722: join_lobby :: (lobby_id: CSteamID) {\n 1723      leave_current_lobby();\n 1724      JoinLobby(lobby_id);\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\Readme.txt:\n 1015  \tvirtual EVoiceResult DecompressVoice( void *pCompressed, uint32 cbCompressed, void *pDestBuffer, uint32 cbDestBufferSize, uint32 *nBytesWritten ) = 0;\n 1016  \n 1017: virtual int InitiateGameConnection( void *pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint32 unIPServer, uint16 usPortServer, bool bSecure ) = 0;\n 1018  \n 1019  This has been extended to be usable for games that don't use the other parts of Steamworks matchmaking. This allows any multiplayer game to easily notify the Steam client of the IP:Port of the game server the user is connected to, so that their friends can join them via the Steam friends list. Empty values are taken for auth blob.\n ....\n 1039  \n 1040        // returns the details of a game server set in a lobby - returns false if there is no game server set, or that lobby doesn't exist\n 1041:       virtual bool GetLobbyGameServer( CSteamID steamIDLobby, uint32 *punGameServerIP, uint16 *punGameServerPort, CSteamID *psteamIDGameServer ) = 0;\n 1042  \n 1043        // set the limit on the # of users who can join the lobby\n 1044:       virtual bool SetLobbyMemberLimit( CSteamID steamIDLobby, int cMaxMembers ) = 0;\n 1045        // returns the current limit on the # of users who can join the lobby; returns 0 if no limit is defined\n 1046:       virtual int GetLobbyMemberLimit( CSteamID steamIDLobby ) = 0;\n 1047  \n 1048        // asks the Steam servers for a list of lobbies that friends are in\n ....\n 1060  \n 1061  ISteamFriends\n 1062:             virtual int GetFriendAvatar( CSteamID steamIDFriend, int eAvatarSize ) = 0;\n 1063  \n 1064  This function now takes an eAvatarSize parameter, which can be k_EAvatarSize32x32 or k_EAvatarSize64x64 (previously it always just returned a handle to the 32x32 image)\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\public\\steam\\isteamapps.h:\n   68  \tvirtual bool BIsAppInstalled( AppId_t appID ) = 0; // returns true if that app is installed (not necessarily owned)\n   69  \t\n   70: \t// returns the SteamID of the original owner. If this CSteamID is different from ISteamUser::GetSteamID(),\n   71  \t// the user has a temporary license borrowed via Family Sharing\n   72: \tvirtual CSteamID GetAppOwner() = 0; \n   73  \n   74  \t// Returns the associated launch param if the game is run via steam://run/<appid>//?param1=value1&param2=value2&param3=value3 etc.\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\public\\steam\\isteamfriends.h:\n  100  \tuint16 m_usGamePort;\n  101  \tuint16 m_usQueryPort;\n  102: \tCSteamID m_steamIDLobby;\n  103  };\n  104  #pragma pack( pop )\n  ...\n  194  \t// iFriend is a index of range [0, GetFriendCount())\n  195  \t// iFriendsFlags must be the same value as used in GetFriendCount()\n  196: \t// the returned CSteamID can then be used by all the functions below to access details about the user\n  197: \tvirtual CSteamID GetFriendByIndex( int iFriend, int iFriendFlags ) = 0;\n  198  \n  199  \t// returns a relationship to a user\n  200: \tvirtual EFriendRelationship GetFriendRelationship( CSteamID steamIDFriend ) = 0;\n  201  \n  202  \t// returns the current status of the specified user\n  203  \t// this will only be known by the local user if steamIDFriend is in their friends list; on the same game server; in a chat room or lobby; or in a small group with the local user\n  204: \tvirtual EPersonaState GetFriendPersonaState( CSteamID steamIDFriend ) = 0;\n  205  \n  206  \t// returns the name another user - guaranteed to not be NULL.\n  ...\n  208  \t// note that on first joining a lobby, chat room or game server the local user will not known the name of the other users automatically; that information will arrive asyncronously\n  209  \t// \n  210: \tvirtual const char *GetFriendPersonaName( CSteamID steamIDFriend ) = 0;\n  211  \n  212  \t// returns true if the friend is actually in a game, and fills in pFriendGameInfo with an extra details \n  213: \tvirtual bool GetFriendGamePlayed( CSteamID steamIDFriend, STEAM_OUT_STRUCT() FriendGameInfo_t *pFriendGameInfo ) = 0;\n  214  \t// accesses old friends names - returns an empty string when their are no more items in the history\n  215: \tvirtual const char *GetFriendPersonaNameHistory( CSteamID steamIDFriend, int iPersonaName ) = 0;\n  216  \t// friends steam level\n  217: \tvirtual int GetFriendSteamLevel( CSteamID steamIDFriend ) = 0;\n  218  \n  219  \t// Returns nickname the current user has set for the specified player. Returns NULL if the no nickname has been set for that player.\n  220  \t// DEPRECATED: GetPersonaName follows the Steam nickname preferences, so apps shouldn't need to care about nicknames explicitly.\n  221: \tvirtual const char *GetPlayerNickname( CSteamID steamIDPlayer ) = 0;\n  222  \n  223  \t// friend grouping (tag) apis\n  ...\n  231  \tvirtual int GetFriendsGroupMembersCount( FriendsGroupID_t friendsGroupID ) = 0;\n  232  \t// gets up to nMembersCount members of the given friends group, if fewer exist than requested those positions' SteamIDs will be invalid\n  233: \tvirtual void GetFriendsGroupMembersList( FriendsGroupID_t friendsGroupID, STEAM_OUT_ARRAY_CALL(nMembersCount, GetFriendsGroupMembersCount, friendsGroupID ) CSteamID *pOutSteamIDMembers, int nMembersCount ) = 0;\n  234  \n  235  \t// returns true if the specified user meets any of the criteria specified in iFriendFlags\n  236  \t// iFriendFlags can be the union (binary or, |) of one or more k_EFriendFlags values\n  237: \tvirtual bool HasFriend( CSteamID steamIDFriend, int iFriendFlags ) = 0;\n  238  \n  239  \t// clan (group) iteration and access functions\n  240  \tvirtual int GetClanCount() = 0;\n  241: \tvirtual CSteamID GetClanByIndex( int iClan ) = 0;\n  242: \tvirtual const char *GetClanName( CSteamID steamIDClan ) = 0;\n  243: \tvirtual const char *GetClanTag( CSteamID steamIDClan ) = 0;\n  244  \t// returns the most recent information we have about what's happening in a clan\n  245: \tvirtual bool GetClanActivityCounts( CSteamID steamIDClan, int *pnOnline, int *pnInGame, int *pnChatting ) = 0;\n  246  \n  247  \t// for clans a user is a member of, they will have reasonably up-to-date information, but for others you'll have to download the info to have the latest\n  248  \tSTEAM_CALL_RESULT( DownloadClanActivityCountsResult_t )\n  249: \tvirtual SteamAPICall_t DownloadClanActivityCounts( STEAM_ARRAY_COUNT(cClansToRequest) CSteamID *psteamIDClans, int cClansToRequest ) = 0;\n  250  \n  251  \t// iterators for getting users in a chat room, lobby, game server or clan\n  252  \t// note that large clans that cannot be iterated by the local user\n  253: \t// note that the current user must be in a lobby to retrieve CSteamIDs of other users in that lobby\n  254  \t// steamIDSource can be the steamID of a group, game server, lobby or chat room\n  255: \tvirtual int GetFriendCountFromSource( CSteamID steamIDSource ) = 0;\n  256: \tvirtual CSteamID GetFriendFromSourceByIndex( CSteamID steamIDSource, int iFriend ) = 0;\n  257  \n  258  \t// returns true if the local user can see that steamIDUser is a member or in steamIDSource\n  259: \tvirtual bool IsUserInSource( CSteamID steamIDUser, CSteamID steamIDSource ) = 0;\n  260  \n  261  \t// User is in a game pressing the talk button (will suppress the microphone for all voice comms from the Steam friends UI)\n  262: \tvirtual void SetInGameVoiceSpeaking( CSteamID steamIDUser, bool bSpeaking ) = 0;\n  263  \n  264  \t// activates the game overlay, with an optional dialog to open \n  ...\n  278  \t//\t\t\"friendrequestaccept\" - opens the overlay in minimal mode prompting the user to accept an incoming friend invite\n  279  \t//\t\t\"friendrequestignore\" - opens the overlay in minimal mode prompting the user to ignore an incoming friend invite\n  280: \tvirtual void ActivateGameOverlayToUser( const char *pchDialog, CSteamID steamID ) = 0;\n  281  \n  282  \t// activates game overlay web browser directly to the specified URL\n  ...\n  289  \t// Mark a target user as 'played with'. This is a client-side only feature that requires that the calling user is \n  290  \t// in game \n  291: \tvirtual void SetPlayedWith( CSteamID steamIDUserPlayedWith ) = 0;\n  292  \n  293  \t// activates game overlay to open the invite dialog. Invitations will be sent for the provided lobby.\n  294: \tvirtual void ActivateGameOverlayInviteDialog( CSteamID steamIDLobby ) = 0;\n  295  \n  296  \t// gets the small (32x32) avatar of the current user, which is a handle to be used in IClientUtils::GetImageRGBA(), or 0 if none set\n  297: \tvirtual int GetSmallFriendAvatar( CSteamID steamIDFriend ) = 0;\n  298  \n  299  \t// gets the medium (64x64) avatar of the current user, which is a handle to be used in IClientUtils::GetImageRGBA(), or 0 if none set\n  300: \tvirtual int GetMediumFriendAvatar( CSteamID steamIDFriend ) = 0;\n  301  \n  302  \t// gets the large (184x184) avatar of the current user, which is a handle to be used in IClientUtils::GetImageRGBA(), or 0 if none set\n  303  \t// returns -1 if this image has yet to be loaded, in this case wait for a AvatarImageLoaded_t callback and then call this again\n  304: \tvirtual int GetLargeFriendAvatar( CSteamID steamIDFriend ) = 0;\n  305  \n  306  \t// requests information about a user - persona name & avatar\n  ...\n  309  \t// if returns true, it means that data is being requested, and a PersonaStateChanged_t callback will be posted when it's retrieved\n  310  \t// if returns false, it means that we already have all the details about that user, and functions can be called immediately\n  311: \tvirtual bool RequestUserInformation( CSteamID steamIDUser, bool bRequireNameOnly ) = 0;\n  312  \n  313  \t// requests information about a clan officer list\n  ...\n  318  \t// and no avatar image is available, call RequestUserInformation( steamID, false ) to download the avatar\n  319  \tSTEAM_CALL_RESULT( ClanOfficerListResponse_t )\n  320: \tvirtual SteamAPICall_t RequestClanOfficerList( CSteamID steamIDClan ) = 0;\n  321  \n  322  \t// iteration of clan officers - can only be done when a RequestClanOfficerList() call has completed\n  323  \t\n  324  \t// returns the steamID of the clan owner\n  325: \tvirtual CSteamID GetClanOwner( CSteamID steamIDClan ) = 0;\n  326  \t// returns the number of officers in a clan (including the owner)\n  327: \tvirtual int GetClanOfficerCount( CSteamID steamIDClan ) = 0;\n  328  \t// returns the steamID of a clan officer, by index, of range [0,GetClanOfficerCount)\n  329: \tvirtual CSteamID GetClanOfficerByIndex( CSteamID steamIDClan, int iOfficer ) = 0;\n  330  \t// if current user is chat restricted, he can't send or receive any text/voice chat messages.\n  331  \t// the user can't see custom avatars. But the user can be online and send/recv game invites.\n  ...\n  351  \tvirtual bool SetRichPresence( const char *pchKey, const char *pchValue ) = 0;\n  352  \tvirtual void ClearRichPresence() = 0;\n  353: \tvirtual const char *GetFriendRichPresence( CSteamID steamIDFriend, const char *pchKey ) = 0;\n  354: \tvirtual int GetFriendRichPresenceKeyCount( CSteamID steamIDFriend ) = 0;\n  355: \tvirtual const char *GetFriendRichPresenceKeyByIndex( CSteamID steamIDFriend, int iKey ) = 0;\n  356  \t// Requests rich presence for a specific user.\n  357: \tvirtual void RequestFriendRichPresence( CSteamID steamIDFriend ) = 0;\n  358  \n  359  \t// Rich invite support.\n  360  \t// If the target accepts the invite, a GameRichPresenceJoinRequested_t callback is posted containing the connect string.\n  361  \t// (Or you can configure your game so that it is passed on the command line instead.  This is a deprecated path; ask us if you really need this.)\n  362: \tvirtual bool InviteUserToGame( CSteamID steamIDFriend, const char *pchConnectString ) = 0;\n  363  \n  364  \t// recently-played-with friends iteration\n  ...\n  366  \t// GetFriendCoplayTime() returns as a unix time\n  367  \tvirtual int GetCoplayFriendCount() = 0;\n  368: \tvirtual CSteamID GetCoplayFriend( int iCoplayFriend ) = 0;\n  369: \tvirtual int GetFriendCoplayTime( CSteamID steamIDFriend ) = 0;\n  370: \tvirtual AppId_t GetFriendCoplayGame( CSteamID steamIDFriend ) = 0;\n  371  \n  372  \t// chat interface for games\n  ...\n  375  \t// use ActivateGameOverlayToUser( \"chat\", steamIDClan ) to open the in-game overlay version of the chat\n  376  \tSTEAM_CALL_RESULT( JoinClanChatRoomCompletionResult_t )\n  377: \tvirtual SteamAPICall_t JoinClanChatRoom( CSteamID steamIDClan ) = 0;\n  378: \tvirtual bool LeaveClanChatRoom( CSteamID steamIDClan ) = 0;\n  379: \tvirtual int GetClanChatMemberCount( CSteamID steamIDClan ) = 0;\n  380: \tvirtual CSteamID GetChatMemberByIndex( CSteamID steamIDClan, int iUser ) = 0;\n  381: \tvirtual bool SendClanChatMessage( CSteamID steamIDClanChat, const char *pchText ) = 0;\n  382: \tvirtual int GetClanChatMessage( CSteamID steamIDClanChat, int iMessage, void *prgchText, int cchTextMax, EChatEntryType *peChatEntryType, STEAM_OUT_STRUCT() CSteamID *psteamidChatter ) = 0;\n  383: \tvirtual bool IsClanChatAdmin( CSteamID steamIDClanChat, CSteamID steamIDUser ) = 0;\n  384  \n  385  \t// interact with the Steam (game overlay / desktop)\n  386: \tvirtual bool IsClanChatWindowOpenInSteam( CSteamID steamIDClanChat ) = 0;\n  387: \tvirtual bool OpenClanChatWindowInSteam( CSteamID steamIDClanChat ) = 0;\n  388: \tvirtual bool CloseClanChatWindowInSteam( CSteamID steamIDClanChat ) = 0;\n  389  \n  390  \t// peer-to-peer chat interception\n  391  \t// this is so you can show P2P chats inline in the game\n  392  \tvirtual bool SetListenForFriendsMessages( bool bInterceptEnabled ) = 0;\n  393: \tvirtual bool ReplyToFriendMessage( CSteamID steamIDFriend, const char *pchMsgToSend ) = 0;\n  394: \tvirtual int GetFriendMessage( CSteamID steamIDFriend, int iMessageID, void *pvData, int cubData, EChatEntryType *peChatEntryType ) = 0;\n  395  \n  396  \t// following apis\n  397  \tSTEAM_CALL_RESULT( FriendsGetFollowerCount_t )\n  398: \tvirtual SteamAPICall_t GetFollowerCount( CSteamID steamID ) = 0;\n  399  \tSTEAM_CALL_RESULT( FriendsIsFollowing_t )\n  400: \tvirtual SteamAPICall_t IsFollowing( CSteamID steamID ) = 0;\n  401  \tSTEAM_CALL_RESULT( FriendsEnumerateFollowingList_t )\n  402  \tvirtual SteamAPICall_t EnumerateFollowingList( uint32 unStartIndex ) = 0;\n  403  \n  404: \tvirtual bool IsClanPublic( CSteamID steamIDClan ) = 0;\n  405: \tvirtual bool IsClanOfficialGameGroup( CSteamID steamIDClan ) = 0;\n  406  \n  407  \t/// Return the number of chats (friends or chat rooms) with unread messages.\n  ...\n  414  \n  415  \t// activates game overlay to open the remote play together invite dialog. Invitations will be sent for remote play together\n  416: \tvirtual void ActivateGameOverlayRemotePlayTogetherInviteDialog( CSteamID steamIDLobby ) = 0;\n  417  \n  418  \t// Call this before calling ActivateGameOverlayToWebPage() to have the Steam Overlay Browser block navigations\n  ...\n  504  {\n  505  \tenum { k_iCallback = k_iSteamFriendsCallbacks + 33 };\n  506: \tCSteamID m_steamIDLobby;\n  507  \n  508  \t// The friend they did the join via (will be invalid if not directly via a friend)\n  ...\n  511  \t// the account type will be console user so you can tell at least that this was from a PSN friend\n  512  \t// rather than a Steam friend.\n  513: \tCSteamID m_steamIDFriend;\t\t\n  514  };\n  515  \n  ...\n  522  {\n  523  \tenum { k_iCallback = k_iSteamFriendsCallbacks + 34 };\n  524: \tCSteamID m_steamID; // steamid the avatar has been loaded for\n  525  \tint m_iImage; // the image index of the now loaded image\n  526  \tint m_iWide; // width of the loaded image\n  ...\n  535  {\n  536  \tenum { k_iCallback = k_iSteamFriendsCallbacks + 35 };\n  537: \tCSteamID m_steamIDClan;\n  538  \tint m_cOfficers;\n  539  \tuint8 m_bSuccess;\n  ...\n  547  {\n  548  \tenum { k_iCallback = k_iSteamFriendsCallbacks + 36 };\n  549: \tCSteamID m_steamIDFriend;\t// friend who's rich presence has changed\n  550  \tAppId_t m_nAppID;\t\t\t// the appID of the game (should always be the current game)\n  551  };\n  ...\n  559  {\n  560  \tenum { k_iCallback = k_iSteamFriendsCallbacks + 37 };\n  561: \tCSteamID m_steamIDFriend;\t\t// the friend they did the join via (will be invalid if not directly via a friend)\n  562  \tchar m_rgchConnect[k_cchMaxRichPresenceValueLength];\n  563  };\n  ...\n  570  {\n  571  \tenum { k_iCallback = k_iSteamFriendsCallbacks + 38 };\n  572: \tCSteamID m_steamIDClanChat;\n  573: \tCSteamID m_steamIDUser;\n  574  \tint m_iMessageID;\n  575  };\n  ...\n  582  {\n  583  \tenum { k_iCallback = k_iSteamFriendsCallbacks + 39 };\n  584: \tCSteamID m_steamIDClanChat;\n  585: \tCSteamID m_steamIDUser;\n  586  };\n  587  \n  ...\n  593  {\n  594  \tenum { k_iCallback = k_iSteamFriendsCallbacks + 40 };\n  595: \tCSteamID m_steamIDClanChat;\n  596: \tCSteamID m_steamIDUser;\n  597  \tbool m_bKicked;\t\t// true if admin kicked\n  598  \tbool m_bDropped;\t// true if Steam connection dropped\n  ...\n  616  {\n  617  \tenum { k_iCallback = k_iSteamFriendsCallbacks + 42 };\n  618: \tCSteamID m_steamIDClanChat;\n  619  \tEChatRoomEnterResponse m_eChatRoomEnterResponse;\n  620  };\n  ...\n  626  {\n  627  \tenum { k_iCallback = k_iSteamFriendsCallbacks + 43 };\n  628: \tCSteamID m_steamIDUser;\n  629  \tint m_iMessageID;\n  630  };\n  ...\n  635  \tenum { k_iCallback = k_iSteamFriendsCallbacks + 44 };\n  636  \tEResult m_eResult;\n  637: \tCSteamID m_steamID;\n  638  \tint m_nCount;\n  639  };\n  ...\n  644  \tenum { k_iCallback = k_iSteamFriendsCallbacks + 45 };\n  645  \tEResult m_eResult;\n  646: \tCSteamID m_steamID;\n  647  \tbool m_bIsFollowing;\n  648  };\n  ...\n  653  \tenum { k_iCallback = k_iSteamFriendsCallbacks + 46 };\n  654  \tEResult m_eResult;\n  655: \tCSteamID m_rgSteamID[ k_cEnumerateFollowersMax ];\n  656  \tint32 m_nResultsReturned;\n  657  \tint32 m_nTotalResultCount;\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\public\\steam\\isteamgameserver.h:\n   69  \tvirtual bool BLoggedOn() = 0;\n   70  \tvirtual bool BSecure() = 0; \n   71: \tvirtual CSteamID GetSteamID() = 0;\n   72  \n   73  \t/// Returns true if the master server has requested a restart.\n   ..\n  143  \t// If the call succeeds then you should expect a GSClientApprove_t or GSClientDeny_t callback which will tell you whether authentication\n  144  \t// for the user has succeeded or failed (the steamid in the callback will match the one returned by this call)\n  145: \tvirtual bool SendUserConnectAndAuthenticate( uint32 unIPClient, const void *pvAuthBlob, uint32 cubAuthBlobSize, CSteamID *pSteamIDUser ) = 0;\n  146  \n  147  \t// Creates a fake user (ie, a bot) which will be listed as playing on the server, but skips validation.  \n  ...\n  149  \t// Return Value: Returns a SteamID for the user to be tracked with, you should call HandleUserDisconnect()\n  150  \t// when this user leaves the server just like you would for a real user.\n  151: \tvirtual CSteamID CreateUnauthenticatedUserConnection() = 0;\n  152  \n  153  \t// Should be called whenever a user leaves our game server, this lets Steam internally\n  154  \t// track which users are currently on which servers for the purposes of preventing a single\n  155  \t// account being logged into multiple servers, showing who is currently on a server, etc.\n  156: \tvirtual void SendUserDisconnect( CSteamID steamIDUser ) = 0;\n  157  \n  158  \t// Update the data to be displayed in the server browser and matchmaking interfaces for a user\n  ...\n  161  \t// \n  162  \t// Return Value: true if successful, false if failure (ie, steamIDUser wasn't for an active player)\n  163: \tvirtual bool BUpdateUserData( CSteamID steamIDUser, const char *pchPlayerName, uint32 uScore ) = 0;\n  164  \n  165  \t// New auth system APIs - do not mix with the old auth system APIs.\n  ...\n  172  \t// Authenticate ticket ( from GetAuthSessionTicket ) from entity steamID to be sure it is valid and isnt reused\n  173  \t// Registers for callbacks if the entity goes offline or cancels the ticket ( see ValidateAuthTicketResponse_t callback and EAuthSessionResponse )\n  174: \tvirtual EBeginAuthSessionResult BeginAuthSession( const void *pAuthTicket, int cbAuthTicket, CSteamID steamID ) = 0;\n  175  \n  176  \t// Stop tracking started by BeginAuthSession - called when no longer playing game with this entity\n  177: \tvirtual void EndAuthSession( CSteamID steamID ) = 0;\n  178  \n  179  \t// Cancel auth ticket from GetAuthSessionTicket, called when no longer playing game with the entity you gave the ticket to\n  ...\n  182  \t// After receiving a user's authentication data, and passing it to SendUserConnectAndAuthenticate, use this function\n  183  \t// to determine if the user owns downloadable content specified by the provided AppID.\n  184: \tvirtual EUserHasLicenseForAppResult UserHasLicenseForApp( CSteamID steamID, AppId_t appID ) = 0;\n  185  \n  186  \t// Ask if a user in in the specified group, results returns async by GSUserGroupStatus_t\n  187  \t// returns false if we're not connected to the steam servers and thus cannot ask\n  188: \tvirtual bool RequestUserGroupStatus( CSteamID steamIDUser, CSteamID steamIDGroup ) = 0;\n  189  \n  190  \n  ...\n  241  \t// associate this game server with this clan for the purposes of computing player compat\n  242  \tSTEAM_CALL_RESULT( AssociateWithClanResult_t )\n  243: \tvirtual SteamAPICall_t AssociateWithClan( CSteamID steamIDClan ) = 0;\n  244  \t\n  245  \t// ask if any of the current players dont want to play with this new player - or vice versa\n  246  \tSTEAM_CALL_RESULT( ComputeNewPlayerCompatibilityResult_t )\n  247: \tvirtual SteamAPICall_t ComputeNewPlayerCompatibility( CSteamID steamIDNewPlayer ) = 0;\n  248  \n  249  };\n  ...\n  269  {\n  270  \tenum { k_iCallback = k_iSteamGameServerCallbacks + 1 };\n  271: \tCSteamID m_SteamID;\t\t\t// SteamID of approved player\n  272: \tCSteamID m_OwnerSteamID;\t// SteamID of original owner for game license\n  273  };\n  274  \n  ...\n  278  {\n  279  \tenum { k_iCallback = k_iSteamGameServerCallbacks + 2 };\n  280: \tCSteamID m_SteamID;\n  281  \tEDenyReason m_eDenyReason;\n  282  \tchar m_rgchOptionalText[128];\n  ...\n  288  {\n  289  \tenum { k_iCallback = k_iSteamGameServerCallbacks + 3 };\n  290: \tCSteamID m_SteamID;\n  291  \tEDenyReason m_eDenyReason;\n  292  };\n  ...\n  327  {\n  328  \tenum { k_iCallback = k_iSteamGameServerCallbacks + 8 };\n  329: \tCSteamID m_SteamIDUser;\n  330: \tCSteamID m_SteamIDGroup;\n  331  \tbool m_bMember;\n  332  \tbool m_bOfficer;\n  ...\n  368  \tint m_cPlayersThatCandidateDoesntLike;\n  369  \tint m_cClanPlayersThatDontLikeCandidate;\n  370: \tCSteamID m_SteamIDCandidate;\n  371  };\n  372  \n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\public\\steam\\isteamgameserverstats.h:\n   25  \t// users you'll need to call RequestUserStats() again to refresh any data\n   26  \tSTEAM_CALL_RESULT( GSStatsReceived_t )\n   27: \tvirtual SteamAPICall_t RequestUserStats( CSteamID steamIDUser ) = 0;\n   28  \n   29  \t// requests stat information for a user, usable after a successful call to RequestUserStats()\n   30  \tSTEAM_FLAT_NAME( GetUserStatInt32 )\n   31: \tvirtual bool GetUserStat( CSteamID steamIDUser, const char *pchName, int32 *pData ) = 0;\n   32  \n   33  \tSTEAM_FLAT_NAME( GetUserStatFloat )\n   34: \tvirtual bool GetUserStat( CSteamID steamIDUser, const char *pchName, float *pData ) = 0;\n   35  \n   36: \tvirtual bool GetUserAchievement( CSteamID steamIDUser, const char *pchName, bool *pbAchieved ) = 0;\n   37  \n   38  \t// Set / update stats and achievements. \n   ..\n   42  \n   43  \tSTEAM_FLAT_NAME( SetUserStatInt32 )\n   44: \tvirtual bool SetUserStat( CSteamID steamIDUser, const char *pchName, int32 nData ) = 0;\n   45  \n   46  \tSTEAM_FLAT_NAME( SetUserStatFloat )\n   47: \tvirtual bool SetUserStat( CSteamID steamIDUser, const char *pchName, float fData ) = 0;\n   48  \n   49: \tvirtual bool UpdateUserAvgRateStat( CSteamID steamIDUser, const char *pchName, float flCountThisSession, double dSessionLength ) = 0;\n   50  \n   51: \tvirtual bool SetUserAchievement( CSteamID steamIDUser, const char *pchName ) = 0;\n   52: \tvirtual bool ClearUserAchievement( CSteamID steamIDUser, const char *pchName ) = 0;\n   53  \n   54  \t// Store the current data on the server, will get a GSStatsStored_t callback when set.\n   ..\n   59  \t// The stats should be re-iterated to keep in sync.\n   60  \tSTEAM_CALL_RESULT( GSStatsStored_t )\n   61: \tvirtual SteamAPICall_t StoreUserStats( CSteamID steamIDUser ) = 0;\n   62  };\n   63  #define STEAMGAMESERVERSTATS_INTERFACE_VERSION \"SteamGameServerStats001\"\n   ..\n   85  \tenum { k_iCallback = k_iSteamGameServerStatsCallbacks };\n   86  \tEResult\t\tm_eResult;\t\t// Success / error fetching the stats\n   87: \tCSteamID\tm_steamIDUser;\t// The user for whom the stats are retrieved for\n   88  };\n   89  \n   ..\n   96  \tenum { k_iCallback = k_iSteamGameServerStatsCallbacks + 1 };\n   97  \tEResult\t\tm_eResult;\t\t// success / error\n   98: \tCSteamID\tm_steamIDUser;\t// The user for whom the stats were stored\n   99  };\n  100  \n  ...\n  106  {\n  107  \tenum { k_iCallback = k_iSteamUserStatsCallbacks + 8 };\n  108: \tCSteamID\tm_steamIDUser;\t// User whose stats have been unloaded\n  109  };\n  110  \n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\public\\steam\\isteaminventory.h:\n  123  \t// that a remote player is not pretending to have a different user's inventory.\n  124  \tSTEAM_METHOD_DESC(Returns true if the result belongs to the target steam ID or false if the result does not. This is important when using DeserializeResult to verify that a remote player is not pretending to have a different users inventory.)\n  125: \tvirtual bool CheckResultSteamID( SteamInventoryResult_t resultHandle, CSteamID steamIDExpected ) = 0;\n  126  \n  127  \t// Destroys a result handle and frees all associated memory.\n  ...\n  263  \n  264  \t// Deprecated. This method is not supported.\n  265: \tvirtual bool TradeItems( SteamInventoryResult_t *pResultHandle, CSteamID steamIDTradePartner,\n  266  \t\t\t\t\t\t\t STEAM_ARRAY_COUNT(nArrayGiveLength) const SteamItemInstanceID_t *pArrayGive, STEAM_ARRAY_COUNT(nArrayGiveLength) const uint32 *pArrayGiveQuantity, uint32 nArrayGiveLength,\n  267  \t\t\t\t\t\t\t STEAM_ARRAY_COUNT(nArrayGetLength) const SteamItemInstanceID_t *pArrayGet, STEAM_ARRAY_COUNT(nArrayGetLength) const uint32 *pArrayGetQuantity, uint32 nArrayGetLength ) = 0;\n  ...\n  310  \t// An example usage of this is an item that becomes available every week.\n  311  \tSTEAM_CALL_RESULT( SteamInventoryEligiblePromoItemDefIDs_t )\n  312: \tvirtual SteamAPICall_t RequestEligiblePromoItemDefinitionsIDs( CSteamID steamID ) = 0;\n  313  \n  314  \t// After handling a SteamInventoryEligiblePromoItemDefIDs_t call result, use this\n  ...\n  316  \t// manually granted via the AddPromoItems() call.\n  317  \tvirtual bool GetEligiblePromoItemDefinitionIDs(\n  318: \t\tCSteamID steamID,\n  319  \t\tSTEAM_OUT_ARRAY_COUNT(punItemDefIDsArraySize,List of item definition IDs) SteamItemDef_t *pItemDefIDs,\n  320  \t\tSTEAM_DESC(Size of array is passed in and actual size used is returned in this param) uint32 *punItemDefIDsArraySize ) = 0;\n  ...\n  420  \tenum { k_iCallback = k_iClientInventoryCallbacks + 3 };\n  421  \tEResult m_result;\n  422: \tCSteamID m_steamID;\n  423  \tint m_numEligiblePromoItemDefs;\n  424  \tbool m_bCachedData;\t// indicates that the data was retrieved from the cache and not the server\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\public\\steam\\isteammatchmaking.h:\n  121  \tvirtual void AddRequestLobbyListResultCountFilter( int cMaxResults ) = 0;\n  122  \n  123: \tvirtual void AddRequestLobbyListCompatibleMembersFilter( CSteamID steamIDLobby ) = 0;\n  124  \n  125: \t// returns the CSteamID of a lobby, as retrieved by a RequestLobbyList call\n  126  \t// should only be called after a LobbyMatchList_t callback is received\n  127  \t// iLobby is of the range [0, LobbyMatchList_t::m_nLobbiesMatching)\n  128: \t// the returned CSteamID::IsValid() will be false if iLobby is out of range\n  129: \tvirtual CSteamID GetLobbyByIndex( int iLobby ) = 0;\n  130  \n  131  \t// Create a lobby on the Steam servers.\n  132: \t// If private, then the lobby will not be returned by any RequestLobbyList() call; the CSteamID\n  133  \t// of the lobby will need to be communicated via game channels or via InviteUserToLobby()\n  134  \t// this is an asynchronous request\n  ...\n  143  \t// lobby metadata is available to use immediately on this call completing\n  144  \tSTEAM_CALL_RESULT( LobbyEnter_t )\n  145: \tvirtual SteamAPICall_t JoinLobby( CSteamID steamIDLobby ) = 0;\n  146  \n  147  \t// Leave a lobby; this will take effect immediately on the client side\n  148  \t// other users in the lobby will be notified by a LobbyChatUpdate_t callback\n  149: \tvirtual void LeaveLobby( CSteamID steamIDLobby ) = 0;\n  150  \n  151  \t// Invite another user to the lobby\n  ...\n  155  \t// if the other user clicks the join link, a GameLobbyJoinRequested_t will be posted if the user is in-game,\n  156  \t// or if the game isn't running yet the game will be launched with the parameter +connect_lobby <64-bit lobby id>\n  157: \tvirtual bool InviteUserToLobby( CSteamID steamIDLobby, CSteamID steamIDInvitee ) = 0;\n  158  \n  159  \t// Lobby iteration, for viewing details of users in a lobby\n  ...\n  163  \t\n  164  \t// returns the number of users in the specified lobby\n  165: \tvirtual int GetNumLobbyMembers( CSteamID steamIDLobby ) = 0;\n  166: \t// returns the CSteamID of a user in the lobby\n  167  \t// iMember is of range [0,GetNumLobbyMembers())\n  168: \t// note that the current user must be in a lobby to retrieve CSteamIDs of other users in that lobby\n  169: \tvirtual CSteamID GetLobbyMemberByIndex( CSteamID steamIDLobby, int iMember ) = 0;\n  170  \n  171  \t// Get data associated with this lobby\n  172  \t// takes a simple key, and returns the string associated with it\n  173  \t// \"\" will be returned if no value is set, or if steamIDLobby is invalid\n  174: \tvirtual const char *GetLobbyData( CSteamID steamIDLobby, const char *pchKey ) = 0;\n  175  \t// Sets a key/value pair in the lobby metadata\n  176  \t// each user in the lobby will be broadcast this new value, and any new users joining will receive any existing data\n  ...\n  178  \t// to reset a key, just set it to \"\"\n  179  \t// other users in the lobby will receive notification of the lobby data change via a LobbyDataUpdate_t callback\n  180: \tvirtual bool SetLobbyData( CSteamID steamIDLobby, const char *pchKey, const char *pchValue ) = 0;\n  181  \n  182  \t// returns the number of metadata keys set on the specified lobby\n  183: \tvirtual int GetLobbyDataCount( CSteamID steamIDLobby ) = 0;\n  184  \n  185  \t// returns a lobby metadata key/values pair by index, of range [0, GetLobbyDataCount())\n  186: \tvirtual bool GetLobbyDataByIndex( CSteamID steamIDLobby, int iLobbyData, char *pchKey, int cchKeyBufferSize, char *pchValue, int cchValueBufferSize ) = 0;\n  187  \n  188  \t// removes a metadata key from the lobby\n  189: \tvirtual bool DeleteLobbyData( CSteamID steamIDLobby, const char *pchKey ) = 0;\n  190  \n  191  \t// Gets per-user metadata for someone in this lobby\n  192: \tvirtual const char *GetLobbyMemberData( CSteamID steamIDLobby, CSteamID steamIDUser, const char *pchKey ) = 0;\n  193  \t// Sets per-user metadata (for the local user implicitly)\n  194: \tvirtual void SetLobbyMemberData( CSteamID steamIDLobby, const char *pchKey, const char *pchValue ) = 0;\n  195  \t\n  196  \t// Broadcasts a chat message to the all the users in the lobby\n  ...\n  199  \t// pvMsgBody can be binary or text data, up to 4k\n  200  \t// if pvMsgBody is text, cubMsgBody should be strlen( text ) + 1, to include the null terminator\n  201: \tvirtual bool SendLobbyChatMsg( CSteamID steamIDLobby, const void *pvMsgBody, int cubMsgBody ) = 0;\n  202  \t// Get a chat message as specified in a LobbyChatMsg_t callback\n  203  \t// iChatID is the LobbyChatMsg_t::m_iChatID value in the callback\n  204: \t// *pSteamIDUser is filled in with the CSteamID of the member\n  205  \t// *pvData is filled in with the message itself\n  206  \t// return value is the number of bytes written into the buffer\n  207: \tvirtual int GetLobbyChatEntry( CSteamID steamIDLobby, int iChatID, STEAM_OUT_STRUCT() CSteamID *pSteamIDUser, void *pvData, int cubData, EChatEntryType *peChatEntryType ) = 0;\n  208  \n  209  \t// Refreshes metadata for a lobby you're not necessarily in right now\n  ...\n  214  \t// results will be returned by a LobbyDataUpdate_t callback\n  215  \t// if the specified lobby doesn't exist, LobbyDataUpdate_t::m_bSuccess will be set to false\n  216: \tvirtual bool RequestLobbyData( CSteamID steamIDLobby ) = 0;\n  217  \t\n  218  \t// sets the game server associated with the lobby\n  219  \t// usually at this point, the users will join the specified game server\n  220  \t// either the IP/Port or the steamID of the game server has to be valid, depending on how you want the clients to be able to connect\n  221: \tvirtual void SetLobbyGameServer( CSteamID steamIDLobby, uint32 unGameServerIP, uint16 unGameServerPort, CSteamID steamIDGameServer ) = 0;\n  222  \t// returns the details of a game server set in a lobby - returns false if there is no game server set, or that lobby doesn't exist\n  223: \tvirtual bool GetLobbyGameServer( CSteamID steamIDLobby, uint32 *punGameServerIP, uint16 *punGameServerPort, STEAM_OUT_STRUCT() CSteamID *psteamIDGameServer ) = 0;\n  224  \n  225  \t// set the limit on the # of users who can join the lobby\n  226: \tvirtual bool SetLobbyMemberLimit( CSteamID steamIDLobby, int cMaxMembers ) = 0;\n  227  \t// returns the current limit on the # of users who can join the lobby; returns 0 if no limit is defined\n  228: \tvirtual int GetLobbyMemberLimit( CSteamID steamIDLobby ) = 0;\n  229  \n  230  \t// updates which type of lobby it is\n  231  \t// only lobbies that are k_ELobbyTypePublic or k_ELobbyTypeInvisible, and are set to joinable, will be returned by RequestLobbyList() calls\n  232: \tvirtual bool SetLobbyType( CSteamID steamIDLobby, ELobbyType eLobbyType ) = 0;\n  233  \n  234  \t// sets whether or not a lobby is joinable - defaults to true for a new lobby\n  235  \t// if set to false, no user can join, even if they are a friend or have been invited\n  236: \tvirtual bool SetLobbyJoinable( CSteamID steamIDLobby, bool bLobbyJoinable ) = 0;\n  237  \n  238  \t// returns the current lobby owner\n  ...\n  240  \t// there always one lobby owner - if the current owner leaves, another user will become the owner\n  241  \t// it is possible (bur rare) to join a lobby just as the owner is leaving, thus entering a lobby with self as the owner\n  242: \tvirtual CSteamID GetLobbyOwner( CSteamID steamIDLobby ) = 0;\n  243  \n  244  \t// changes who the lobby owner is\n  245  \t// you must be the lobby owner for this to succeed, and steamIDNewOwner must be in the lobby\n  246  \t// after completion, the local user will no longer be the owner\n  247: \tvirtual bool SetLobbyOwner( CSteamID steamIDLobby, CSteamID steamIDNewOwner ) = 0;\n  248  \n  249  \t// link two lobbies for the purposes of checking player compatibility\n  250  \t// you must be the lobby owner of both lobbies\n  251: \tvirtual bool SetLinkedLobby( CSteamID steamIDLobby, CSteamID steamIDLobbyDependent ) = 0;\n  252  \n  253  #ifdef _PS3\n  ...\n  570  \t// if not the owner of the lobby or search already in progress this call fails\n  571  \t// periodic callbacks will be sent as queue time estimates change\n  572: \tvirtual EGameSearchErrorCode_t SearchForGameWithLobby( CSteamID steamIDLobby, int nPlayerMin, int nPlayerMax ) = 0;\n  573  \n  574  \t// user enter the queue and await a SearchForGameNotificationCallback_t callback. fails if another search is currently in progress\n  ...\n  582  \n  583  \t// after receiving GameStartedByHostCallback_t get connection details to server\n  584: \tvirtual EGameSearchErrorCode_t RetrieveConnectionDetails( CSteamID steamIDHost, char *pchConnectionDetails, int cubConnectionDetails ) = 0;\n  585  \n  586  \t// leaves queue if still waiting\n  ...\n  613  \n  614  \t// submit a result for one player. does not end the game. ullUniqueGameID continues to describe this game\n  615: \tvirtual EGameSearchErrorCode_t SubmitPlayerResult( uint64 ullUniqueGameID, CSteamID steamIDPlayer, EPlayerResult_t EPlayerResult ) = 0;\n  616  \n  617  \t// ends the game. no further SubmitPlayerResults for ullUniqueGameID will be accepted\n  ...\n  674  \tvirtual uint32 GetNumActiveBeacons() = 0;\n  675  \tvirtual PartyBeaconID_t GetBeaconByIndex( uint32 unIndex ) = 0;\n  676: \tvirtual bool GetBeaconDetails( PartyBeaconID_t ulBeaconID, CSteamID *pSteamIDBeaconOwner, STEAM_OUT_STRUCT() SteamPartyBeaconLocation_t *pLocation, STEAM_OUT_STRING_COUNT(cchMetadata) char *pchMetadata, int cchMetadata ) = 0;\n  677  \n  678  \t// Join an open party. Steam will reserve one beacon slot for your SteamID,\n  ...\n  698  \t// has successfully joined your party.\n  699  \t// Steam will manage the remaining open slots automatically.\n  700: \tvirtual void OnReservationCompleted( PartyBeaconID_t ulBeacon, CSteamID steamIDUser ) = 0;\n  701  \n  702  \t// To cancel a reservation (due to timeout or user input), call this.\n  703  \t// Steam will open a new reservation slot.\n  704  \t// Note: The user may already be in-flight to your game, so it's possible they will still connect and try to join your party.\n  705: \tvirtual void CancelReservation( PartyBeaconID_t ulBeacon, CSteamID steamIDUser ) = 0;\n  706  \n  707  \t// Change the number of open beacon reservation slots.\n  ...\n  900  \n  901  \tbool m_bGameBootInviteExists;\n  902: \tCSteamID m_steamIDLobby;\t\t// Should be valid if m_bGameBootInviteExists == true\n  903  };\n  904  \n  ...\n  929  \n  930  \tEResult m_eResult; // if search has started this result will be k_EResultOK, any other value indicates search has failed to start or has terminated\n  931: \tCSteamID m_lobbyID; // lobby ID if lobby search, invalid steamID otherwise\n  932: \tCSteamID m_steamIDEndedSearch; // if search was terminated, steamID that terminated search\n  933  \n  934  \tint32\tm_nSecondsRemainingEstimate;\n  ...\n  949  \tint32 m_nCountAcceptedGame;\n  950  \t// if m_steamIDHost is valid the host has started the game\n  951: \tCSteamID m_steamIDHost;\n  952  \tbool m_bFinalCallback;\n  953  };\n  ...\n  977  \tuint64  m_ullSearchID;\n  978  \n  979: \tCSteamID m_SteamIDPlayerFound; // player steamID\n  980: \tCSteamID m_SteamIDLobby;\t// if the player is in a lobby, the lobby ID\n  981  \tenum PlayerAcceptState_t\n  982  \t{\n  ...\n 1012  \tEResult m_eResult;\n 1013  \tuint64 ullUniqueGameID;\n 1014: \tCSteamID steamIDPlayer;\n 1015  };\n 1016  \n ....\n 1036  \tEResult m_eResult;\n 1037  \tPartyBeaconID_t m_ulBeaconID;\n 1038: \tCSteamID m_SteamIDBeaconOwner;\n 1039  \tchar m_rgchConnectString[256];\n 1040  };\n ....\n 1058  \n 1059  \tPartyBeaconID_t m_ulBeaconID;\n 1060: \tCSteamID m_steamIDJoiner;\n 1061  };\n 1062   \n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\public\\steam\\isteamnetworking.h:\n  155  \t// with the same channel number in order to retrieve the data on the other end\n  156  \t// using different channels to talk to the same user will still use the same underlying p2p connection, saving on resources\n  157: \tvirtual bool SendP2PPacket( CSteamID steamIDRemote, const void *pubData, uint32 cubData, EP2PSend eP2PSendType, int nChannel = 0 ) = 0;\n  158  \n  159  \t// returns true if any data is available for read, and the amount of data that will need to be read\n  ...\n  164  \t// if the buffer passed in is too small, the message will be truncated\n  165  \t// this call is not blocking, and will return false if no data is available\n  166: \tvirtual bool ReadP2PPacket( void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, CSteamID *psteamIDRemote, int nChannel = 0 ) = 0;\n  167  \n  168  \t// AcceptP2PSessionWithUser() should only be called in response to a P2PSessionRequest_t callback\n  ...\n  172  \t// this may be called multiple times for a single user\n  173  \t// (if you've called SendP2PPacket() on the other user, this implicitly accepts the session request)\n  174: \tvirtual bool AcceptP2PSessionWithUser( CSteamID steamIDRemote ) = 0;\n  175  \n  176  \t// call CloseP2PSessionWithUser() when you're done talking to a user, will free up resources under-the-hood\n  177  \t// if the remote user tries to send data to you again, another P2PSessionRequest_t callback will be posted\n  178: \tvirtual bool CloseP2PSessionWithUser( CSteamID steamIDRemote ) = 0;\n  179  \n  180  \t// call CloseP2PChannelWithUser() when you're done talking to a user on a specific channel. Once all channels\n  181  \t// open channels to a user have been closed, the open session to the user will be closed and new data from this\n  182  \t// user will trigger a P2PSessionRequest_t callback\n  183: \tvirtual bool CloseP2PChannelWithUser( CSteamID steamIDRemote, int nChannel ) = 0;\n  184  \n  185  \t// fills out P2PSessionState_t structure with details about the underlying connection to the user\n  186  \t// should only needed for debugging purposes\n  187  \t// returns false if no connection exists to the specified user\n  188: \tvirtual bool GetP2PSessionState( CSteamID steamIDRemote, P2PSessionState_t *pConnectionState ) = 0;\n  189  \n  190  \t// Allow P2P connections to fall back to being relayed through the Steam servers if a direct connection\n  ...\n  234  \t// on success will trigger a SocketStatusCallback_t callback\n  235  \t// on failure or timeout will trigger a SocketStatusCallback_t callback with a failure code in m_eSNetSocketState\n  236: \tvirtual SNetSocket_t CreateP2PConnectionSocket( CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay ) = 0;\n  237  \tvirtual SNetSocket_t CreateConnectionSocket( SteamIPAddress_t nIP, uint16 nPort, int nTimeoutSec ) = 0;\n  238  \n  ...\n  277  \n  278  \t// returns information about the specified socket, filling out the contents of the pointers\n  279: \tvirtual bool GetSocketInfo( SNetSocket_t hSocket, CSteamID *pSteamIDRemote, int *peSocketStatus, SteamIPAddress_t *punIPRemote, uint16 *punPortRemote ) = 0;\n  280  \n  281  \t// returns which local port the listen socket is bound to\n  ...\n  313  { \n  314  \tenum { k_iCallback = k_iSteamNetworkingCallbacks + 2 };\n  315: \tCSteamID m_steamIDRemote;\t\t\t// user who wants to talk to us\n  316  };\n  317  \n  ...\n  323  { \n  324  \tenum { k_iCallback = k_iSteamNetworkingCallbacks + 3 };\n  325: \tCSteamID m_steamIDRemote;\t\t\t// user we were sending packets to\n  326  \tuint8 m_eP2PSessionError;\t\t\t// EP2PSessionError indicating why we're having trouble\n  327  };\n  ...\n  335  \tSNetSocket_t m_hSocket;\t\t\t\t// the socket used to send/receive data to the remote host\n  336  \tSNetListenSocket_t m_hListenSocket;\t// this is the server socket that we were listening on; NULL if this was an outgoing connection\n  337: \tCSteamID m_steamIDRemote;\t\t\t// remote steamID we have connected to, if it has one\n  338  \tint m_eSNetSocketState;\t\t\t\t// socket state, ESNetSocketState\n  339  };\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\public\\steam\\isteamremoteplay.h:\n   39  \n   40  \t// Get the SteamID of the connected user\n   41: \tvirtual CSteamID GetSessionSteamID( RemotePlaySessionID_t unSessionID ) = 0;\n   42  \n   43  \t// Get the name of the session client device\n   ..\n   54  \t// Invite a friend to Remote Play Together\n   55  \t// This returns false if the invite can't be sent\n   56: \tvirtual bool BSendRemotePlayTogetherInvite( CSteamID steamIDFriend ) = 0;\n   57  };\n   58  \n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\public\\steam\\isteamremotestorage.h:\n  225  \n  226  \t\t// Gets metadata for a file after it has been downloaded. This is the same metadata given in the RemoteStorageDownloadUGCResult_t call result\n  227: \t\tvirtual bool\tGetUGCDetails( UGCHandle_t hContent, AppId_t *pnAppID, STEAM_OUT_STRING() char **ppchName, int32 *pnFileSizeInBytes, STEAM_OUT_STRUCT() CSteamID *pSteamIDOwner ) = 0;\n  228  \n  229  \t\t// After download, gets the content of the file.  \n  ...\n  293  \t\tvirtual SteamAPICall_t\tGetUserPublishedItemVoteDetails( PublishedFileId_t unPublishedFileId ) = 0;\n  294  \t\tSTEAM_CALL_RESULT( RemoteStorageEnumerateUserPublishedFilesResult_t )\n  295: \t\tvirtual SteamAPICall_t\tEnumerateUserSharedWorkshopFiles( CSteamID steamId, uint32 unStartIndex, SteamParamStringArray_t *pRequiredTags, SteamParamStringArray_t *pExcludedTags ) = 0;\n  296  \t\tSTEAM_CALL_RESULT( RemoteStoragePublishFileProgress_t )\n  297  \t\tvirtual SteamAPICall_t\tPublishVideo( EWorkshopVideoProvider eVideoProvider, const char *pchVideoAccount, const char *pchVideoIdentifier, const char *pchPreviewFile, AppId_t nConsumerAppId, const char *pchTitle, const char *pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t *pTags ) = 0;\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\public\\steam\\isteamscreenshots.h:\n   64  \t\n   65  \t// Tags a user as being visible in the screenshot\n   66: \tvirtual bool TagUser( ScreenshotHandle hScreenshot, CSteamID steamID ) = 0;\n   67  \n   68  \t// Tags a published file as being visible in the screenshot\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\public\\steam\\isteamuser.h:\n   29  \tvirtual bool BLoggedOn() = 0;\n   30  \n   31: \t// returns the CSteamID of the account currently logged into the Steam client\n   32: \t// a CSteamID is a unique identifier for an account, and used to differentiate users in all parts of the Steamworks API\n   33: \tvirtual CSteamID GetSteamID() = 0;\n   34  \n   35  \t// Multiplayer Authentication functions\n   ..\n   41  \t// void *pAuthBlob - a pointer to empty memory that will be filled in with the authentication token.\n   42  \t// int cbMaxAuthBlob - the number of bytes of allocated memory in pBlob. Should be at least 2048 bytes.\n   43: \t// CSteamID steamIDGameServer - the steamID of the game server, received from the game server by the client\n   44  \t// CGameID gameID - the ID of the current game. For games without mods, this is just CGameID( <appID> )\n   45  \t// uint32 unIPServer, uint16 usPortServer - the IP address of the game server\n   ..\n   48  \t// return value - returns the number of bytes written to pBlob. If the return is 0, then the buffer passed in was too small, and the call has failed\n   49  \t// The contents of pBlob should then be sent to the game server, for it to use to complete the authentication process.\n   50: \tvirtual int InitiateGameConnection( void *pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint32 unIPServer, uint16 usPortServer, bool bSecure ) = 0;\n   51  \n   52  \t// notify of disconnect\n   ..\n  123  \t// Authenticate ticket from entity steamID to be sure it is valid and isnt reused\n  124  \t// Registers for callbacks if the entity goes offline or cancels the ticket ( see ValidateAuthTicketResponse_t callback and EAuthSessionResponse )\n  125: \tvirtual EBeginAuthSessionResult BeginAuthSession( const void *pAuthTicket, int cbAuthTicket, CSteamID steamID ) = 0;\n  126  \n  127  \t// Stop tracking started by BeginAuthSession - called when no longer playing game with this entity\n  128: \tvirtual void EndAuthSession( CSteamID steamID ) = 0;\n  129  \n  130  \t// Cancel auth ticket from GetAuthSessionTicket, called when no longer playing game with the entity you gave the ticket to\n  ...\n  133  \t// After receiving a user's authentication data, and passing it to BeginAuthSession, use this function\n  134  \t// to determine if the user owns downloadable content specified by the provided AppID.\n  135: \tvirtual EUserHasLicenseForAppResult UserHasLicenseForApp( CSteamID steamID, AppId_t appID ) = 0;\n  136  \t\n  137  \t// returns true if this users looks like they are behind a NAT device. Only valid once the user has connected to steam \n  ...\n  140  \n  141  \t// set data to be replicated to friends so that they can join your game\n  142: \t// CSteamID steamIDGameServer - the steamID of the game server, received from the game server by the client\n  143  \t// uint32 unIPServer, uint16 usPortServer - the IP address of the game server\n  144: \tvirtual void AdvertiseGame( CSteamID steamIDGameServer, uint32 unIPServer, uint16 usPortServer ) = 0;\n  145  \n  146  \t// Requests a ticket encrypted with an app specific shared key\n  ...\n  306  {\n  307  \tenum { k_iCallback = k_iSteamUserCallbacks + 43 };\n  308: \tCSteamID m_SteamID;\n  309  \tEAuthSessionResponse m_eAuthSessionResponse;\n  310: \tCSteamID m_OwnerSteamID; // different from m_SteamID if borrowed\n  311  };\n  312  \n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\public\\steam\\isteamuserstats.h:\n   73  struct LeaderboardEntry_t\n   74  {\n   75: \tCSteamID m_steamIDUser; // user with the entry - use SteamFriends()->GetFriendPersonaName() & SteamFriends()->GetFriendAvatar() to get more info\n   76  \tint32 m_nGlobalRank;\t// [1..N], where N is the number of users with an entry in the leaderboard\n   77  \tint32 m_nScore;\t\t\t// score as set in the leaderboard\n   ..\n  158  \t// these stats won't be auto-updated; you'll need to call RequestUserStats() again to refresh any data\n  159  \tSTEAM_CALL_RESULT( UserStatsReceived_t )\n  160: \tvirtual SteamAPICall_t RequestUserStats( CSteamID steamIDUser ) = 0;\n  161  \n  162  \t// requests stat information for a user, usable after a successful call to RequestUserStats()\n  163  \tSTEAM_FLAT_NAME( GetUserStatInt32 )\n  164: \tvirtual bool GetUserStat( CSteamID steamIDUser, const char *pchName, int32 *pData ) = 0;\n  165  \n  166  \tSTEAM_FLAT_NAME( GetUserStatFloat )\n  167: \tvirtual bool GetUserStat( CSteamID steamIDUser, const char *pchName, float *pData ) = 0;\n  168  \n  169: \tvirtual bool GetUserAchievement( CSteamID steamIDUser, const char *pchName, bool *pbAchieved ) = 0;\n  170  \t// See notes for GetAchievementAndUnlockTime above\n  171: \tvirtual bool GetUserAchievementAndUnlockTime( CSteamID steamIDUser, const char *pchName, bool *pbAchieved, uint32 *punUnlockTime ) = 0;\n  172  \n  173  \t// Reset stats \n  ...\n  214  \t\tSTEAM_CALL_RESULT( LeaderboardScoresDownloaded_t )\n  215  \tvirtual SteamAPICall_t DownloadLeaderboardEntriesForUsers( SteamLeaderboard_t hSteamLeaderboard,\n  216: \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   STEAM_ARRAY_COUNT_D(cUsers, Array of users to retrieve) CSteamID *prgUsers, int cUsers ) = 0;\n  217  \n  218  \t// Returns data about a single leaderboard entry\n  ...\n  329  \tuint64\t\tm_nGameID;\t\t// Game these stats are for\n  330  \tEResult\t\tm_eResult;\t\t// Success / error fetching the stats\n  331: \tCSteamID\tm_steamIDUser;\t// The user for whom the stats are retrieved for\n  332  };\n  333  \n  ...\n  417  {\n  418  \tenum { k_iCallback = k_iSteamUserStatsCallbacks + 8 };\n  419: \tCSteamID\tm_steamIDUser;\t// User whose stats have been unloaded\n  420  };\n  421  \n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\public\\steam\\isteamutils.h:\n  199  \t//   nByteSizeOutFilteredText is the size (in bytes) of pchOutFilteredText, should be at least strlen(pchInputText)+1\n  200  \t// Returns the number of characters (not bytes) filtered\n  201: \tvirtual int FilterText( ETextFilteringContext eContext, CSteamID sourceSteamID, const char *pchInputMessage, char *pchOutFilteredText, uint32 nByteSizeOutFilteredText ) = 0;\n  202  \n  203  \t// Return what we believe your current ipv6 connectivity to \"the internet\" is on the specified protocol.\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\public\\steam\\matchmakingtypes.h:\n  221  \n  222  \t/// steamID of the game server - invalid if it's doesn't have one (old server, or not connected to Steam)\n  223: \tCSteamID m_steamID;\n  224  };\n  225  \n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\public\\steam\\steam_api.json:\n   57        \"callback_id\": 143,\n   58        \"fields\": [\n   59:         { \"fieldname\":\"m_SteamID\", \"fieldtype\":\"CSteamID\" },\n   60          { \"fieldname\":\"m_eAuthSessionResponse\", \"fieldtype\":\"EAuthSessionResponse\" },\n   61:         { \"fieldname\":\"m_OwnerSteamID\", \"fieldtype\":\"CSteamID\" }\n   62        ],\n   63        \"struct\": \"ValidateAuthTicketResponse_t\"\n   ..\n  152        \"callback_id\": 333,\n  153        \"fields\": [\n  154:         { \"fieldname\":\"m_steamIDLobby\", \"fieldtype\":\"CSteamID\" },\n  155:         { \"fieldname\":\"m_steamIDFriend\", \"fieldtype\":\"CSteamID\" }\n  156        ],\n  157        \"struct\": \"GameLobbyJoinRequested_t\"\n  ...\n  160        \"callback_id\": 334,\n  161        \"fields\": [\n  162:         { \"fieldname\":\"m_steamID\", \"fieldtype\":\"CSteamID\" },\n  163          { \"fieldname\":\"m_iImage\", \"fieldtype\":\"int\" },\n  164          { \"fieldname\":\"m_iWide\", \"fieldtype\":\"int\" },\n  ...\n  170        \"callback_id\": 335,\n  171        \"fields\": [\n  172:         { \"fieldname\":\"m_steamIDClan\", \"fieldtype\":\"CSteamID\" },\n  173          { \"fieldname\":\"m_cOfficers\", \"fieldtype\":\"int\" },\n  174          { \"fieldname\":\"m_bSuccess\", \"fieldtype\":\"uint8\" }\n  ...\n  179        \"callback_id\": 336,\n  180        \"fields\": [\n  181:         { \"fieldname\":\"m_steamIDFriend\", \"fieldtype\":\"CSteamID\" },\n  182          { \"fieldname\":\"m_nAppID\", \"fieldtype\":\"AppId_t\" }\n  183        ],\n  ...\n  187        \"callback_id\": 337,\n  188        \"fields\": [\n  189:         { \"fieldname\":\"m_steamIDFriend\", \"fieldtype\":\"CSteamID\" },\n  190          { \"fieldname\":\"m_rgchConnect\", \"fieldtype\":\"char [256]\" }\n  191        ],\n  ...\n  195        \"callback_id\": 338,\n  196        \"fields\": [\n  197:         { \"fieldname\":\"m_steamIDClanChat\", \"fieldtype\":\"CSteamID\" },\n  198:         { \"fieldname\":\"m_steamIDUser\", \"fieldtype\":\"CSteamID\" },\n  199          { \"fieldname\":\"m_iMessageID\", \"fieldtype\":\"int\" }\n  200        ],\n  ...\n  204        \"callback_id\": 339,\n  205        \"fields\": [\n  206:         { \"fieldname\":\"m_steamIDClanChat\", \"fieldtype\":\"CSteamID\" },\n  207:         { \"fieldname\":\"m_steamIDUser\", \"fieldtype\":\"CSteamID\" }\n  208        ],\n  209        \"struct\": \"GameConnectedChatJoin_t\"\n  ...\n  212        \"callback_id\": 340,\n  213        \"fields\": [\n  214:         { \"fieldname\":\"m_steamIDClanChat\", \"fieldtype\":\"CSteamID\" },\n  215:         { \"fieldname\":\"m_steamIDUser\", \"fieldtype\":\"CSteamID\" },\n  216          { \"fieldname\":\"m_bKicked\", \"fieldtype\":\"bool\" },\n  217          { \"fieldname\":\"m_bDropped\", \"fieldtype\":\"bool\" }\n  ...\n  229        \"callback_id\": 342,\n  230        \"fields\": [\n  231:         { \"fieldname\":\"m_steamIDClanChat\", \"fieldtype\":\"CSteamID\" },\n  232          { \"fieldname\":\"m_eChatRoomEnterResponse\", \"fieldtype\":\"EChatRoomEnterResponse\" }\n  233        ],\n  ...\n  237        \"callback_id\": 343,\n  238        \"fields\": [\n  239:         { \"fieldname\":\"m_steamIDUser\", \"fieldtype\":\"CSteamID\" },\n  240          { \"fieldname\":\"m_iMessageID\", \"fieldtype\":\"int\" }\n  241        ],\n  ...\n  246        \"fields\": [\n  247          { \"fieldname\":\"m_eResult\", \"fieldtype\":\"EResult\" },\n  248:         { \"fieldname\":\"m_steamID\", \"fieldtype\":\"CSteamID\" },\n  249          { \"fieldname\":\"m_nCount\", \"fieldtype\":\"int\" }\n  250        ],\n  ...\n  255        \"fields\": [\n  256          { \"fieldname\":\"m_eResult\", \"fieldtype\":\"EResult\" },\n  257:         { \"fieldname\":\"m_steamID\", \"fieldtype\":\"CSteamID\" },\n  258          { \"fieldname\":\"m_bIsFollowing\", \"fieldtype\":\"bool\" }\n  259        ],\n  ...\n  264        \"fields\": [\n  265          { \"fieldname\":\"m_eResult\", \"fieldtype\":\"EResult\" },\n  266:         { \"fieldname\":\"m_rgSteamID\", \"fieldtype\":\"CSteamID [50]\" },\n  267          { \"fieldname\":\"m_nResultsReturned\", \"fieldtype\":\"int32\" },\n  268          { \"fieldname\":\"m_nTotalResultCount\", \"fieldtype\":\"int32\" }\n  ...\n  431        \"fields\": [\n  432          { \"fieldname\":\"m_bGameBootInviteExists\", \"fieldtype\":\"bool\" },\n  433:         { \"fieldname\":\"m_steamIDLobby\", \"fieldtype\":\"CSteamID\" }\n  434        ],\n  435        \"struct\": \"PSNGameBootInviteResult_t\"\n  ...\n  447          { \"fieldname\":\"m_ullSearchID\", \"fieldtype\":\"uint64\" },\n  448          { \"fieldname\":\"m_eResult\", \"fieldtype\":\"EResult\" },\n  449:         { \"fieldname\":\"m_lobbyID\", \"fieldtype\":\"CSteamID\" },\n  450:         { \"fieldname\":\"m_steamIDEndedSearch\", \"fieldtype\":\"CSteamID\" },\n  451          { \"fieldname\":\"m_nSecondsRemainingEstimate\", \"fieldtype\":\"int32\" },\n  452          { \"fieldname\":\"m_cPlayersSearching\", \"fieldtype\":\"int32\" }\n  ...\n  461          { \"fieldname\":\"m_nCountPlayersInGame\", \"fieldtype\":\"int32\" },\n  462          { \"fieldname\":\"m_nCountAcceptedGame\", \"fieldtype\":\"int32\" },\n  463:         { \"fieldname\":\"m_steamIDHost\", \"fieldtype\":\"CSteamID\" },\n  464          { \"fieldname\":\"m_bFinalCallback\", \"fieldtype\":\"bool\" }\n  465        ],\n  ...\n  490          { \"fieldname\":\"m_eResult\", \"fieldtype\":\"EResult\" },\n  491          { \"fieldname\":\"m_ullSearchID\", \"fieldtype\":\"uint64\" },\n  492:         { \"fieldname\":\"m_SteamIDPlayerFound\", \"fieldtype\":\"CSteamID\" },\n  493:         { \"fieldname\":\"m_SteamIDLobby\", \"fieldtype\":\"CSteamID\" },\n  494          { \"fieldname\":\"m_ePlayerAcceptState\", \"fieldtype\":\"RequestPlayersForGameResultCallback_t::PlayerAcceptState_t\" },\n  495          { \"fieldname\":\"m_nPlayerIndex\", \"fieldtype\":\"int32\" },\n  ...\n  515          { \"fieldname\":\"m_eResult\", \"fieldtype\":\"EResult\" },\n  516          { \"fieldname\":\"ullUniqueGameID\", \"fieldtype\":\"uint64\" },\n  517:         { \"fieldname\":\"steamIDPlayer\", \"fieldtype\":\"CSteamID\" }\n  518        ],\n  519        \"struct\": \"SubmitPlayerResultResultCallback_t\"\n  ...\n  532          { \"fieldname\":\"m_eResult\", \"fieldtype\":\"EResult\" },\n  533          { \"fieldname\":\"m_ulBeaconID\", \"fieldtype\":\"PartyBeaconID_t\" },\n  534:         { \"fieldname\":\"m_SteamIDBeaconOwner\", \"fieldtype\":\"CSteamID\" },\n  535          { \"fieldname\":\"m_rgchConnectString\", \"fieldtype\":\"char [256]\" }\n  536        ],\n  ...\n  549        \"fields\": [\n  550          { \"fieldname\":\"m_ulBeaconID\", \"fieldtype\":\"PartyBeaconID_t\" },\n  551:         { \"fieldname\":\"m_steamIDJoiner\", \"fieldtype\":\"CSteamID\" }\n  552        ],\n  553        \"struct\": \"ReservationNotificationCallback_t\"\n  ...\n  854          { \"fieldname\":\"m_nGameID\", \"fieldtype\":\"uint64\" },\n  855          { \"fieldname\":\"m_eResult\", \"fieldtype\":\"EResult\" },\n  856:         { \"fieldname\":\"m_steamIDUser\", \"fieldtype\":\"CSteamID\" }\n  857        ],\n  858        \"struct\": \"UserStatsReceived_t\"\n  ...\n  917        \"callback_id\": 1108,\n  918        \"fields\": [\n  919:         { \"fieldname\":\"m_steamIDUser\", \"fieldtype\":\"CSteamID\" }\n  920        ],\n  921        \"struct\": \"UserStatsUnloaded_t\"\n  ...\n 1017        \"callback_id\": 1202,\n 1018        \"fields\": [\n 1019:         { \"fieldname\":\"m_steamIDRemote\", \"fieldtype\":\"CSteamID\" }\n 1020        ],\n 1021        \"struct\": \"P2PSessionRequest_t\"\n ....\n 1024        \"callback_id\": 1203,\n 1025        \"fields\": [\n 1026:         { \"fieldname\":\"m_steamIDRemote\", \"fieldtype\":\"CSteamID\" },\n 1027          { \"fieldname\":\"m_eP2PSessionError\", \"fieldtype\":\"uint8\" }\n 1028        ],\n ....\n 1034          { \"fieldname\":\"m_hSocket\", \"fieldtype\":\"SNetSocket_t\" },\n 1035          { \"fieldname\":\"m_hListenSocket\", \"fieldtype\":\"SNetListenSocket_t\" },\n 1036:         { \"fieldname\":\"m_steamIDRemote\", \"fieldtype\":\"CSteamID\" },\n 1037          { \"fieldname\":\"m_eSNetSocketState\", \"fieldtype\":\"int\" }\n 1038        ],\n ....\n 1585        \"fields\": [\n 1586          { \"fieldname\":\"m_result\", \"fieldtype\":\"EResult\" },\n 1587:         { \"fieldname\":\"m_steamID\", \"fieldtype\":\"CSteamID\" },\n 1588          { \"fieldname\":\"m_numEligiblePromoItemDefs\", \"fieldtype\":\"int\" },\n 1589          { \"fieldname\":\"m_bCachedData\", \"fieldtype\":\"bool\" }\n ....\n 1689        \"callback_id\": 201,\n 1690        \"fields\": [\n 1691:         { \"fieldname\":\"m_SteamID\", \"fieldtype\":\"CSteamID\" },\n 1692:         { \"fieldname\":\"m_OwnerSteamID\", \"fieldtype\":\"CSteamID\" }\n 1693        ],\n 1694        \"struct\": \"GSClientApprove_t\"\n ....\n 1697        \"callback_id\": 202,\n 1698        \"fields\": [\n 1699:         { \"fieldname\":\"m_SteamID\", \"fieldtype\":\"CSteamID\" },\n 1700          { \"fieldname\":\"m_eDenyReason\", \"fieldtype\":\"EDenyReason\" },\n 1701          { \"fieldname\":\"m_rgchOptionalText\", \"fieldtype\":\"char [128]\" }\n ....\n 1706        \"callback_id\": 203,\n 1707        \"fields\": [\n 1708:         { \"fieldname\":\"m_SteamID\", \"fieldtype\":\"CSteamID\" },\n 1709          { \"fieldname\":\"m_eDenyReason\", \"fieldtype\":\"EDenyReason\" }\n 1710        ],\n ....\n 1740        \"callback_id\": 208,\n 1741        \"fields\": [\n 1742:         { \"fieldname\":\"m_SteamIDUser\", \"fieldtype\":\"CSteamID\" },\n 1743:         { \"fieldname\":\"m_SteamIDGroup\", \"fieldtype\":\"CSteamID\" },\n 1744          { \"fieldname\":\"m_bMember\", \"fieldtype\":\"bool\" },\n 1745          { \"fieldname\":\"m_bOfficer\", \"fieldtype\":\"bool\" }\n ....\n 1774          { \"fieldname\":\"m_cPlayersThatCandidateDoesntLike\", \"fieldtype\":\"int\" },\n 1775          { \"fieldname\":\"m_cClanPlayersThatDontLikeCandidate\", \"fieldtype\":\"int\" },\n 1776:         { \"fieldname\":\"m_SteamIDCandidate\", \"fieldtype\":\"CSteamID\" }\n 1777        ],\n 1778        \"struct\": \"ComputeNewPlayerCompatibilityResult_t\"\n ....\n 1782        \"fields\": [\n 1783          { \"fieldname\":\"m_eResult\", \"fieldtype\":\"EResult\" },\n 1784:         { \"fieldname\":\"m_steamIDUser\", \"fieldtype\":\"CSteamID\" }\n 1785        ],\n 1786        \"struct\": \"GSStatsReceived_t\"\n ....\n 1790        \"fields\": [\n 1791          { \"fieldname\":\"m_eResult\", \"fieldtype\":\"EResult\" },\n 1792:         { \"fieldname\":\"m_steamIDUser\", \"fieldtype\":\"CSteamID\" }\n 1793        ],\n 1794        \"struct\": \"GSStatsStored_t\"\n ....\n 1797        \"callback_id\": 1108,\n 1798        \"fields\": [\n 1799:         { \"fieldname\":\"m_steamIDUser\", \"fieldtype\":\"CSteamID\" }\n 1800        ],\n 1801        \"struct\": \"GSStatsUnloaded_t\"\n ....\n 4398            \"methodname_flat\": \"SteamAPI_ISteamUser_GetSteamID\",\n 4399            \"params\": [],\n 4400:           \"returntype\": \"CSteamID\",\n 4401            \"returntype_flat\": \"uint64_steamid\"\n 4402          },\n ....\n 4407              { \"paramname\":\"pAuthBlob\", \"paramtype\":\"void *\" },\n 4408              { \"paramname\":\"cbMaxAuthBlob\", \"paramtype\":\"int\" },\n 4409:             { \"paramname\":\"steamIDGameServer\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 4410              { \"paramname\":\"unIPServer\", \"paramtype\":\"uint32\" },\n 4411              { \"paramname\":\"usPortServer\", \"paramtype\":\"uint16\" },\n ....\n 4515              { \"paramname\":\"pAuthTicket\", \"paramtype\":\"const void *\" },\n 4516              { \"paramname\":\"cbAuthTicket\", \"paramtype\":\"int\" },\n 4517:             { \"paramname\":\"steamID\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 4518            ],\n 4519            \"returntype\": \"EBeginAuthSessionResult\"\n ....\n 4523            \"methodname_flat\": \"SteamAPI_ISteamUser_EndAuthSession\",\n 4524            \"params\": [\n 4525:             { \"paramname\":\"steamID\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 4526            ],\n 4527            \"returntype\": \"void\"\n ....\n 4539            \"methodname_flat\": \"SteamAPI_ISteamUser_UserHasLicenseForApp\",\n 4540            \"params\": [\n 4541:             { \"paramname\":\"steamID\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 4542              { \"paramname\":\"appID\", \"paramtype\":\"AppId_t\" }\n 4543            ],\n ....\n 4554            \"methodname_flat\": \"SteamAPI_ISteamUser_AdvertiseGame\",\n 4555            \"params\": [\n 4556:             { \"paramname\":\"steamIDGameServer\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 4557              { \"paramname\":\"unIPServer\", \"paramtype\":\"uint32\" },\n 4558              { \"paramname\":\"usPortServer\", \"paramtype\":\"uint16\" }\n ....\n 4700              { \"paramname\":\"iFriendFlags\", \"paramtype\":\"int\" }\n 4701            ],\n 4702:           \"returntype\": \"CSteamID\",\n 4703            \"returntype_flat\": \"uint64_steamid\"\n 4704          },\n ....\n 4707            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetFriendRelationship\",\n 4708            \"params\": [\n 4709:             { \"paramname\":\"steamIDFriend\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 4710            ],\n 4711            \"returntype\": \"EFriendRelationship\"\n ....\n 4715            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetFriendPersonaState\",\n 4716            \"params\": [\n 4717:             { \"paramname\":\"steamIDFriend\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 4718            ],\n 4719            \"returntype\": \"EPersonaState\"\n ....\n 4723            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetFriendPersonaName\",\n 4724            \"params\": [\n 4725:             { \"paramname\":\"steamIDFriend\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 4726            ],\n 4727            \"returntype\": \"const char *\"\n ....\n 4731            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetFriendGamePlayed\",\n 4732            \"params\": [\n 4733:             { \"paramname\":\"steamIDFriend\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 4734              {\n 4735                \"out_struct\": \"\",\n ....\n 4744            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetFriendPersonaNameHistory\",\n 4745            \"params\": [\n 4746:             { \"paramname\":\"steamIDFriend\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 4747              { \"paramname\":\"iPersonaName\", \"paramtype\":\"int\" }\n 4748            ],\n ....\n 4753            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetFriendSteamLevel\",\n 4754            \"params\": [\n 4755:             { \"paramname\":\"steamIDFriend\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 4756            ],\n 4757            \"returntype\": \"int\"\n ....\n 4761            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetPlayerNickname\",\n 4762            \"params\": [\n 4763:             { \"paramname\":\"steamIDPlayer\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 4764            ],\n 4765            \"returntype\": \"const char *\"\n ....\n 4803                \"out_array_call\": \"nMembersCount,GetFriendsGroupMembersCount,friendsGroupID\",\n 4804                \"paramname\": \"pOutSteamIDMembers\",\n 4805:               \"paramtype\": \"CSteamID *\"\n 4806              },\n 4807              { \"paramname\":\"nMembersCount\", \"paramtype\":\"int\" }\n ....\n 4813            \"methodname_flat\": \"SteamAPI_ISteamFriends_HasFriend\",\n 4814            \"params\": [\n 4815:             { \"paramname\":\"steamIDFriend\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 4816              { \"paramname\":\"iFriendFlags\", \"paramtype\":\"int\" }\n 4817            ],\n ....\n 4830              { \"paramname\":\"iClan\", \"paramtype\":\"int\" }\n 4831            ],\n 4832:           \"returntype\": \"CSteamID\",\n 4833            \"returntype_flat\": \"uint64_steamid\"\n 4834          },\n ....\n 4837            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetClanName\",\n 4838            \"params\": [\n 4839:             { \"paramname\":\"steamIDClan\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 4840            ],\n 4841            \"returntype\": \"const char *\"\n ....\n 4845            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetClanTag\",\n 4846            \"params\": [\n 4847:             { \"paramname\":\"steamIDClan\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 4848            ],\n 4849            \"returntype\": \"const char *\"\n ....\n 4853            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetClanActivityCounts\",\n 4854            \"params\": [\n 4855:             { \"paramname\":\"steamIDClan\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 4856              { \"paramname\":\"pnOnline\", \"paramtype\":\"int *\" },\n 4857              { \"paramname\":\"pnInGame\", \"paramtype\":\"int *\" },\n ....\n 4868                \"array_count\": \"cClansToRequest\",\n 4869                \"paramname\": \"psteamIDClans\",\n 4870:               \"paramtype\": \"CSteamID *\"\n 4871              },\n 4872              { \"paramname\":\"cClansToRequest\", \"paramtype\":\"int\" }\n ....\n 4878            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetFriendCountFromSource\",\n 4879            \"params\": [\n 4880:             { \"paramname\":\"steamIDSource\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 4881            ],\n 4882            \"returntype\": \"int\"\n ....\n 4886            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetFriendFromSourceByIndex\",\n 4887            \"params\": [\n 4888:             { \"paramname\":\"steamIDSource\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 4889              { \"paramname\":\"iFriend\", \"paramtype\":\"int\" }\n 4890            ],\n 4891:           \"returntype\": \"CSteamID\",\n 4892            \"returntype_flat\": \"uint64_steamid\"\n 4893          },\n ....\n 4896            \"methodname_flat\": \"SteamAPI_ISteamFriends_IsUserInSource\",\n 4897            \"params\": [\n 4898:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 4899:             { \"paramname\":\"steamIDSource\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 4900            ],\n 4901            \"returntype\": \"bool\"\n ....\n 4905            \"methodname_flat\": \"SteamAPI_ISteamFriends_SetInGameVoiceSpeaking\",\n 4906            \"params\": [\n 4907:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 4908              { \"paramname\":\"bSpeaking\", \"paramtype\":\"bool\" }\n 4909            ],\n ....\n 4923            \"params\": [\n 4924              { \"paramname\":\"pchDialog\", \"paramtype\":\"const char *\" },\n 4925:             { \"paramname\":\"steamID\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 4926            ],\n 4927            \"returntype\": \"void\"\n ....\n 4949            \"methodname_flat\": \"SteamAPI_ISteamFriends_SetPlayedWith\",\n 4950            \"params\": [\n 4951:             { \"paramname\":\"steamIDUserPlayedWith\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 4952            ],\n 4953            \"returntype\": \"void\"\n ....\n 4957            \"methodname_flat\": \"SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog\",\n 4958            \"params\": [\n 4959:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 4960            ],\n 4961            \"returntype\": \"void\"\n ....\n 4965            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetSmallFriendAvatar\",\n 4966            \"params\": [\n 4967:             { \"paramname\":\"steamIDFriend\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 4968            ],\n 4969            \"returntype\": \"int\"\n ....\n 4973            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetMediumFriendAvatar\",\n 4974            \"params\": [\n 4975:             { \"paramname\":\"steamIDFriend\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 4976            ],\n 4977            \"returntype\": \"int\"\n ....\n 4981            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetLargeFriendAvatar\",\n 4982            \"params\": [\n 4983:             { \"paramname\":\"steamIDFriend\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 4984            ],\n 4985            \"returntype\": \"int\"\n ....\n 4989            \"methodname_flat\": \"SteamAPI_ISteamFriends_RequestUserInformation\",\n 4990            \"params\": [\n 4991:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 4992              { \"paramname\":\"bRequireNameOnly\", \"paramtype\":\"bool\" }\n 4993            ],\n ....\n 4999            \"methodname_flat\": \"SteamAPI_ISteamFriends_RequestClanOfficerList\",\n 5000            \"params\": [\n 5001:             { \"paramname\":\"steamIDClan\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5002            ],\n 5003            \"returntype\": \"SteamAPICall_t\"\n ....\n 5007            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetClanOwner\",\n 5008            \"params\": [\n 5009:             { \"paramname\":\"steamIDClan\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5010            ],\n 5011:           \"returntype\": \"CSteamID\",\n 5012            \"returntype_flat\": \"uint64_steamid\"\n 5013          },\n ....\n 5016            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetClanOfficerCount\",\n 5017            \"params\": [\n 5018:             { \"paramname\":\"steamIDClan\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5019            ],\n 5020            \"returntype\": \"int\"\n ....\n 5024            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetClanOfficerByIndex\",\n 5025            \"params\": [\n 5026:             { \"paramname\":\"steamIDClan\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5027              { \"paramname\":\"iOfficer\", \"paramtype\":\"int\" }\n 5028            ],\n 5029:           \"returntype\": \"CSteamID\",\n 5030            \"returntype_flat\": \"uint64_steamid\"\n 5031          },\n ....\n 5055            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetFriendRichPresence\",\n 5056            \"params\": [\n 5057:             { \"paramname\":\"steamIDFriend\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5058              { \"paramname\":\"pchKey\", \"paramtype\":\"const char *\" }\n 5059            ],\n ....\n 5064            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount\",\n 5065            \"params\": [\n 5066:             { \"paramname\":\"steamIDFriend\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5067            ],\n 5068            \"returntype\": \"int\"\n ....\n 5072            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex\",\n 5073            \"params\": [\n 5074:             { \"paramname\":\"steamIDFriend\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5075              { \"paramname\":\"iKey\", \"paramtype\":\"int\" }\n 5076            ],\n ....\n 5081            \"methodname_flat\": \"SteamAPI_ISteamFriends_RequestFriendRichPresence\",\n 5082            \"params\": [\n 5083:             { \"paramname\":\"steamIDFriend\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5084            ],\n 5085            \"returntype\": \"void\"\n ....\n 5089            \"methodname_flat\": \"SteamAPI_ISteamFriends_InviteUserToGame\",\n 5090            \"params\": [\n 5091:             { \"paramname\":\"steamIDFriend\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5092              { \"paramname\":\"pchConnectString\", \"paramtype\":\"const char *\" }\n 5093            ],\n ....\n 5106              { \"paramname\":\"iCoplayFriend\", \"paramtype\":\"int\" }\n 5107            ],\n 5108:           \"returntype\": \"CSteamID\",\n 5109            \"returntype_flat\": \"uint64_steamid\"\n 5110          },\n ....\n 5113            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetFriendCoplayTime\",\n 5114            \"params\": [\n 5115:             { \"paramname\":\"steamIDFriend\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5116            ],\n 5117            \"returntype\": \"int\"\n ....\n 5121            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetFriendCoplayGame\",\n 5122            \"params\": [\n 5123:             { \"paramname\":\"steamIDFriend\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5124            ],\n 5125            \"returntype\": \"AppId_t\"\n ....\n 5130            \"methodname_flat\": \"SteamAPI_ISteamFriends_JoinClanChatRoom\",\n 5131            \"params\": [\n 5132:             { \"paramname\":\"steamIDClan\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5133            ],\n 5134            \"returntype\": \"SteamAPICall_t\"\n ....\n 5138            \"methodname_flat\": \"SteamAPI_ISteamFriends_LeaveClanChatRoom\",\n 5139            \"params\": [\n 5140:             { \"paramname\":\"steamIDClan\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5141            ],\n 5142            \"returntype\": \"bool\"\n ....\n 5146            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetClanChatMemberCount\",\n 5147            \"params\": [\n 5148:             { \"paramname\":\"steamIDClan\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5149            ],\n 5150            \"returntype\": \"int\"\n ....\n 5154            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetChatMemberByIndex\",\n 5155            \"params\": [\n 5156:             { \"paramname\":\"steamIDClan\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5157              { \"paramname\":\"iUser\", \"paramtype\":\"int\" }\n 5158            ],\n 5159:           \"returntype\": \"CSteamID\",\n 5160            \"returntype_flat\": \"uint64_steamid\"\n 5161          },\n ....\n 5164            \"methodname_flat\": \"SteamAPI_ISteamFriends_SendClanChatMessage\",\n 5165            \"params\": [\n 5166:             { \"paramname\":\"steamIDClanChat\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5167              { \"paramname\":\"pchText\", \"paramtype\":\"const char *\" }\n 5168            ],\n ....\n 5173            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetClanChatMessage\",\n 5174            \"params\": [\n 5175:             { \"paramname\":\"steamIDClanChat\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5176              { \"paramname\":\"iMessage\", \"paramtype\":\"int\" },\n 5177              { \"paramname\":\"prgchText\", \"paramtype\":\"void *\" },\n ....\n 5181                \"out_struct\": \"\",\n 5182                \"paramname\": \"psteamidChatter\",\n 5183:               \"paramtype\": \"CSteamID *\"\n 5184              }\n 5185            ],\n ....\n 5190            \"methodname_flat\": \"SteamAPI_ISteamFriends_IsClanChatAdmin\",\n 5191            \"params\": [\n 5192:             { \"paramname\":\"steamIDClanChat\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5193:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5194            ],\n 5195            \"returntype\": \"bool\"\n ....\n 5199            \"methodname_flat\": \"SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam\",\n 5200            \"params\": [\n 5201:             { \"paramname\":\"steamIDClanChat\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5202            ],\n 5203            \"returntype\": \"bool\"\n ....\n 5207            \"methodname_flat\": \"SteamAPI_ISteamFriends_OpenClanChatWindowInSteam\",\n 5208            \"params\": [\n 5209:             { \"paramname\":\"steamIDClanChat\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5210            ],\n 5211            \"returntype\": \"bool\"\n ....\n 5215            \"methodname_flat\": \"SteamAPI_ISteamFriends_CloseClanChatWindowInSteam\",\n 5216            \"params\": [\n 5217:             { \"paramname\":\"steamIDClanChat\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5218            ],\n 5219            \"returntype\": \"bool\"\n ....\n 5231            \"methodname_flat\": \"SteamAPI_ISteamFriends_ReplyToFriendMessage\",\n 5232            \"params\": [\n 5233:             { \"paramname\":\"steamIDFriend\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5234              { \"paramname\":\"pchMsgToSend\", \"paramtype\":\"const char *\" }\n 5235            ],\n ....\n 5240            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetFriendMessage\",\n 5241            \"params\": [\n 5242:             { \"paramname\":\"steamIDFriend\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5243              { \"paramname\":\"iMessageID\", \"paramtype\":\"int\" },\n 5244              { \"paramname\":\"pvData\", \"paramtype\":\"void *\" },\n ....\n 5253            \"methodname_flat\": \"SteamAPI_ISteamFriends_GetFollowerCount\",\n 5254            \"params\": [\n 5255:             { \"paramname\":\"steamID\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5256            ],\n 5257            \"returntype\": \"SteamAPICall_t\"\n ....\n 5262            \"methodname_flat\": \"SteamAPI_ISteamFriends_IsFollowing\",\n 5263            \"params\": [\n 5264:             { \"paramname\":\"steamID\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5265            ],\n 5266            \"returntype\": \"SteamAPICall_t\"\n ....\n 5279            \"methodname_flat\": \"SteamAPI_ISteamFriends_IsClanPublic\",\n 5280            \"params\": [\n 5281:             { \"paramname\":\"steamIDClan\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5282            ],\n 5283            \"returntype\": \"bool\"\n ....\n 5287            \"methodname_flat\": \"SteamAPI_ISteamFriends_IsClanOfficialGameGroup\",\n 5288            \"params\": [\n 5289:             { \"paramname\":\"steamIDClan\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5290            ],\n 5291            \"returntype\": \"bool\"\n ....\n 5301            \"methodname_flat\": \"SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog\",\n 5302            \"params\": [\n 5303:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5304            ],\n 5305            \"returntype\": \"void\"\n ....\n 5567            \"params\": [\n 5568              { \"paramname\":\"eContext\", \"paramtype\":\"ETextFilteringContext\" },\n 5569:             { \"paramname\":\"sourceSteamID\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5570              { \"paramname\":\"pchInputMessage\", \"paramtype\":\"const char *\" },\n 5571              { \"paramname\":\"pchOutFilteredText\", \"paramtype\":\"char *\" },\n ....\n 5705            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter\",\n 5706            \"params\": [\n 5707:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5708            ],\n 5709            \"returntype\": \"void\"\n ....\n 5715              { \"paramname\":\"iLobby\", \"paramtype\":\"int\" }\n 5716            ],\n 5717:           \"returntype\": \"CSteamID\",\n 5718            \"returntype_flat\": \"uint64_steamid\"\n 5719          },\n ....\n 5733            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_JoinLobby\",\n 5734            \"params\": [\n 5735:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5736            ],\n 5737            \"returntype\": \"SteamAPICall_t\"\n ....\n 5741            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_LeaveLobby\",\n 5742            \"params\": [\n 5743:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5744            ],\n 5745            \"returntype\": \"void\"\n ....\n 5749            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_InviteUserToLobby\",\n 5750            \"params\": [\n 5751:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5752:             { \"paramname\":\"steamIDInvitee\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5753            ],\n 5754            \"returntype\": \"bool\"\n ....\n 5758            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_GetNumLobbyMembers\",\n 5759            \"params\": [\n 5760:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5761            ],\n 5762            \"returntype\": \"int\"\n ....\n 5766            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex\",\n 5767            \"params\": [\n 5768:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5769              { \"paramname\":\"iMember\", \"paramtype\":\"int\" }\n 5770            ],\n 5771:           \"returntype\": \"CSteamID\",\n 5772            \"returntype_flat\": \"uint64_steamid\"\n 5773          },\n ....\n 5776            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_GetLobbyData\",\n 5777            \"params\": [\n 5778:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5779              { \"paramname\":\"pchKey\", \"paramtype\":\"const char *\" }\n 5780            ],\n ....\n 5785            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_SetLobbyData\",\n 5786            \"params\": [\n 5787:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5788              { \"paramname\":\"pchKey\", \"paramtype\":\"const char *\" },\n 5789              { \"paramname\":\"pchValue\", \"paramtype\":\"const char *\" }\n ....\n 5795            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_GetLobbyDataCount\",\n 5796            \"params\": [\n 5797:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5798            ],\n 5799            \"returntype\": \"int\"\n ....\n 5803            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex\",\n 5804            \"params\": [\n 5805:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5806              { \"paramname\":\"iLobbyData\", \"paramtype\":\"int\" },\n 5807              { \"paramname\":\"pchKey\", \"paramtype\":\"char *\" },\n ....\n 5816            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_DeleteLobbyData\",\n 5817            \"params\": [\n 5818:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5819              { \"paramname\":\"pchKey\", \"paramtype\":\"const char *\" }\n 5820            ],\n ....\n 5825            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_GetLobbyMemberData\",\n 5826            \"params\": [\n 5827:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5828:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5829              { \"paramname\":\"pchKey\", \"paramtype\":\"const char *\" }\n 5830            ],\n ....\n 5835            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_SetLobbyMemberData\",\n 5836            \"params\": [\n 5837:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5838              { \"paramname\":\"pchKey\", \"paramtype\":\"const char *\" },\n 5839              { \"paramname\":\"pchValue\", \"paramtype\":\"const char *\" }\n ....\n 5845            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_SendLobbyChatMsg\",\n 5846            \"params\": [\n 5847:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5848              { \"paramname\":\"pvMsgBody\", \"paramtype\":\"const void *\" },\n 5849              { \"paramname\":\"cubMsgBody\", \"paramtype\":\"int\" }\n ....\n 5855            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_GetLobbyChatEntry\",\n 5856            \"params\": [\n 5857:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5858              { \"paramname\":\"iChatID\", \"paramtype\":\"int\" },\n 5859              {\n 5860                \"out_struct\": \"\",\n 5861                \"paramname\": \"pSteamIDUser\",\n 5862:               \"paramtype\": \"CSteamID *\"\n 5863              },\n 5864              { \"paramname\":\"pvData\", \"paramtype\":\"void *\" },\n ....\n 5872            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_RequestLobbyData\",\n 5873            \"params\": [\n 5874:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5875            ],\n 5876            \"returntype\": \"bool\"\n ....\n 5880            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_SetLobbyGameServer\",\n 5881            \"params\": [\n 5882:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5883              { \"paramname\":\"unGameServerIP\", \"paramtype\":\"uint32\" },\n 5884              { \"paramname\":\"unGameServerPort\", \"paramtype\":\"uint16\" },\n 5885:             { \"paramname\":\"steamIDGameServer\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5886            ],\n 5887            \"returntype\": \"void\"\n ....\n 5891            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_GetLobbyGameServer\",\n 5892            \"params\": [\n 5893:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5894              { \"paramname\":\"punGameServerIP\", \"paramtype\":\"uint32 *\" },\n 5895              { \"paramname\":\"punGameServerPort\", \"paramtype\":\"uint16 *\" },\n ....\n 5897                \"out_struct\": \"\",\n 5898                \"paramname\": \"psteamIDGameServer\",\n 5899:               \"paramtype\": \"CSteamID *\"\n 5900              }\n 5901            ],\n ....\n 5906            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit\",\n 5907            \"params\": [\n 5908:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5909              { \"paramname\":\"cMaxMembers\", \"paramtype\":\"int\" }\n 5910            ],\n ....\n 5915            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit\",\n 5916            \"params\": [\n 5917:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5918            ],\n 5919            \"returntype\": \"int\"\n ....\n 5923            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_SetLobbyType\",\n 5924            \"params\": [\n 5925:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5926              { \"paramname\":\"eLobbyType\", \"paramtype\":\"ELobbyType\" }\n 5927            ],\n ....\n 5932            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_SetLobbyJoinable\",\n 5933            \"params\": [\n 5934:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5935              { \"paramname\":\"bLobbyJoinable\", \"paramtype\":\"bool\" }\n 5936            ],\n ....\n 5941            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_GetLobbyOwner\",\n 5942            \"params\": [\n 5943:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5944            ],\n 5945:           \"returntype\": \"CSteamID\",\n 5946            \"returntype_flat\": \"uint64_steamid\"\n 5947          },\n ....\n 5950            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_SetLobbyOwner\",\n 5951            \"params\": [\n 5952:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5953:             { \"paramname\":\"steamIDNewOwner\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5954            ],\n 5955            \"returntype\": \"bool\"\n ....\n 5959            \"methodname_flat\": \"SteamAPI_ISteamMatchmaking_SetLinkedLobby\",\n 5960            \"params\": [\n 5961:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 5962:             { \"paramname\":\"steamIDLobbyDependent\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 5963            ],\n 5964            \"returntype\": \"bool\"\n ....\n 6293            \"methodname_flat\": \"SteamAPI_ISteamGameSearch_SearchForGameWithLobby\",\n 6294            \"params\": [\n 6295:             { \"paramname\":\"steamIDLobby\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 6296              { \"paramname\":\"nPlayerMin\", \"paramtype\":\"int\" },\n 6297              { \"paramname\":\"nPlayerMax\", \"paramtype\":\"int\" }\n ....\n 6324            \"methodname_flat\": \"SteamAPI_ISteamGameSearch_RetrieveConnectionDetails\",\n 6325            \"params\": [\n 6326:             { \"paramname\":\"steamIDHost\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 6327              { \"paramname\":\"pchConnectionDetails\", \"paramtype\":\"char *\" },\n 6328              { \"paramname\":\"cubConnectionDetails\", \"paramtype\":\"int\" }\n ....\n 6383            \"params\": [\n 6384              { \"paramname\":\"ullUniqueGameID\", \"paramtype\":\"uint64\" },\n 6385:             { \"paramname\":\"steamIDPlayer\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 6386              { \"paramname\":\"EPlayerResult\", \"paramtype\":\"EPlayerResult_t\" }\n 6387            ],\n ....\n 6429            \"params\": [\n 6430              { \"paramname\":\"ulBeaconID\", \"paramtype\":\"PartyBeaconID_t\" },\n 6431:             { \"paramname\":\"pSteamIDBeaconOwner\", \"paramtype\":\"CSteamID *\" },\n 6432              {\n 6433                \"out_struct\": \"\",\n ....\n 6487            \"params\": [\n 6488              { \"paramname\":\"ulBeacon\", \"paramtype\":\"PartyBeaconID_t\" },\n 6489:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 6490            ],\n 6491            \"returntype\": \"void\"\n ....\n 6496            \"params\": [\n 6497              { \"paramname\":\"ulBeacon\", \"paramtype\":\"PartyBeaconID_t\" },\n 6498:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 6499            ],\n 6500            \"returntype\": \"void\"\n ....\n 6786                \"out_struct\": \"\",\n 6787                \"paramname\": \"pSteamIDOwner\",\n 6788:               \"paramtype\": \"CSteamID *\"\n 6789              }\n 6790            ],\n ....\n 7001            \"methodname_flat\": \"SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles\",\n 7002            \"params\": [\n 7003:             { \"paramname\":\"steamId\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 7004              { \"paramname\":\"unStartIndex\", \"paramtype\":\"uint32\" },\n 7005              { \"paramname\":\"pRequiredTags\", \"paramtype\":\"SteamParamStringArray_t *\" },\n ....\n 7224            \"methodname_flat\": \"SteamAPI_ISteamUserStats_RequestUserStats\",\n 7225            \"params\": [\n 7226:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 7227            ],\n 7228            \"returntype\": \"SteamAPICall_t\"\n ....\n 7232            \"methodname_flat\": \"SteamAPI_ISteamUserStats_GetUserStatInt32\",\n 7233            \"params\": [\n 7234:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 7235              { \"paramname\":\"pchName\", \"paramtype\":\"const char *\" },\n 7236              { \"paramname\":\"pData\", \"paramtype\":\"int32 *\" }\n ....\n 7242            \"methodname_flat\": \"SteamAPI_ISteamUserStats_GetUserStatFloat\",\n 7243            \"params\": [\n 7244:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 7245              { \"paramname\":\"pchName\", \"paramtype\":\"const char *\" },\n 7246              { \"paramname\":\"pData\", \"paramtype\":\"float *\" }\n ....\n 7252            \"methodname_flat\": \"SteamAPI_ISteamUserStats_GetUserAchievement\",\n 7253            \"params\": [\n 7254:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 7255              { \"paramname\":\"pchName\", \"paramtype\":\"const char *\" },\n 7256              { \"paramname\":\"pbAchieved\", \"paramtype\":\"bool *\" }\n ....\n 7262            \"methodname_flat\": \"SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime\",\n 7263            \"params\": [\n 7264:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 7265              { \"paramname\":\"pchName\", \"paramtype\":\"const char *\" },\n 7266              { \"paramname\":\"pbAchieved\", \"paramtype\":\"bool *\" },\n ....\n 7352                \"desc\": \"Array of users to retrieve\",\n 7353                \"paramname\": \"prgUsers\",\n 7354:               \"paramtype\": \"CSteamID *\"\n 7355              },\n 7356              { \"paramname\":\"cUsers\", \"paramtype\":\"int\" }\n ....\n 7690            \"methodname_flat\": \"SteamAPI_ISteamApps_GetAppOwner\",\n 7691            \"params\": [],\n 7692:           \"returntype\": \"CSteamID\",\n 7693            \"returntype_flat\": \"uint64_steamid\"\n 7694          },\n ....\n 7779            \"methodname_flat\": \"SteamAPI_ISteamNetworking_SendP2PPacket\",\n 7780            \"params\": [\n 7781:             { \"paramname\":\"steamIDRemote\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 7782              { \"paramname\":\"pubData\", \"paramtype\":\"const void *\" },\n 7783              { \"paramname\":\"cubData\", \"paramtype\":\"uint32\" },\n ....\n 7803              { \"paramname\":\"cubDest\", \"paramtype\":\"uint32\" },\n 7804              { \"paramname\":\"pcubMsgSize\", \"paramtype\":\"uint32 *\" },\n 7805:             { \"paramname\":\"psteamIDRemote\", \"paramtype\":\"CSteamID *\" },\n 7806              { \"paramname\":\"nChannel\", \"paramtype\":\"int\" }\n 7807            ],\n ....\n 7812            \"methodname_flat\": \"SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser\",\n 7813            \"params\": [\n 7814:             { \"paramname\":\"steamIDRemote\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 7815            ],\n 7816            \"returntype\": \"bool\"\n ....\n 7820            \"methodname_flat\": \"SteamAPI_ISteamNetworking_CloseP2PSessionWithUser\",\n 7821            \"params\": [\n 7822:             { \"paramname\":\"steamIDRemote\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 7823            ],\n 7824            \"returntype\": \"bool\"\n ....\n 7828            \"methodname_flat\": \"SteamAPI_ISteamNetworking_CloseP2PChannelWithUser\",\n 7829            \"params\": [\n 7830:             { \"paramname\":\"steamIDRemote\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 7831              { \"paramname\":\"nChannel\", \"paramtype\":\"int\" }\n 7832            ],\n ....\n 7837            \"methodname_flat\": \"SteamAPI_ISteamNetworking_GetP2PSessionState\",\n 7838            \"params\": [\n 7839:             { \"paramname\":\"steamIDRemote\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 7840              { \"paramname\":\"pConnectionState\", \"paramtype\":\"P2PSessionState_t *\" }\n 7841            ],\n ....\n 7865            \"methodname_flat\": \"SteamAPI_ISteamNetworking_CreateP2PConnectionSocket\",\n 7866            \"params\": [\n 7867:             { \"paramname\":\"steamIDTarget\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 7868              { \"paramname\":\"nVirtualPort\", \"paramtype\":\"int\" },\n 7869              { \"paramname\":\"nTimeoutSec\", \"paramtype\":\"int\" },\n ....\n 7958            \"params\": [\n 7959              { \"paramname\":\"hSocket\", \"paramtype\":\"SNetSocket_t\" },\n 7960:             { \"paramname\":\"pSteamIDRemote\", \"paramtype\":\"CSteamID *\" },\n 7961              { \"paramname\":\"peSocketStatus\", \"paramtype\":\"int *\" },\n 7962              { \"paramname\":\"punIPRemote\", \"paramtype\":\"SteamIPAddress_t *\" },\n ....\n 8055            \"params\": [\n 8056              { \"paramname\":\"hScreenshot\", \"paramtype\":\"ScreenshotHandle\" },\n 8057:             { \"paramname\":\"steamID\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 8058            ],\n 8059            \"returntype\": \"bool\"\n ....\n 10735            \"params\": [\n 10736              { \"paramname\":\"resultHandle\", \"paramtype\":\"SteamInventoryResult_t\" },\n 10737:             { \"paramname\":\"steamIDExpected\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 10738            ],\n 10739            \"returntype\": \"bool\"\n .....\n 10926            \"params\": [\n 10927              { \"paramname\":\"pResultHandle\", \"paramtype\":\"SteamInventoryResult_t *\" },\n 10928:             { \"paramname\":\"steamIDTradePartner\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 10929              {\n 10930                \"array_count\": \"nArrayGiveLength\",\n .....\n 10997            \"methodname_flat\": \"SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs\",\n 10998            \"params\": [\n 10999:             { \"paramname\":\"steamID\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 11000            ],\n 11001            \"returntype\": \"SteamAPICall_t\"\n .....\n 11005            \"methodname_flat\": \"SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs\",\n 11006            \"params\": [\n 11007:             { \"paramname\":\"steamID\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 11008              {\n 11009                \"desc\": \"List of item definition IDs\",\n .....\n 11311              { \"paramname\":\"unSessionID\", \"paramtype\":\"RemotePlaySessionID_t\" }\n 11312            ],\n 11313:           \"returntype\": \"CSteamID\",\n 11314            \"returntype_flat\": \"uint64_steamid\"\n 11315          },\n .....\n 11344            \"methodname_flat\": \"SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite\",\n 11345            \"params\": [\n 11346:             { \"paramname\":\"steamIDFriend\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 11347            ],\n 11348            \"returntype\": \"bool\"\n .....\n 12225            \"methodname_flat\": \"SteamAPI_ISteamGameServer_GetSteamID\",\n 12226            \"params\": [],\n 12227:           \"returntype\": \"CSteamID\",\n 12228            \"returntype_flat\": \"uint64_steamid\"\n 12229          },\n .....\n 12336              { \"paramname\":\"pvAuthBlob\", \"paramtype\":\"const void *\" },\n 12337              { \"paramname\":\"cubAuthBlobSize\", \"paramtype\":\"uint32\" },\n 12338:             { \"paramname\":\"pSteamIDUser\", \"paramtype\":\"CSteamID *\" }\n 12339            ],\n 12340            \"returntype\": \"bool\"\n .....\n 12344            \"methodname_flat\": \"SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection\",\n 12345            \"params\": [],\n 12346:           \"returntype\": \"CSteamID\",\n 12347            \"returntype_flat\": \"uint64_steamid\"\n 12348          },\n .....\n 12351            \"methodname_flat\": \"SteamAPI_ISteamGameServer_SendUserDisconnect\",\n 12352            \"params\": [\n 12353:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 12354            ],\n 12355            \"returntype\": \"void\"\n .....\n 12359            \"methodname_flat\": \"SteamAPI_ISteamGameServer_BUpdateUserData\",\n 12360            \"params\": [\n 12361:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 12362              { \"paramname\":\"pchPlayerName\", \"paramtype\":\"const char *\" },\n 12363              { \"paramname\":\"uScore\", \"paramtype\":\"uint32\" }\n .....\n 12381              { \"paramname\":\"pAuthTicket\", \"paramtype\":\"const void *\" },\n 12382              { \"paramname\":\"cbAuthTicket\", \"paramtype\":\"int\" },\n 12383:             { \"paramname\":\"steamID\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 12384            ],\n 12385            \"returntype\": \"EBeginAuthSessionResult\"\n .....\n 12389            \"methodname_flat\": \"SteamAPI_ISteamGameServer_EndAuthSession\",\n 12390            \"params\": [\n 12391:             { \"paramname\":\"steamID\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 12392            ],\n 12393            \"returntype\": \"void\"\n .....\n 12405            \"methodname_flat\": \"SteamAPI_ISteamGameServer_UserHasLicenseForApp\",\n 12406            \"params\": [\n 12407:             { \"paramname\":\"steamID\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 12408              { \"paramname\":\"appID\", \"paramtype\":\"AppId_t\" }\n 12409            ],\n .....\n 12414            \"methodname_flat\": \"SteamAPI_ISteamGameServer_RequestUserGroupStatus\",\n 12415            \"params\": [\n 12416:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 12417:             { \"paramname\":\"steamIDGroup\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 12418            ],\n 12419            \"returntype\": \"bool\"\n .....\n 12487            \"methodname_flat\": \"SteamAPI_ISteamGameServer_AssociateWithClan\",\n 12488            \"params\": [\n 12489:             { \"paramname\":\"steamIDClan\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 12490            ],\n 12491            \"returntype\": \"SteamAPICall_t\"\n .....\n 12496            \"methodname_flat\": \"SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility\",\n 12497            \"params\": [\n 12498:             { \"paramname\":\"steamIDNewPlayer\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 12499            ],\n 12500            \"returntype\": \"SteamAPICall_t\"\n .....\n 12519            \"methodname_flat\": \"SteamAPI_ISteamGameServerStats_RequestUserStats\",\n 12520            \"params\": [\n 12521:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 12522            ],\n 12523            \"returntype\": \"SteamAPICall_t\"\n .....\n 12527            \"methodname_flat\": \"SteamAPI_ISteamGameServerStats_GetUserStatInt32\",\n 12528            \"params\": [\n 12529:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 12530              { \"paramname\":\"pchName\", \"paramtype\":\"const char *\" },\n 12531              { \"paramname\":\"pData\", \"paramtype\":\"int32 *\" }\n .....\n 12537            \"methodname_flat\": \"SteamAPI_ISteamGameServerStats_GetUserStatFloat\",\n 12538            \"params\": [\n 12539:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 12540              { \"paramname\":\"pchName\", \"paramtype\":\"const char *\" },\n 12541              { \"paramname\":\"pData\", \"paramtype\":\"float *\" }\n .....\n 12547            \"methodname_flat\": \"SteamAPI_ISteamGameServerStats_GetUserAchievement\",\n 12548            \"params\": [\n 12549:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 12550              { \"paramname\":\"pchName\", \"paramtype\":\"const char *\" },\n 12551              { \"paramname\":\"pbAchieved\", \"paramtype\":\"bool *\" }\n .....\n 12557            \"methodname_flat\": \"SteamAPI_ISteamGameServerStats_SetUserStatInt32\",\n 12558            \"params\": [\n 12559:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 12560              { \"paramname\":\"pchName\", \"paramtype\":\"const char *\" },\n 12561              { \"paramname\":\"nData\", \"paramtype\":\"int32\" }\n .....\n 12567            \"methodname_flat\": \"SteamAPI_ISteamGameServerStats_SetUserStatFloat\",\n 12568            \"params\": [\n 12569:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 12570              { \"paramname\":\"pchName\", \"paramtype\":\"const char *\" },\n 12571              { \"paramname\":\"fData\", \"paramtype\":\"float\" }\n .....\n 12577            \"methodname_flat\": \"SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat\",\n 12578            \"params\": [\n 12579:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 12580              { \"paramname\":\"pchName\", \"paramtype\":\"const char *\" },\n 12581              { \"paramname\":\"flCountThisSession\", \"paramtype\":\"float\" },\n .....\n 12588            \"methodname_flat\": \"SteamAPI_ISteamGameServerStats_SetUserAchievement\",\n 12589            \"params\": [\n 12590:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 12591              { \"paramname\":\"pchName\", \"paramtype\":\"const char *\" }\n 12592            ],\n .....\n 12597            \"methodname_flat\": \"SteamAPI_ISteamGameServerStats_ClearUserAchievement\",\n 12598            \"params\": [\n 12599:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" },\n 12600              { \"paramname\":\"pchName\", \"paramtype\":\"const char *\" }\n 12601            ],\n .....\n 12607            \"methodname_flat\": \"SteamAPI_ISteamGameServerStats_StoreUserStats\",\n 12608            \"params\": [\n 12609:             { \"paramname\":\"steamIDUser\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 12610            ],\n 12611            \"returntype\": \"SteamAPICall_t\"\n .....\n 12637          { \"fieldname\":\"m_usGamePort\", \"fieldtype\":\"uint16\" },\n 12638          { \"fieldname\":\"m_usQueryPort\", \"fieldtype\":\"uint16\" },\n 12639:         { \"fieldname\":\"m_steamIDLobby\", \"fieldtype\":\"CSteamID\" }\n 12640        ],\n 12641        \"struct\": \"FriendGameInfo_t\"\n .....\n 12787          },\n 12788          { \"fieldname\":\"m_szGameTags\", \"fieldtype\":\"char [128]\" },\n 12789:         { \"fieldname\":\"m_steamID\", \"fieldtype\":\"CSteamID\" }\n 12790        ],\n 12791        \"methods\": [\n .....\n 12829      {\n 12830        \"fields\": [\n 12831:         { \"fieldname\":\"m_steamIDUser\", \"fieldtype\":\"CSteamID\" },\n 12832          { \"fieldname\":\"m_nGlobalRank\", \"fieldtype\":\"int32\" },\n 12833          { \"fieldname\":\"m_nScore\", \"fieldtype\":\"int32\" },\n .....\n 13044            \"methodname_flat\": \"SteamAPI_SteamNetworkingIdentity_SetSteamID\",\n 13045            \"params\": [\n 13046:             { \"paramname\":\"steamID\", \"paramtype\":\"CSteamID\", \"paramtype_flat\":\"uint64_steamid\" }\n 13047            ],\n 13048            \"returntype\": \"void\"\n .....\n 13052            \"methodname_flat\": \"SteamAPI_SteamNetworkingIdentity_GetSteamID\",\n 13053            \"params\": [],\n 13054:           \"returntype\": \"CSteamID\",\n 13055            \"returntype_flat\": \"uint64_steamid\"\n 13056          },\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\public\\steam\\steam_api_flat.h:\n   13  #include \"steam/isteamgameserverstats.h\"\n   14  \n   15: typedef uint64 uint64_steamid; // Used when passing or returning CSteamID\n   16  typedef uint64 uint64_gameid; // Used when passing or return CGameID\n   17  \n   ..\n  109  S_API const char * SteamAPI_ISteamFriends_GetFriendsGroupName( ISteamFriends* self, FriendsGroupID_t friendsGroupID );\n  110  S_API int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount( ISteamFriends* self, FriendsGroupID_t friendsGroupID );\n  111: S_API void SteamAPI_ISteamFriends_GetFriendsGroupMembersList( ISteamFriends* self, FriendsGroupID_t friendsGroupID, CSteamID * pOutSteamIDMembers, int nMembersCount );\n  112  S_API bool SteamAPI_ISteamFriends_HasFriend( ISteamFriends* self, uint64_steamid steamIDFriend, int iFriendFlags );\n  113  S_API int SteamAPI_ISteamFriends_GetClanCount( ISteamFriends* self );\n  ...\n  116  S_API const char * SteamAPI_ISteamFriends_GetClanTag( ISteamFriends* self, uint64_steamid steamIDClan );\n  117  S_API bool SteamAPI_ISteamFriends_GetClanActivityCounts( ISteamFriends* self, uint64_steamid steamIDClan, int * pnOnline, int * pnInGame, int * pnChatting );\n  118: S_API SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts( ISteamFriends* self, CSteamID * psteamIDClans, int cClansToRequest );\n  119  S_API int SteamAPI_ISteamFriends_GetFriendCountFromSource( ISteamFriends* self, uint64_steamid steamIDSource );\n  120  S_API uint64_steamid SteamAPI_ISteamFriends_GetFriendFromSourceByIndex( ISteamFriends* self, uint64_steamid steamIDSource, int iFriend );\n  ...\n  152  S_API uint64_steamid SteamAPI_ISteamFriends_GetChatMemberByIndex( ISteamFriends* self, uint64_steamid steamIDClan, int iUser );\n  153  S_API bool SteamAPI_ISteamFriends_SendClanChatMessage( ISteamFriends* self, uint64_steamid steamIDClanChat, const char * pchText );\n  154: S_API int SteamAPI_ISteamFriends_GetClanChatMessage( ISteamFriends* self, uint64_steamid steamIDClanChat, int iMessage, void * prgchText, int cchTextMax, EChatEntryType * peChatEntryType, CSteamID * psteamidChatter );\n  155  S_API bool SteamAPI_ISteamFriends_IsClanChatAdmin( ISteamFriends* self, uint64_steamid steamIDClanChat, uint64_steamid steamIDUser );\n  156  S_API bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam( ISteamFriends* self, uint64_steamid steamIDClanChat );\n  ...\n  235  S_API void SteamAPI_ISteamMatchmaking_SetLobbyMemberData( ISteamMatchmaking* self, uint64_steamid steamIDLobby, const char * pchKey, const char * pchValue );\n  236  S_API bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg( ISteamMatchmaking* self, uint64_steamid steamIDLobby, const void * pvMsgBody, int cubMsgBody );\n  237: S_API int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry( ISteamMatchmaking* self, uint64_steamid steamIDLobby, int iChatID, CSteamID * pSteamIDUser, void * pvData, int cubData, EChatEntryType * peChatEntryType );\n  238  S_API bool SteamAPI_ISteamMatchmaking_RequestLobbyData( ISteamMatchmaking* self, uint64_steamid steamIDLobby );\n  239  S_API void SteamAPI_ISteamMatchmaking_SetLobbyGameServer( ISteamMatchmaking* self, uint64_steamid steamIDLobby, uint32 unGameServerIP, uint16 unGameServerPort, uint64_steamid steamIDGameServer );\n  240: S_API bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer( ISteamMatchmaking* self, uint64_steamid steamIDLobby, uint32 * punGameServerIP, uint16 * punGameServerPort, CSteamID * psteamIDGameServer );\n  241  S_API bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit( ISteamMatchmaking* self, uint64_steamid steamIDLobby, int cMaxMembers );\n  242  S_API int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit( ISteamMatchmaking* self, uint64_steamid steamIDLobby );\n  ...\n  307  S_API uint32 SteamAPI_ISteamParties_GetNumActiveBeacons( ISteamParties* self );\n  308  S_API PartyBeaconID_t SteamAPI_ISteamParties_GetBeaconByIndex( ISteamParties* self, uint32 unIndex );\n  309: S_API bool SteamAPI_ISteamParties_GetBeaconDetails( ISteamParties* self, PartyBeaconID_t ulBeaconID, CSteamID * pSteamIDBeaconOwner, SteamPartyBeaconLocation_t * pLocation, char * pchMetadata, int cchMetadata );\n  310  S_API SteamAPICall_t SteamAPI_ISteamParties_JoinParty( ISteamParties* self, PartyBeaconID_t ulBeaconID );\n  311  S_API bool SteamAPI_ISteamParties_GetNumAvailableBeaconLocations( ISteamParties* self, uint32 * puNumLocations );\n  ...\n  346  S_API SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload( ISteamRemoteStorage* self, UGCHandle_t hContent, uint32 unPriority );\n  347  S_API bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress( ISteamRemoteStorage* self, UGCHandle_t hContent, int32 * pnBytesDownloaded, int32 * pnBytesExpected );\n  348: S_API bool SteamAPI_ISteamRemoteStorage_GetUGCDetails( ISteamRemoteStorage* self, UGCHandle_t hContent, AppId_t * pnAppID, char ** ppchName, int32 * pnFileSizeInBytes, CSteamID * pSteamIDOwner );\n  349  S_API int32 SteamAPI_ISteamRemoteStorage_UGCRead( ISteamRemoteStorage* self, UGCHandle_t hContent, void * pvData, int32 cubDataToRead, uint32 cOffset, EUGCReadAction eAction );\n  350  S_API int32 SteamAPI_ISteamRemoteStorage_GetCachedUGCCount( ISteamRemoteStorage* self );\n  ...\n  407  S_API ELeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType( ISteamUserStats* self, SteamLeaderboard_t hSteamLeaderboard );\n  408  S_API SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries( ISteamUserStats* self, SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd );\n  409: S_API SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers( ISteamUserStats* self, SteamLeaderboard_t hSteamLeaderboard, CSteamID * prgUsers, int cUsers );\n  410  S_API bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry( ISteamUserStats* self, SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, LeaderboardEntry_t * pLeaderboardEntry, int32 * pDetails, int cDetailsMax );\n  411  S_API SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore( ISteamUserStats* self, SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int32 nScore, const int32 * pScoreDetails, int cScoreDetailsCount );\n  ...\n  462  S_API bool SteamAPI_ISteamNetworking_SendP2PPacket( ISteamNetworking* self, uint64_steamid steamIDRemote, const void * pubData, uint32 cubData, EP2PSend eP2PSendType, int nChannel );\n  463  S_API bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable( ISteamNetworking* self, uint32 * pcubMsgSize, int nChannel );\n  464: S_API bool SteamAPI_ISteamNetworking_ReadP2PPacket( ISteamNetworking* self, void * pubDest, uint32 cubDest, uint32 * pcubMsgSize, CSteamID * psteamIDRemote, int nChannel );\n  465  S_API bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser( ISteamNetworking* self, uint64_steamid steamIDRemote );\n  466  S_API bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser( ISteamNetworking* self, uint64_steamid steamIDRemote );\n  ...\n  478  S_API bool SteamAPI_ISteamNetworking_IsDataAvailable( ISteamNetworking* self, SNetListenSocket_t hListenSocket, uint32 * pcubMsgSize, SNetSocket_t * phSocket );\n  479  S_API bool SteamAPI_ISteamNetworking_RetrieveData( ISteamNetworking* self, SNetListenSocket_t hListenSocket, void * pubDest, uint32 cubDest, uint32 * pcubMsgSize, SNetSocket_t * phSocket );\n  480: S_API bool SteamAPI_ISteamNetworking_GetSocketInfo( ISteamNetworking* self, SNetSocket_t hSocket, CSteamID * pSteamIDRemote, int * peSocketStatus, SteamIPAddress_t * punIPRemote, uint16 * punPortRemote );\n  481  S_API bool SteamAPI_ISteamNetworking_GetListenSocketInfo( ISteamNetworking* self, SNetListenSocket_t hListenSocket, SteamIPAddress_t * pnIP, uint16 * pnPort );\n  482  S_API ESNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType( ISteamNetworking* self, SNetSocket_t hSocket );\n  ...\n  966  S_API void SteamAPI_ISteamGameServer_SetGameData( ISteamGameServer* self, const char * pchGameData );\n  967  S_API void SteamAPI_ISteamGameServer_SetRegion( ISteamGameServer* self, const char * pszRegion );\n  968: S_API bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate( ISteamGameServer* self, uint32 unIPClient, const void * pvAuthBlob, uint32 cubAuthBlobSize, CSteamID * pSteamIDUser );\n  969  S_API uint64_steamid SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection( ISteamGameServer* self );\n  970  S_API void SteamAPI_ISteamGameServer_SendUserDisconnect( ISteamGameServer* self, uint64_steamid steamIDUser );\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\public\\steam\\steamclientpublic.h:\n  726  #pragma pack( push, 1 )\n  727  \n  728: #define CSTEAMID_DEFINED\n  729  \n  730  // Steam ID structure (64 bits total)\n  731: class CSteamID\n  732  {\n  733  public:\n  ...\n  736  \t// Purpose: Constructor\n  737  \t//-----------------------------------------------------------------------------\n  738: \tCSteamID()\n  739  \t{\n  740  \t\tm_steamid.m_comp.m_unAccountID = 0;\n  ...\n  751  \t//\t\t\teAccountType -\tType of account\n  752  \t//-----------------------------------------------------------------------------\n  753: \tCSteamID( uint32 unAccountID, EUniverse eUniverse, EAccountType eAccountType )\n  754  \t{\n  755  \t\tSet( unAccountID, eUniverse, eAccountType );\n  ...\n  764  \t//\t\t\teAccountType -\tType of account\n  765  \t//-----------------------------------------------------------------------------\n  766: \tCSteamID( uint32 unAccountID, unsigned int unAccountInstance, EUniverse eUniverse, EAccountType eAccountType )\n  767  \t{\n  768  #if defined(_SERVER) && defined(Assert)\n  ...\n  779  \t//\t\t\tSee the stubbed out overloads in the private: section for more info.\n  780  \t//-----------------------------------------------------------------------------\n  781: \tCSteamID( uint64 ulSteamID )\n  782  \t{\n  783  \t\tSetFromUint64( ulSteamID );\n  784  \t}\n  785  #ifdef INT64_DIFFERENT_FROM_INT64_T\n  786: \tCSteamID( uint64_t ulSteamID )\n  787  \t{\n  788  \t\tSetFromUint64( (uint64)ulSteamID );\n  ...\n 1054  \n 1055  \t// this set of functions is hidden, will be moved out of class\n 1056: \texplicit CSteamID( const char *pchSteamID, EUniverse eDefaultUniverse = k_EUniverseInvalid );\n 1057  \tconst char * Render() const;\t\t\t\t// renders this steam ID to string\n 1058  \tstatic const char * Render( uint64 ulSteamID );\t// static method to render a uint64 representation of a steam ID to a string\n ....\n 1067  \tbool SetFromSteam2String( const char *pchSteam2ID, EUniverse eUniverse );\n 1068  \n 1069: \tinline bool operator==( const CSteamID &val ) const { return m_steamid.m_unAll64Bits == val.m_steamid.m_unAll64Bits; } \n 1070: \tinline bool operator!=( const CSteamID &val ) const { return !operator==( val ); }\n 1071: \tinline bool operator<( const CSteamID &val ) const { return m_steamid.m_unAll64Bits < val.m_steamid.m_unAll64Bits; }\n 1072: \tinline bool operator>( const CSteamID &val ) const { return m_steamid.m_unAll64Bits > val.m_steamid.m_unAll64Bits; }\n 1073  \n 1074  \t// DEBUG function\n ....\n 1076  \n 1077  private:\n 1078: \t// These are defined here to prevent accidental implicit conversion of a u32AccountID to a CSteamID.\n 1079  \t// If you get a compiler error about an ambiguous constructor/function then it may be because you're\n 1080: \t// passing a 32-bit int to a function that takes a CSteamID. You should explicitly create the SteamID\n 1081  \t// using the correct Universe and account Type/Instance values.\n 1082: \tCSteamID( uint32 );\n 1083: \tCSteamID( int32 );\n 1084  \n 1085  \t// 64 bits total\n ....\n 1105  };\n 1106  \n 1107: inline bool CSteamID::IsValid() const\n 1108  {\n 1109  \tif ( m_steamid.m_comp.m_EAccountType <= k_EAccountTypeInvalid || m_steamid.m_comp.m_EAccountType >= k_EAccountTypeMax )\n ....\n 1134  }\n 1135  \n 1136: // generic invalid CSteamID\n 1137: #define k_steamIDNil CSteamID()\n 1138  \n 1139  // This steamID comes from a user game connection to an out of date GS that hasnt implemented the protocol\n 1140  // to provide its steamID\n 1141: #define k_steamIDOutofDateGS CSteamID( 0, 0, k_EUniverseInvalid, k_EAccountTypeInvalid )\n 1142  // This steamID comes from a user game connection to an sv_lan GS\n 1143: #define k_steamIDLanModeGS CSteamID( 0, 0, k_EUniversePublic, k_EAccountTypeInvalid )\n 1144  // This steamID can come from a user game connection to a GS that has just booted but hasnt yet even initialized\n 1145  // its steam3 component and started logging on.\n 1146: #define k_steamIDNotInitYetGS CSteamID( 1, 0, k_EUniverseInvalid, k_EAccountTypeInvalid )\n 1147  // This steamID can come from a user game connection to a GS that isn't using the steam authentication system but still\n 1148  // wants to support the \"Join Game\" option in the friends list\n 1149: #define k_steamIDNonSteamGS CSteamID( 2, 0, k_EUniverseInvalid, k_EAccountTypeInvalid )\n 1150  \n 1151  \n ....\n 1153  // Returns the matching chat steamID, with the default instance of 0\n 1154  // If the steamID passed in is already of type k_EAccountTypeChat it will be returned with the same instance\n 1155: CSteamID ChatIDFromSteamID( const CSteamID &steamID );\n 1156  // Returns the matching clan steamID, with the default instance of 0\n 1157  // If the steamID passed in is already of type k_EAccountTypeClan it will be returned with the same instance\n 1158: CSteamID ClanIDFromSteamID( const CSteamID &steamID );\n 1159  // Asserts steamID type before conversion\n 1160: CSteamID ChatIDFromClanID( const CSteamID &steamIDClan );\n 1161  // Asserts steamID type before conversion\n 1162: CSteamID ClanIDFromChatID( const CSteamID &steamIDChat );\n 1163  \n 1164  #endif // _STEAM\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\public\\steam\\steamencryptedappticket.h:\n   22  S_API RTime32 SteamEncryptedAppTicket_GetTicketIssueTime( uint8 *rgubTicketDecrypted, uint32 cubTicketDecrypted );\n   23  \n   24: S_API void SteamEncryptedAppTicket_GetTicketSteamID( uint8 *rgubTicketDecrypted, uint32 cubTicketDecrypted, CSteamID *psteamID );\n   25  \n   26  S_API AppId_t SteamEncryptedAppTicket_GetTicketAppID( uint8 *rgubTicketDecrypted, uint32 cubTicketDecrypted );\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\public\\steam\\steamnetworkingtypes.h:\n  141  \t// Basic platform-specific identifiers.\n  142  \t//\n  143: \tk_ESteamNetworkingIdentityType_SteamID = 16, // 64-bit CSteamID\n  144  \n  145  \t//\n  ...\n  246  \tbool IsInvalid() const; // Return true if we are the invalid type.  Does not make any other validity checks (e.g. is SteamID actually valid)\n  247  \n  248: \tvoid SetSteamID( CSteamID steamID );\n  249: \tCSteamID GetSteamID() const; // Return black CSteamID (!IsValid()) if identity is not a SteamID\n  250  \tvoid SetSteamID64( uint64 steamID ); // Takes SteamID as raw 64-bit number\n  251  \tuint64 GetSteamID64() const; // Returns 0 if identity is not SteamID\n  ...\n 1606  inline void SteamNetworkingIdentity::Clear() { memset( this, 0, sizeof(*this) ); }\n 1607  inline bool SteamNetworkingIdentity::IsInvalid() const { return m_eType == k_ESteamNetworkingIdentityType_Invalid; }\n 1608: inline void SteamNetworkingIdentity::SetSteamID( CSteamID steamID ) { SetSteamID64( steamID.ConvertToUint64() ); }\n 1609: inline CSteamID SteamNetworkingIdentity::GetSteamID() const { return CSteamID( GetSteamID64() ); }\n 1610  inline void SteamNetworkingIdentity::SetSteamID64( uint64 steamID ) { m_eType = k_ESteamNetworkingIdentityType_SteamID; m_cbSize = sizeof( m_steamID64 ); m_steamID64 = steamID; }\n 1611  inline uint64 SteamNetworkingIdentity::GetSteamID64() const { return m_eType == k_ESteamNetworkingIdentityType_SteamID ? m_steamID64 : 0; }\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\steamworksexample\\clanchatroom.cpp:\n   35  \t{\n   36  \t\t// pick a clan to join from the users current data\n   37: \t\tCSteamID steamIDBestClan;\n   38  \t\tfor ( int i = 0; i < SteamFriends()->GetClanCount(); i++ )\n   39  \t\t{\n   40: \t\t\tCSteamID steamIDClan = SteamFriends()->GetClanByIndex( i );\n   41  \t\t\tint online, ingame, chatting;\n   42  \t\t\tif ( SteamFriends()->GetClanActivityCounts( steamIDClan, &online, &ingame, &chatting ) )\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\steamworksexample\\clanchatroom.h:\n   36  \tCCallResult<CClanChatRoom, JoinClanChatRoomCompletionResult_t> m_SteamCallResultJoinChatRoom;\n   37  \n   38: \tCSteamID m_steamIDChat;\n   39  \n   40  };\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\steamworksexample\\Friends.cpp:\n   44  \n   45  \t\t// Add each Tag group and record the users with tags\n   46: \t\tstd::vector<CSteamID> vecTaggedSteamIDs;\n   47  \t\tint nFriendsGroups = SteamFriends()->GetFriendsGroupCount();\n   48  \t\tfor ( int iFG = 0; iFG < nFriendsGroups; iFG++ )\n   ..\n   62  \t\t\tAddMenuItem( CFriendsListMenu::MenuItem_t( pszFriendsGroupName, k_menuItemEmpty ) );\n   63  \n   64: \t\t\tstd::vector<CSteamID> vecSteamIDMembers( nFriendsGroupMemberCount );\n   65: \t\t\tSteamFriends()->GetFriendsGroupMembersList( friendsGroupID, &vecSteamIDMembers[0], nFriendsGroupMemberCount );\n   66  \t\t\tfor ( int iMember = 0; iMember < nFriendsGroupMemberCount; iMember++ )\n   67  \t\t\t{\n   68: \t\t\t\tconst CSteamID &steamIDMember = vecSteamIDMembers[iMember];\n   69  \t\t\t\tAddFriendToMenu( steamIDMember );\n   70  \t\t\t\tvecTaggedSteamIDs.push_back( steamIDMember );\n   ..\n   83  private:\n   84  \n   85: \tvoid AddFriendsByFlag( int iFriendFlag, const char *pszName, std::vector<CSteamID> *pVecIgnoredSteamIDs = NULL )\n   86  \t{\n   87  \t\tint iFriendCount = SteamFriends()->GetFriendCount( iFriendFlag );\n   ..\n   94  \t\tfor ( int iFriend = 0; iFriend < iFriendCount; iFriend++ )\n   95  \t\t{\n   96: \t\t\tCSteamID steamIDFriend = SteamFriends()->GetFriendByIndex( iFriend, iFriendFlag );\n   97  \n   98  \t\t\t// This mimicks the Steam client's feature where it only shows\n   ..\n  105  \t}\n  106  \n  107: \tvoid AddFriendToMenu( CSteamID steamIDFriend )\n  108  \t{\n  109  \t\tif ( !steamIDFriend.IsValid() )\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\steamworksexample\\Lobby.cpp:\n   21  \tCLobbyMenu( IGameEngine *pGameEngine ) : CBaseMenu<LobbyMenuItem_t>( pGameEngine ) {}\n   22  \n   23: \tvoid Rebuild( const CSteamID &steamIDLobby )\n   24  \t{\n   25  \t\tPushSelectedItem();\n   ..\n   28  \t\tif ( !steamIDLobby.IsValid() )\n   29  \t\t{\n   30: \t\t\tLobbyMenuItem_t menuItem = { CSteamID(), LobbyMenuItem_t::k_ELobbyMenuItemLeaveLobby };\n   31  \t\t\tAddMenuItem( CLobbyMenu::MenuItem_t( \"Lobby Disconnected - Return to main menu\", menuItem ) );\n   32  \t\t\treturn;\n   ..\n   38  \t\tfor ( int i = 0; i < cLobbyMembers; i++ )\n   39  \t\t{\n   40: \t\t\tCSteamID steamIDLobbyMember = SteamMatchmaking()->GetLobbyMemberByIndex( steamIDLobby, i ) ;\n   41  \n   42  \t\t\t// we get the details of a user from the ISteamFriends interface\n   ..\n   61  \t\t\tconst char *pchReady = SteamMatchmaking()->GetLobbyMemberData( steamIDLobby, SteamUser()->GetSteamID(), \"ready\" );\n   62  \t\t\tbool bReady = ( pchReady && atoi( pchReady ) == 1 );\n   63: \t\t\tLobbyMenuItem_t menuItem = { CSteamID(), LobbyMenuItem_t::k_ELobbyMenuItemToggleReadState };\n   64  \t\t\tif ( bReady )\n   65  \t\t\t\tAddMenuItem( CLobbyMenu::MenuItem_t( \"Set myself as Not Ready\", menuItem ) );\n   ..\n   78  \t\tif ( bLobbyOwner )\n   79  \t\t{\n   80: \t\t\tLobbyMenuItem_t menuItem = { CSteamID(), LobbyMenuItem_t::k_ELobbyMenuItemStartGame };\n   81  \t\t\tAddMenuItem( CLobbyMenu::MenuItem_t( \"Start game\", menuItem ) );\n   82  \t\t}\n   ..\n   84  \t\t// invite friend\n   85  \t\t{\n   86: \t\t\tLobbyMenuItem_t menuItem = { CSteamID(), LobbyMenuItem_t::k_ELobbyMenuItemInviteToLobby, steamIDLobby };\n   87  \t\t\tAddMenuItem( CLobbyMenu::MenuItem_t( \"Invite Friend\", menuItem ) );\n   88  \t\t}\n   ..\n   91  \t\t// exit lobby\n   92  \t\t{\n   93: \t\t\tLobbyMenuItem_t menuItem = { CSteamID(), LobbyMenuItem_t::k_ELobbyMenuItemLeaveLobby };\n   94  \t\t\tAddMenuItem( CLobbyMenu::MenuItem_t( \"Return to main menu\", menuItem ) );\n   95  \t\t}\n   ..\n  126  // Purpose: Sets the ID of the lobby to display\n  127  //-----------------------------------------------------------------------------\n  128: void CLobby::SetLobbySteamID( const CSteamID &steamIDLobby )\n  129  {\n  130  \tm_steamIDLobby = steamIDLobby;\n  ...\n  192  \t{\n  193  \t\t// we've left the lobby, so it is now invalid\n  194: \t\tm_steamIDLobby = CSteamID();\n  195  \t}\n  196  \n  ...\n  202  \tfor ( int i = 0; i < cLobbyMembers; i++ )\n  203  \t{\n  204: \t\tCSteamID steamIDLobbyMember = SteamMatchmaking()->GetLobbyMemberByIndex( m_steamIDLobby, i ) ;\n  205  \n  206  \t\t// ignore yourself.\n  ...\n  330  \tfor ( uint32 iLobby = 0; iLobby < pCallback->m_nLobbiesMatching; iLobby++ )\n  331  \t{\n  332: \t\tCSteamID steamIDLobby = SteamMatchmaking()->GetLobbyByIndex( iLobby );\n  333  \n  334  \t\t// add the lobby to the list\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\steamworksexample\\Lobby.h:\n   29  \n   30  \t// sets which lobby to display\n   31: \tvoid SetLobbySteamID( const CSteamID &steamIDLobby );\n   32  \n   33  \t// Run a frame (to handle KB input and such as well as render)\n   ..\n   35  \n   36  private:\n   37: \tCSteamID m_steamIDLobby;\n   38  \n   39  \t// Pointer to engine instance (so we can draw stuff)\n   ..\n   55  struct Lobby_t\n   56  {\n   57: \tCSteamID m_steamIDLobby;\n   58  \tchar m_rgchName[256];\n   59  };\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\steamworksexample\\Messages.h:\n  197  \tuint32 GetDataLength() const { return LittleDWord( m_uDataLength ); }\n  198  \n  199: \tvoid SetSteamID(CSteamID steamID) { from_steamID = steamID; }\n  200: \tCSteamID GetSteamID() const { return from_steamID; }\n  201  \n  202  private:\n  203  \tconst DWORD m_dwMessageType;\n  204  \tuint32 m_uDataLength;\n  205: \tCSteamID from_steamID;\n  206  };\n  207  \n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\steamworksexample\\p2pauth.cpp:\n   14  // Purpose: constructor\n   15  //-----------------------------------------------------------------------------\n   16: CP2PAuthPlayer::CP2PAuthPlayer( IGameEngine *pGameEngine, CSteamID steamID, HSteamNetConnection hServerConn )\n   17  : m_CallbackBeginAuthResponse( this, &CP2PAuthPlayer::OnBeginAuthResponse )\n   18  , m_steamID( steamID )\n   ..\n  167  // Purpose: utility wrapper\n  168  //-----------------------------------------------------------------------------\n  169: CSteamID CP2PAuthPlayer::GetSteamID()\n  170  {\n  171  \treturn SteamUser()->GetSteamID();\n  ...\n  223  // Purpose: initialize player\n  224  //-----------------------------------------------------------------------------\n  225: void CP2PAuthedGame::InternalInitPlayer( int iSlot, CSteamID steamID, bool bStartAuthProcess )\n  226  {\n  227  \tchar rgch[128];\n  ...\n  239  //\t\t\treciprocate\n  240  //-----------------------------------------------------------------------------\n  241: void CP2PAuthedGame::RegisterPlayer( int iSlot, CSteamID steamID )\n  242  {\n  243  \tif (iSlot < MAX_PLAYERS_PER_SERVER)\n  ...\n  248  //\t\t\the will reciprocate\n  249  //-----------------------------------------------------------------------------\n  250: void CP2PAuthedGame::StartAuthPlayer( int iSlot, CSteamID steamID )\n  251  {\n  252  \tif (iSlot < MAX_PLAYERS_PER_SERVER)\n  ...\n  275  // Purpose: utility wrapper\n  276  //-----------------------------------------------------------------------------\n  277: CSteamID CP2PAuthedGame::GetSteamID()\n  278  {\n  279  \treturn SteamUser()->GetSteamID();\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\steamworksexample\\p2pauth.h:\n   11  class CP2PAuthPlayer;\n   12  \n   13: bool SendAuthTicketToConnection( CSteamID steamIDFrom, HSteamNetConnection hConnectionTo, uint32 cubTicket, uint8 *pubTicket );\n   14  \n   15  //-----------------------------------------------------------------------------\n   ..\n   19  {\n   20  public:\n   21: \tCP2PAuthPlayer( IGameEngine *pGameEngine, CSteamID steamID, HSteamNetConnection hServerConn );\n   22  \t~CP2PAuthPlayer();\n   23  \tvoid EndGame();\n   ..\n   26  \tvoid HandleP2PSendingTicket( const MsgP2PSendingTicket_t *pMsg );\n   27  \n   28: \tCSteamID GetSteamID();\n   29  \n   30  \tSTEAM_CALLBACK( CP2PAuthPlayer, OnBeginAuthResponse, ValidateAuthTicketResponse_t, m_CallbackBeginAuthResponse );\n   31  \n   32: \tconst CSteamID m_steamID;\n   33  \tconst HSteamNetConnection m_hServerConnection;\n   34  private:\n   ..\n   63  \tvoid PlayerDisconnect( int iSlot );\n   64  \tvoid EndGame();\n   65: \tvoid StartAuthPlayer( int iSlot, CSteamID steamID );\n   66: \tvoid RegisterPlayer( int iSlot, CSteamID steamID );\n   67  \tvoid HandleP2PSendingTicket( const void *pMessage );\n   68: \tCSteamID GetSteamID();\n   69: \tvoid InternalInitPlayer( int iSlot, CSteamID steamID, bool bStartAuthProcess );\n   70  \n   71  \tCP2PAuthPlayer *m_rgpP2PAuthPlayer[MAX_PLAYERS_PER_SERVER];\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\steamworksexample\\ServerBrowser.h:\n   32  \n   33  \tint32 GetPort() { return m_nConnectionPort; }\n   34: \tCSteamID GetSteamID()\t{ return m_steamID; }\n   35  \n   36  private:\n   ..\n   48  \tchar m_szServerName[64];\t\t// Game server name\n   49  \tchar m_szServerString[128];\t\t// String to show in server browser\n   50: \tCSteamID m_steamID;\n   51  };\n   52  \n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\steamworksexample\\SpaceWarClient.cpp:\n  271  \tif ( m_hConnServer != k_HSteamNetConnection_Invalid )\n  272  \t\tSteamNetworkingSockets()->CloseConnection( m_hConnServer, EDisconnectReason::k_EDRClientDisconnect, nullptr, false );\n  273: \tm_steamIDGameServer = CSteamID();\n  274  \tm_hConnServer = k_HSteamNetConnection_Invalid;\n  275  }\n  ...\n  279  // Purpose: Receive basic server info from the server after we initiate a connection\n  280  //-----------------------------------------------------------------------------\n  281: void CSpaceWarClient::OnReceiveServerInfo( CSteamID steamIDGameServer, bool bVACSecure, const char *pchServerName )\n  282  {\n  283  \tm_eConnectedStatus = k_EClientConnectedPendingAuthentication;\n  ...\n  428  \t\t\tfor( uint32 i=1; i < MAX_PLAYERS_PER_SERVER; ++i )\n  429  \t\t\t{\n  430: \t\t\t\tCSteamID steamIDNew( pUpdateData->GetPlayerSteamID(i) );\n  431  \t\t\t\tif ( steamIDNew == SteamUser()->GetSteamID() )\n  432  \t\t\t\t{\n  ...\n  449  \t\t{\n  450  \t\t\t// i am just a client, i need to auth the game owner ( slot 0 )\n  451: \t\t\tCSteamID steamIDNew( pUpdateData->GetPlayerSteamID( 0 ) );\n  452  \t\t\tif ( steamIDNew == SteamUser()->GetSteamID() )\n  453  \t\t\t{\n  ...\n  611  // Purpose: Initiates a connection to a server via P2P (NAT-traversing) connection\n  612  //-----------------------------------------------------------------------------\n  613: void CSpaceWarClient::InitiateServerConnection( CSteamID steamIDGameServer )\n  614  {\n  615  \tif ( m_eGameState == k_EClientInLobby && m_steamIDLobby.IsValid() )\n  ...\n  729  \n  730  \t\t\t// pull the IP address of the user from the socket\n  731: \t\t\tOnReceiveServerInfo(CSteamID(pMsg->GetSteamIDServer()), pMsg->GetSecure(), pMsg->GetServerName());\n  732  \t\t}\n  733  \t\tbreak;\n  ...\n  941  \n  942  \t// join the game server specified, via whichever method we can\n  943: \tif ( CSteamID( pCallback->m_ulSteamIDGameServer ).IsValid() )\n  944  \t{\n  945: \t\tInitiateServerConnection( CSteamID( pCallback->m_ulSteamIDGameServer ) );\n  946  \t}\n  947  }\n  ...\n  965  \t\t// leave the lobby\n  966  \t\tSteamMatchmaking()->LeaveLobby( m_steamIDLobby );\n  967: \t\tm_steamIDLobby = CSteamID();\n  968  \n  969  \t\t// return to main menu\n  ...\n 1873  \t\t// and on ourself.\n 1874  \t\tchar rgchPlayerName[128];\n 1875: \t\tCSteamID playerSteamID( m_rgSteamIDPlayers[i] );\n 1876  \n 1877  \t\tconst char *pszVoiceState = m_pVoiceChat->IsPlayerTalking( playerSteamID ) ? \"(VoiceChat)\" : \"\";\n ....\n 2285  \t\t\tOutputDebugString( \"Ticket for wrong app id\\n\" );\n 2286  \n 2287: \t\tCSteamID steamIDFromTicket;\n 2288  \t\tSteamEncryptedAppTicket_GetTicketSteamID( rgubDecrypted, cubDecrypted, &steamIDFromTicket );\n 2289  \t\tif ( steamIDFromTicket != SteamUser()->GetSteamID() )\n ....\n 2357  \tif ( pchLobbyID )\n 2358  \t{\n 2359: \t\tCSteamID steamIDLobby( (uint64)atoll( pchLobbyID ) );\n 2360  \t\tif ( steamIDLobby.IsValid() )\n 2361  \t\t{\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\steamworksexample\\SpaceWarClient.h:\n   57  {\n   58  \tEClientGameState m_eStateToTransitionTo;\n   59: \tCSteamID m_steamIDGameServer;\n   60  };\n   61  \n   ..\n   63  struct LobbyBrowserMenuItem_t\n   64  {\n   65: \tCSteamID m_steamIDLobby;\n   66  \tEClientGameState m_eStateToTransitionTo;\n   67  };\n   ..\n   79  \t};\n   80  \n   81: \tCSteamID m_steamIDUser;\t\t// the user who this is in the lobby\n   82  \tELobbyMenuItemCommand m_eCommand;\n   83: \tCSteamID m_steamIDLobby;\t// set if k_ELobbyMenuItemInviteToLobby\t\n   84  };\n   85  \n   ..\n   94  struct FriendsListMenuItem_t\n   95  {\n   96: \tCSteamID m_steamIDFriend;\n   97  };\n   98  \n   ..\n  153  \n  154  \t// Connect to a server at a given IP address or game server steamID\n  155: \tvoid InitiateServerConnection( CSteamID steamIDGameServer );\n  156  \tvoid InitiateServerConnection( uint32 unServerAddress, const int32 nPort );\n  157  \n  ...\n  207  \n  208  \t// Get the steam id for the local user at this client\n  209: \tCSteamID GetLocalSteamID() { return m_SteamIDLocalUser; }\n  210  \n  211  \t// Get the local players name\n  ...\n  228  \n  229  \t// Receive a response from the server for a connection attempt\n  230: \tvoid OnReceiveServerInfo( CSteamID steamIDGameServer, bool bVACSecure, const char *pchServerName );\n  231  \n  232  \t// Receive a response from the server for a connection attempt\n  ...\n  293  \n  294  \t// SteamID for the local user on this client\n  295: \tCSteamID m_SteamIDLocalUser;\n  296  \n  297  \t// Our ship position in the array below\n  ...\n  299  \n  300  \t// List of steamIDs for each player\n  301: \tCSteamID m_rgSteamIDPlayers[MAX_PLAYERS_PER_SERVER];\n  302  \n  303  \t// Ships for players, doubles as a way to check for open slots (pointer is NULL meaning open)\n  ...\n  341  \n  342  \t// Server address data\n  343: \tCSteamID m_steamIDGameServer;\n  344  \tuint32 m_unServerIP;\n  345  \tuint16 m_usServerPort;\n  ...\n  436  \t// lobby handling\n  437  \t// the name of the lobby we're connected to\n  438: \tCSteamID m_steamIDLobby;\n  439  \t// callback for when we're creating a new lobby\n  440  \tvoid OnLobbyCreated( LobbyCreated_t *pCallback, bool bIOFailure );\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\steamworksexample\\SpaceWarServer.cpp:\n  276  // Purpose: Handle a new client connecting\n  277  //-----------------------------------------------------------------------------\n  278: void CSpaceWarServer::OnClientBeginAuthentication(CSteamID steamIDClient, HSteamNetConnection connectionID, void* pToken, uint32 uTokenLen)\n  279  {\n  280  \t// First, check this isn't a duplicate and we already have a user logged on from the same steamid\n  ...\n  327  \t\t\tm_rgPendingClientData[i].m_bActive = true;\n  328  \t\t\t// we need to tell the server our Steam id in the non-auth case, so we stashed it in the login message, pull it back out\n  329: \t\t\tm_rgPendingClientData[i].m_SteamIDUser = *(CSteamID*)pToken;\n  330  \t\t\tm_rgPendingClientData[i].m_connection = connectionID;\n  331  \t\t\t// You would typically do your own authentication method here and later call OnAuthCompleted\n  ...\n  558  \t{\n  559  \t\tSteamNetworkingMessage_t* message = msgs[idxMsg];\n  560: \t\tCSteamID steamIDRemote = message->m_identityPeer.GetSteamID();\n  561  \t\tHSteamNetConnection connection = message->m_conn;\n  562  \n  ...\n  630  \t\t\tMsgP2PSendingTicket_t msgP2PSendingTicket;\n  631  \t\t\tmemcpy(&msgP2PSendingTicket, message->GetData(), sizeof(MsgP2PSendingTicket_t));\n  632: \t\t\tCSteamID toSteamID = msgP2PSendingTicket.GetSteamID();\n  633  \n  634  \t\t\tHSteamNetConnection toHConn = 0;\n  ...\n 1074  // Purpose: Returns the SteamID of the game server\n 1075  //-----------------------------------------------------------------------------\n 1076: CSteamID CSpaceWarServer::GetSteamID()\n 1077  {\n 1078  #ifdef USE_GS_AUTH_API\n ....\n 1088  // Purpose: Kicks a player off the server\n 1089  //-----------------------------------------------------------------------------\n 1090: void CSpaceWarServer::KickPlayerOffServer( CSteamID steamID )\n 1091  {\n 1092  \tuint32 uPlayerCount = 0;\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\steamworksexample\\SpaceWarServer.h:\n   25  {\n   26  \tbool m_bActive;\t\t\t\t\t// Is this slot in use? Or is it available for new connections?\n   27: \tCSteamID m_SteamIDUser;\t\t\t// What is the steamid of the player?\n   28  \tuint64 m_ulTickCountLastData;\t// What was the last time we got data from the player?\n   29  \tHSteamNetConnection m_hConn;\t// The handle for the connection to the player\n   ..\n   58  \n   59  \t// Kicks a given player off the server\n   60: \tvoid KickPlayerOffServer( CSteamID steamID );\n   61  \n   62  \t// data accessors\n   63  \tbool IsConnectedToSteam()\t\t{ return m_bConnectedToSteam; }\n   64: \tCSteamID GetSteamID();\n   65  \n   66  private:\n   ..\n  107  \tbool BSendDataToPendingClient( uint32 uShipIndex, char *pData, uint32 nSizeOfData );\n  108  \n  109: \tvoid OnClientBeginAuthentication(CSteamID steamIDClient, HSteamNetConnection connectionID, void* pToken, uint32 uTokenLen);\n  110  \t// Handles authentication completing for a client\n  111  \tvoid OnAuthCompleted( bool bAuthSuccess, uint32 iPendingAuthIndex );\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\steamworksexample\\voicechat.cpp:\n   85  {\n   86  \tconst MsgVoiceChatData_t *pMsgVoiceData = (const MsgVoiceChatData_t *) pMessage; \n   87: \tCSteamID fromSteamID = pMsgVoiceData->GetSteamID();\n   88  \n   89  \tstd::map< uint64, VoiceChatConnection_t >::iterator iter;\n   ..\n  133  // Purpose: \n  134  //-----------------------------------------------------------------------------\n  135: void CVoiceChat::MarkPlayerAsActive( CSteamID steamID )\n  136  {\n  137  \tif ( !m_bIsActive )\n  ...\n  168  // Purpose: \n  169  //-----------------------------------------------------------------------------\n  170: bool CVoiceChat::IsPlayerTalking( CSteamID steamID )\n  171  {\n  172  \n  ...\n  225  \t\tfor( iter = m_MapConnections.begin(); iter != m_MapConnections.end(); ++iter )\n  226  \t\t{\n  227: \t\t\tCSteamID steamID( iter->first );\n  228  \t\t\tm_pGameEngine->DestroyVoiceChannel( iter->second.hVoiceChannel );\n  229  \t\t}\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\steamworksexample\\voicechat.h:\n   33  \t// chat control\n   34  \tvoid MarkAllPlayersInactive();\n   35: \tvoid MarkPlayerAsActive( CSteamID steamID );\n   36  \n   37: \tbool IsPlayerTalking( CSteamID steamID );\n   38  \n   39  \t// chat engine\n   ..\n   51  \tstd::map< uint64, VoiceChatConnection_t > m_MapConnections;\n   52  \n   53: \tCSteamID m_SteamIDLocalUser; // ourself\n   54  \tbool m_bIsActive;\t// is voice chat system active\n   55  \tuint64 m_ulLastTimeTalked; // last time we've talked ourself\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\tools\\ContentBuilder\\builder_linux\\linux32\\steamcmd:\n    <binary>\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\tools\\ContentBuilder\\builder_osx\\crashhandler.dylib:\n    <binary>\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\tools\\ContentBuilder\\builder_osx\\steamcmd:\n    <binary>\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\src\\steam_types.jai:\n    9  //\n   10  \n   11: CSteamID :: u64;\n   12  \n   13  EGameIDType :: enum {\n   ..\n   30  }\n   31  \n   32: IsValid :: (steam_id: CSteamID) -> bool {\n   33  \treturn steam_id != 0; // @TODO @Urgent this is not right\n   34  }\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\src-autogen\\api_flat.jai:\n  108  GetFriendsGroupName :: (self: *ISteamFriends, friendsGroupID: FriendsGroupID_t) -> *char #foreign steam \"SteamAPI_ISteamFriends_GetFriendsGroupName\";\n  109  GetFriendsGroupMembersCount :: (self: *ISteamFriends, friendsGroupID: FriendsGroupID_t) -> s32 #foreign steam \"SteamAPI_ISteamFriends_GetFriendsGroupMembersCount\";\n  110: GetFriendsGroupMembersList :: (self: *ISteamFriends, friendsGroupID: FriendsGroupID_t, pOutSteamIDMembers: *CSteamID, nMembersCount: s32) #foreign steam \"SteamAPI_ISteamFriends_GetFriendsGroupMembersList\";\n  111  HasFriend :: (self: *ISteamFriends, steamIDFriend: uint64_steamid, iFriendFlags: EFriendFlags) -> bool #foreign steam \"SteamAPI_ISteamFriends_HasFriend\";\n  112  GetClanCount :: (self: *ISteamFriends) -> s32 #foreign steam \"SteamAPI_ISteamFriends_GetClanCount\";\n  ...\n  115  GetClanTag :: (self: *ISteamFriends, steamIDClan: uint64_steamid) -> *char #foreign steam \"SteamAPI_ISteamFriends_GetClanTag\";\n  116  GetClanActivityCounts :: (self: *ISteamFriends, steamIDClan: uint64_steamid, pnOnline: *s32, pnInGame: *s32, pnChatting: *s32) -> bool #foreign steam \"SteamAPI_ISteamFriends_GetClanActivityCounts\";\n  117: DownloadClanActivityCounts :: (self: *ISteamFriends, psteamIDClans: *CSteamID, cClansToRequest: s32) -> SteamAPICall_t #must #foreign steam \"SteamAPI_ISteamFriends_DownloadClanActivityCounts\";\n  118  GetFriendCountFromSource :: (self: *ISteamFriends, steamIDSource: uint64_steamid) -> s32 #foreign steam \"SteamAPI_ISteamFriends_GetFriendCountFromSource\";\n  119  GetFriendFromSourceByIndex :: (self: *ISteamFriends, steamIDSource: uint64_steamid, iFriend: s32) -> uint64_steamid #foreign steam \"SteamAPI_ISteamFriends_GetFriendFromSourceByIndex\";\n  ...\n  151  GetChatMemberByIndex :: (self: *ISteamFriends, steamIDClan: uint64_steamid, iUser: s32) -> uint64_steamid #foreign steam \"SteamAPI_ISteamFriends_GetChatMemberByIndex\";\n  152  SendClanChatMessage :: (self: *ISteamFriends, steamIDClanChat: uint64_steamid, pchText: *char) -> bool #foreign steam \"SteamAPI_ISteamFriends_SendClanChatMessage\";\n  153: GetClanChatMessage :: (self: *ISteamFriends, steamIDClanChat: uint64_steamid, iMessage: s32, prgchText: *void, cchTextMax: s32, peChatEntryType: *EChatEntryType, psteamidChatter: *CSteamID) -> s32 #foreign steam \"SteamAPI_ISteamFriends_GetClanChatMessage\";\n  154  IsClanChatAdmin :: (self: *ISteamFriends, steamIDClanChat: uint64_steamid, steamIDUser: uint64_steamid) -> bool #foreign steam \"SteamAPI_ISteamFriends_IsClanChatAdmin\";\n  155  IsClanChatWindowOpenInSteam :: (self: *ISteamFriends, steamIDClanChat: uint64_steamid) -> bool #foreign steam \"SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam\";\n  ...\n  234  SetLobbyMemberData :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, pchKey: *char, pchValue: *char) #foreign steam \"SteamAPI_ISteamMatchmaking_SetLobbyMemberData\";\n  235  SendLobbyChatMsg :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, pvMsgBody: *void, cubMsgBody: s32) -> bool #foreign steam \"SteamAPI_ISteamMatchmaking_SendLobbyChatMsg\";\n  236: GetLobbyChatEntry :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, iChatID: s32, pSteamIDUser: *CSteamID, pvData: *void, cubData: s32, peChatEntryType: *EChatEntryType) -> s32 #foreign steam \"SteamAPI_ISteamMatchmaking_GetLobbyChatEntry\";\n  237  RequestLobbyData :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid) -> bool #foreign steam \"SteamAPI_ISteamMatchmaking_RequestLobbyData\";\n  238  SetLobbyGameServer :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, unGameServerIP: uint32, unGameServerPort: uint16, steamIDGameServer: uint64_steamid) #foreign steam \"SteamAPI_ISteamMatchmaking_SetLobbyGameServer\";\n  239: GetLobbyGameServer :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, punGameServerIP: *uint32, punGameServerPort: *uint16, psteamIDGameServer: *CSteamID) -> bool #foreign steam \"SteamAPI_ISteamMatchmaking_GetLobbyGameServer\";\n  240  SetLobbyMemberLimit :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, cMaxMembers: s32) -> bool #foreign steam \"SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit\";\n  241  GetLobbyMemberLimit :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid) -> s32 #foreign steam \"SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit\";\n  ...\n  306  GetNumActiveBeacons :: (self: *ISteamParties) -> uint32 #foreign steam \"SteamAPI_ISteamParties_GetNumActiveBeacons\";\n  307  GetBeaconByIndex :: (self: *ISteamParties, unIndex: uint32) -> PartyBeaconID_t #foreign steam \"SteamAPI_ISteamParties_GetBeaconByIndex\";\n  308: GetBeaconDetails :: (self: *ISteamParties, ulBeaconID: PartyBeaconID_t, pSteamIDBeaconOwner: *CSteamID, pLocation: *SteamPartyBeaconLocation_t, pchMetadata: *char, cchMetadata: s32) -> bool #foreign steam \"SteamAPI_ISteamParties_GetBeaconDetails\";\n  309  JoinParty :: (self: *ISteamParties, ulBeaconID: PartyBeaconID_t) -> SteamAPICall_t #must #foreign steam \"SteamAPI_ISteamParties_JoinParty\";\n  310  GetNumAvailableBeaconLocations :: (self: *ISteamParties, puNumLocations: *uint32) -> bool #foreign steam \"SteamAPI_ISteamParties_GetNumAvailableBeaconLocations\";\n  ...\n  345  UGCDownload :: (self: *ISteamRemoteStorage, hContent: UGCHandle_t, unPriority: uint32) -> SteamAPICall_t #must #foreign steam \"SteamAPI_ISteamRemoteStorage_UGCDownload\";\n  346  GetUGCDownloadProgress :: (self: *ISteamRemoteStorage, hContent: UGCHandle_t, pnBytesDownloaded: *int32, pnBytesExpected: *int32) -> bool #foreign steam \"SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress\";\n  347: GetUGCDetails :: (self: *ISteamRemoteStorage, hContent: UGCHandle_t, pnAppID: *AppId_t, ppchName: **char, pnFileSizeInBytes: *int32, pSteamIDOwner: *CSteamID) -> bool #foreign steam \"SteamAPI_ISteamRemoteStorage_GetUGCDetails\";\n  348  UGCRead :: (self: *ISteamRemoteStorage, hContent: UGCHandle_t, pvData: *void, cubDataToRead: int32, cOffset: uint32, eAction: EUGCReadAction) -> int32 #foreign steam \"SteamAPI_ISteamRemoteStorage_UGCRead\";\n  349  GetCachedUGCCount :: (self: *ISteamRemoteStorage) -> int32 #foreign steam \"SteamAPI_ISteamRemoteStorage_GetCachedUGCCount\";\n  ...\n  406  GetLeaderboardDisplayType :: (self: *ISteamUserStats, hSteamLeaderboard: SteamLeaderboard_t) -> ELeaderboardDisplayType #foreign steam \"SteamAPI_ISteamUserStats_GetLeaderboardDisplayType\";\n  407  DownloadLeaderboardEntries :: (self: *ISteamUserStats, hSteamLeaderboard: SteamLeaderboard_t, eLeaderboardDataRequest: ELeaderboardDataRequest, nRangeStart: s32, nRangeEnd: s32) -> SteamAPICall_t #must #foreign steam \"SteamAPI_ISteamUserStats_DownloadLeaderboardEntries\";\n  408: DownloadLeaderboardEntriesForUsers :: (self: *ISteamUserStats, hSteamLeaderboard: SteamLeaderboard_t, prgUsers: *CSteamID, cUsers: s32) -> SteamAPICall_t #must #foreign steam \"SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers\";\n  409  GetDownloadedLeaderboardEntry :: (self: *ISteamUserStats, hSteamLeaderboardEntries: SteamLeaderboardEntries_t, index: s32, pLeaderboardEntry: *LeaderboardEntry_t, pDetails: *int32, cDetailsMax: s32) -> bool #foreign steam \"SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry\";\n  410  UploadLeaderboardScore :: (self: *ISteamUserStats, hSteamLeaderboard: SteamLeaderboard_t, eLeaderboardUploadScoreMethod: ELeaderboardUploadScoreMethod, nScore: int32, pScoreDetails: *int32, cScoreDetailsCount: s32) -> SteamAPICall_t #must #foreign steam \"SteamAPI_ISteamUserStats_UploadLeaderboardScore\";\n  ...\n  461  SendP2PPacket :: (self: *ISteamNetworking, steamIDRemote: uint64_steamid, pubData: *void, cubData: uint32, eP2PSendType: EP2PSend, nChannel: s32) -> bool #foreign steam \"SteamAPI_ISteamNetworking_SendP2PPacket\";\n  462  IsP2PPacketAvailable :: (self: *ISteamNetworking, pcubMsgSize: *uint32, nChannel: s32) -> bool #foreign steam \"SteamAPI_ISteamNetworking_IsP2PPacketAvailable\";\n  463: ReadP2PPacket :: (self: *ISteamNetworking, pubDest: *void, cubDest: uint32, pcubMsgSize: *uint32, psteamIDRemote: *CSteamID, nChannel: s32) -> bool #foreign steam \"SteamAPI_ISteamNetworking_ReadP2PPacket\";\n  464  AcceptP2PSessionWithUser :: (self: *ISteamNetworking, steamIDRemote: uint64_steamid) -> bool #foreign steam \"SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser\";\n  465  CloseP2PSessionWithUser :: (self: *ISteamNetworking, steamIDRemote: uint64_steamid) -> bool #foreign steam \"SteamAPI_ISteamNetworking_CloseP2PSessionWithUser\";\n  ...\n  477  IsDataAvailable :: (self: *ISteamNetworking, hListenSocket: SNetListenSocket_t, pcubMsgSize: *uint32, phSocket: *SNetSocket_t) -> bool #foreign steam \"SteamAPI_ISteamNetworking_IsDataAvailable\";\n  478  RetrieveData :: (self: *ISteamNetworking, hListenSocket: SNetListenSocket_t, pubDest: *void, cubDest: uint32, pcubMsgSize: *uint32, phSocket: *SNetSocket_t) -> bool #foreign steam \"SteamAPI_ISteamNetworking_RetrieveData\";\n  479: GetSocketInfo :: (self: *ISteamNetworking, hSocket: SNetSocket_t, pSteamIDRemote: *CSteamID, peSocketStatus: *s32, punIPRemote: *SteamIPAddress_t, punPortRemote: *uint16) -> bool #foreign steam \"SteamAPI_ISteamNetworking_GetSocketInfo\";\n  480  GetListenSocketInfo :: (self: *ISteamNetworking, hListenSocket: SNetListenSocket_t, pnIP: *SteamIPAddress_t, pnPort: *uint16) -> bool #foreign steam \"SteamAPI_ISteamNetworking_GetListenSocketInfo\";\n  481  GetSocketConnectionType :: (self: *ISteamNetworking, hSocket: SNetSocket_t) -> ESNetSocketConnectionType #foreign steam \"SteamAPI_ISteamNetworking_GetSocketConnectionType\";\n  ...\n  965  SetGameData :: (self: *ISteamGameServer, pchGameData: *char) #foreign steam \"SteamAPI_ISteamGameServer_SetGameData\";\n  966  SetRegion :: (self: *ISteamGameServer, pszRegion: *char) #foreign steam \"SteamAPI_ISteamGameServer_SetRegion\";\n  967: SendUserConnectAndAuthenticate :: (self: *ISteamGameServer, unIPClient: uint32, pvAuthBlob: *void, cubAuthBlobSize: uint32, pSteamIDUser: *CSteamID) -> bool #foreign steam \"SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate\";\n  968  CreateUnauthenticatedUserConnection :: (self: *ISteamGameServer) -> uint64_steamid #foreign steam \"SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection\";\n  969  SendUserDisconnect :: (self: *ISteamGameServer, steamIDUser: uint64_steamid) #foreign steam \"SteamAPI_ISteamGameServer_SendUserDisconnect\";\n  ...\n 1088  \n 1089  \n 1090: uint64_steamid :: uint64; // Used when passing or returning CSteamID\n 1091  uint64_gameid :: uint64; // Used when passing or return CGameID\n 1092  \n ....\n 1165      k_iCallback : s32 : 143;\n 1166      union {\n 1167:         m_SteamID : CSteamID;\n 1168:         SteamID : CSteamID;\n 1169      }\n 1170      union {\n ....\n 1173      }\n 1174      union {\n 1175:         m_OwnerSteamID : CSteamID;\n 1176:         OwnerSteamID : CSteamID;\n 1177      }\n 1178  }\n ....\n 1316      k_iCallback : s32 : 333;\n 1317      union {\n 1318:         m_steamIDLobby : CSteamID;\n 1319:         SteamIDLobby : CSteamID;\n 1320      }\n 1321      union {\n 1322:         m_steamIDFriend : CSteamID;\n 1323:         SteamIDFriend : CSteamID;\n 1324      }\n 1325  }\n ....\n 1328      k_iCallback : s32 : 334;\n 1329      union {\n 1330:         m_steamID : CSteamID;\n 1331:         SteamID : CSteamID;\n 1332      }\n 1333      union {\n ....\n 1348      k_iCallback : s32 : 335;\n 1349      union {\n 1350:         m_steamIDClan : CSteamID;\n 1351:         SteamIDClan : CSteamID;\n 1352      }\n 1353      union {\n ....\n 1364      k_iCallback : s32 : 336;\n 1365      union {\n 1366:         m_steamIDFriend : CSteamID;\n 1367:         SteamIDFriend : CSteamID;\n 1368      }\n 1369      union {\n ....\n 1376      k_iCallback : s32 : 337;\n 1377      union {\n 1378:         m_steamIDFriend : CSteamID;\n 1379:         SteamIDFriend : CSteamID;\n 1380      }\n 1381      union {\n ....\n 1388      k_iCallback : s32 : 338;\n 1389      union {\n 1390:         m_steamIDClanChat : CSteamID;\n 1391:         SteamIDClanChat : CSteamID;\n 1392      }\n 1393      union {\n 1394:         m_steamIDUser : CSteamID;\n 1395:         SteamIDUser : CSteamID;\n 1396      }\n 1397      union {\n ....\n 1404      k_iCallback : s32 : 339;\n 1405      union {\n 1406:         m_steamIDClanChat : CSteamID;\n 1407:         SteamIDClanChat : CSteamID;\n 1408      }\n 1409      union {\n 1410:         m_steamIDUser : CSteamID;\n 1411:         SteamIDUser : CSteamID;\n 1412      }\n 1413  }\n ....\n 1416      k_iCallback : s32 : 340;\n 1417      union {\n 1418:         m_steamIDClanChat : CSteamID;\n 1419:         SteamIDClanChat : CSteamID;\n 1420      }\n 1421      union {\n 1422:         m_steamIDUser : CSteamID;\n 1423:         SteamIDUser : CSteamID;\n 1424      }\n 1425      union {\n ....\n 1444      k_iCallback : s32 : 342;\n 1445      union {\n 1446:         m_steamIDClanChat : CSteamID;\n 1447:         SteamIDClanChat : CSteamID;\n 1448      }\n 1449      union {\n ....\n 1456      k_iCallback : s32 : 343;\n 1457      union {\n 1458:         m_steamIDUser : CSteamID;\n 1459:         SteamIDUser : CSteamID;\n 1460      }\n 1461      union {\n ....\n 1472      }\n 1473      union {\n 1474:         m_steamID : CSteamID;\n 1475:         SteamID : CSteamID;\n 1476      }\n 1477      union {\n ....\n 1488      }\n 1489      union {\n 1490:         m_steamID : CSteamID;\n 1491:         SteamID : CSteamID;\n 1492      }\n 1493      union {\n ....\n 1504      }\n 1505      union {\n 1506:         m_rgSteamID : [50] CSteamID ;\n 1507:         SteamID : [50] CSteamID ;\n 1508      }\n 1509      union {\n ....\n 1778      }\n 1779      union {\n 1780:         m_steamIDLobby : CSteamID;\n 1781:         SteamIDLobby : CSteamID;\n 1782      }\n 1783  }\n ....\n 1802      }\n 1803      union {\n 1804:         m_lobbyID : CSteamID;\n 1805:         LobbyID : CSteamID;\n 1806      }\n 1807      union {\n 1808:         m_steamIDEndedSearch : CSteamID;\n 1809:         SteamIDEndedSearch : CSteamID;\n 1810      }\n 1811      union {\n ....\n 1838      }\n 1839      union {\n 1840:         m_steamIDHost : CSteamID;\n 1841:         SteamIDHost : CSteamID;\n 1842      }\n 1843      union {\n ....\n 1870      }\n 1871      union {\n 1872:         m_SteamIDPlayerFound : CSteamID;\n 1873:         SteamIDPlayerFound : CSteamID;\n 1874      }\n 1875      union {\n 1876:         m_SteamIDLobby : CSteamID;\n 1877:         SteamIDLobby : CSteamID;\n 1878      }\n 1879      union {\n ....\n 1926      }\n 1927      ullUniqueGameID : uint64;\n 1928:     steamIDPlayer : CSteamID;\n 1929  }\n 1930  \n ....\n 1949      }\n 1950      union {\n 1951:         m_SteamIDBeaconOwner : CSteamID;\n 1952:         SteamIDBeaconOwner : CSteamID;\n 1953      }\n 1954      union {\n ....\n 1977      }\n 1978      union {\n 1979:         m_steamIDJoiner : CSteamID;\n 1980:         SteamIDJoiner : CSteamID;\n 1981      }\n 1982  }\n ....\n 2565      }\n 2566      union {\n 2567:         m_steamIDUser : CSteamID;\n 2568:         SteamIDUser : CSteamID;\n 2569      }\n 2570  }\n ....\n 2677      k_iCallback : s32 : 1108;\n 2678      union {\n 2679:         m_steamIDUser : CSteamID;\n 2680:         SteamIDUser : CSteamID;\n 2681      }\n 2682  }\n ....\n 2841      k_iCallback : s32 : 1202;\n 2842      union {\n 2843:         m_steamIDRemote : CSteamID;\n 2844:         SteamIDRemote : CSteamID;\n 2845      }\n 2846  }\n ....\n 2849      k_iCallback : s32 : 1203;\n 2850      union {\n 2851:         m_steamIDRemote : CSteamID;\n 2852:         SteamIDRemote : CSteamID;\n 2853      }\n 2854      union {\n ....\n 2869      }\n 2870      union {\n 2871:         m_steamIDRemote : CSteamID;\n 2872:         SteamIDRemote : CSteamID;\n 2873      }\n 2874      union {\n ....\n 3510      m_result : EResult;\n 3511      union {\n 3512:         m_steamID : CSteamID;\n 3513:         SteamID : CSteamID;\n 3514      }\n 3515      union {\n ....\n 3658      k_iCallback : s32 : 201;\n 3659      union {\n 3660:         m_SteamID : CSteamID;\n 3661:         SteamID : CSteamID;\n 3662      }\n 3663      union {\n 3664:         m_OwnerSteamID : CSteamID;\n 3665:         OwnerSteamID : CSteamID;\n 3666      }\n 3667  }\n ....\n 3670      k_iCallback : s32 : 202;\n 3671      union {\n 3672:         m_SteamID : CSteamID;\n 3673:         SteamID : CSteamID;\n 3674      }\n 3675      union {\n ....\n 3686      k_iCallback : s32 : 203;\n 3687      union {\n 3688:         m_SteamID : CSteamID;\n 3689:         SteamID : CSteamID;\n 3690      }\n 3691      union {\n ....\n 3742      k_iCallback : s32 : 208;\n 3743      union {\n 3744:         m_SteamIDUser : CSteamID;\n 3745:         SteamIDUser : CSteamID;\n 3746      }\n 3747      union {\n 3748:         m_SteamIDGroup : CSteamID;\n 3749:         SteamIDGroup : CSteamID;\n 3750      }\n 3751      union {\n ....\n 3818      }\n 3819      union {\n 3820:         m_SteamIDCandidate : CSteamID;\n 3821:         SteamIDCandidate : CSteamID;\n 3822      }\n 3823  }\n ....\n 3830      }\n 3831      union {\n 3832:         m_steamIDUser : CSteamID;\n 3833:         SteamIDUser : CSteamID;\n 3834      }\n 3835  }\n ....\n 3842      }\n 3843      union {\n 3844:         m_steamIDUser : CSteamID;\n 3845:         SteamIDUser : CSteamID;\n 3846      }\n 3847  }\n ....\n 3850      k_iCallback : s32 : 1108;\n 3851      union {\n 3852:         m_steamIDUser : CSteamID;\n 3853:         SteamIDUser : CSteamID;\n 3854      }\n 3855  }\n ....\n 5987      }\n 5988      union {\n 5989:         m_steamIDLobby : CSteamID;\n 5990:         SteamIDLobby : CSteamID;\n 5991      }\n 5992  }\n ....\n 6088      }\n 6089      union {\n 6090:         m_steamID : CSteamID;\n 6091:         SteamID : CSteamID;\n 6092      }\n 6093  }\n ....\n 6117  LeaderboardEntry_t :: struct {\n 6118      union {\n 6119:         m_steamIDUser : CSteamID;\n 6120:         SteamIDUser : CSteamID;\n 6121      }\n 6122      union {\n ....\n 6934  //\n 6935  \n 6936: CSteamID :: u64;\n 6937  \n 6938  EGameIDType :: enum {\n ....\n 6955  }\n 6956  \n 6957: IsValid :: (steam_id: CSteamID) -> bool {\n 6958  \treturn steam_id != 0; // @TODO @Urgent this is not right\n 6959  }\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\src-autogen\\api_flat_procs_exposed.jai:\n   92  SteamAPI_ISteamFriends_GetFriendsGroupName :: (self: *ISteamFriends, friendsGroupID: FriendsGroupID_t) -> *char #foreign steam \"SteamAPI_ISteamFriends_GetFriendsGroupName\";\n   93  SteamAPI_ISteamFriends_GetFriendsGroupMembersCount :: (self: *ISteamFriends, friendsGroupID: FriendsGroupID_t) -> s32 #foreign steam \"SteamAPI_ISteamFriends_GetFriendsGroupMembersCount\";\n   94: SteamAPI_ISteamFriends_GetFriendsGroupMembersList :: (self: *ISteamFriends, friendsGroupID: FriendsGroupID_t, pOutSteamIDMembers: *CSteamID, nMembersCount: s32) #foreign steam \"SteamAPI_ISteamFriends_GetFriendsGroupMembersList\";\n   95  SteamAPI_ISteamFriends_HasFriend :: (self: *ISteamFriends, steamIDFriend: uint64_steamid, iFriendFlags: EFriendFlags) -> bool #foreign steam \"SteamAPI_ISteamFriends_HasFriend\";\n   96  SteamAPI_ISteamFriends_GetClanCount :: (self: *ISteamFriends) -> s32 #foreign steam \"SteamAPI_ISteamFriends_GetClanCount\";\n   ..\n   99  SteamAPI_ISteamFriends_GetClanTag :: (self: *ISteamFriends, steamIDClan: uint64_steamid) -> *char #foreign steam \"SteamAPI_ISteamFriends_GetClanTag\";\n  100  SteamAPI_ISteamFriends_GetClanActivityCounts :: (self: *ISteamFriends, steamIDClan: uint64_steamid, pnOnline: *s32, pnInGame: *s32, pnChatting: *s32) -> bool #foreign steam \"SteamAPI_ISteamFriends_GetClanActivityCounts\";\n  101: SteamAPI_ISteamFriends_DownloadClanActivityCounts :: (self: *ISteamFriends, psteamIDClans: *CSteamID, cClansToRequest: s32) -> SteamAPICall_t #must #foreign steam \"SteamAPI_ISteamFriends_DownloadClanActivityCounts\";\n  102  SteamAPI_ISteamFriends_GetFriendCountFromSource :: (self: *ISteamFriends, steamIDSource: uint64_steamid) -> s32 #foreign steam \"SteamAPI_ISteamFriends_GetFriendCountFromSource\";\n  103  SteamAPI_ISteamFriends_GetFriendFromSourceByIndex :: (self: *ISteamFriends, steamIDSource: uint64_steamid, iFriend: s32) -> uint64_steamid #foreign steam \"SteamAPI_ISteamFriends_GetFriendFromSourceByIndex\";\n  ...\n  135  SteamAPI_ISteamFriends_GetChatMemberByIndex :: (self: *ISteamFriends, steamIDClan: uint64_steamid, iUser: s32) -> uint64_steamid #foreign steam \"SteamAPI_ISteamFriends_GetChatMemberByIndex\";\n  136  SteamAPI_ISteamFriends_SendClanChatMessage :: (self: *ISteamFriends, steamIDClanChat: uint64_steamid, pchText: *char) -> bool #foreign steam \"SteamAPI_ISteamFriends_SendClanChatMessage\";\n  137: SteamAPI_ISteamFriends_GetClanChatMessage :: (self: *ISteamFriends, steamIDClanChat: uint64_steamid, iMessage: s32, prgchText: *void, cchTextMax: s32, peChatEntryType: *EChatEntryType, psteamidChatter: *CSteamID) -> s32 #foreign steam \"SteamAPI_ISteamFriends_GetClanChatMessage\";\n  138  SteamAPI_ISteamFriends_IsClanChatAdmin :: (self: *ISteamFriends, steamIDClanChat: uint64_steamid, steamIDUser: uint64_steamid) -> bool #foreign steam \"SteamAPI_ISteamFriends_IsClanChatAdmin\";\n  139  SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam :: (self: *ISteamFriends, steamIDClanChat: uint64_steamid) -> bool #foreign steam \"SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam\";\n  ...\n  218  SteamAPI_ISteamMatchmaking_SetLobbyMemberData :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, pchKey: *char, pchValue: *char) #foreign steam \"SteamAPI_ISteamMatchmaking_SetLobbyMemberData\";\n  219  SteamAPI_ISteamMatchmaking_SendLobbyChatMsg :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, pvMsgBody: *void, cubMsgBody: s32) -> bool #foreign steam \"SteamAPI_ISteamMatchmaking_SendLobbyChatMsg\";\n  220: SteamAPI_ISteamMatchmaking_GetLobbyChatEntry :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, iChatID: s32, pSteamIDUser: *CSteamID, pvData: *void, cubData: s32, peChatEntryType: *EChatEntryType) -> s32 #foreign steam \"SteamAPI_ISteamMatchmaking_GetLobbyChatEntry\";\n  221  SteamAPI_ISteamMatchmaking_RequestLobbyData :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid) -> bool #foreign steam \"SteamAPI_ISteamMatchmaking_RequestLobbyData\";\n  222  SteamAPI_ISteamMatchmaking_SetLobbyGameServer :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, unGameServerIP: uint32, unGameServerPort: uint16, steamIDGameServer: uint64_steamid) #foreign steam \"SteamAPI_ISteamMatchmaking_SetLobbyGameServer\";\n  223: SteamAPI_ISteamMatchmaking_GetLobbyGameServer :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, punGameServerIP: *uint32, punGameServerPort: *uint16, psteamIDGameServer: *CSteamID) -> bool #foreign steam \"SteamAPI_ISteamMatchmaking_GetLobbyGameServer\";\n  224  SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, cMaxMembers: s32) -> bool #foreign steam \"SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit\";\n  225  SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid) -> s32 #foreign steam \"SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit\";\n  ...\n  290  SteamAPI_ISteamParties_GetNumActiveBeacons :: (self: *ISteamParties) -> uint32 #foreign steam \"SteamAPI_ISteamParties_GetNumActiveBeacons\";\n  291  SteamAPI_ISteamParties_GetBeaconByIndex :: (self: *ISteamParties, unIndex: uint32) -> PartyBeaconID_t #foreign steam \"SteamAPI_ISteamParties_GetBeaconByIndex\";\n  292: SteamAPI_ISteamParties_GetBeaconDetails :: (self: *ISteamParties, ulBeaconID: PartyBeaconID_t, pSteamIDBeaconOwner: *CSteamID, pLocation: *SteamPartyBeaconLocation_t, pchMetadata: *char, cchMetadata: s32) -> bool #foreign steam \"SteamAPI_ISteamParties_GetBeaconDetails\";\n  293  SteamAPI_ISteamParties_JoinParty :: (self: *ISteamParties, ulBeaconID: PartyBeaconID_t) -> SteamAPICall_t #must #foreign steam \"SteamAPI_ISteamParties_JoinParty\";\n  294  SteamAPI_ISteamParties_GetNumAvailableBeaconLocations :: (self: *ISteamParties, puNumLocations: *uint32) -> bool #foreign steam \"SteamAPI_ISteamParties_GetNumAvailableBeaconLocations\";\n  ...\n  329  SteamAPI_ISteamRemoteStorage_UGCDownload :: (self: *ISteamRemoteStorage, hContent: UGCHandle_t, unPriority: uint32) -> SteamAPICall_t #must #foreign steam \"SteamAPI_ISteamRemoteStorage_UGCDownload\";\n  330  SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress :: (self: *ISteamRemoteStorage, hContent: UGCHandle_t, pnBytesDownloaded: *int32, pnBytesExpected: *int32) -> bool #foreign steam \"SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress\";\n  331: SteamAPI_ISteamRemoteStorage_GetUGCDetails :: (self: *ISteamRemoteStorage, hContent: UGCHandle_t, pnAppID: *AppId_t, ppchName: **char, pnFileSizeInBytes: *int32, pSteamIDOwner: *CSteamID) -> bool #foreign steam \"SteamAPI_ISteamRemoteStorage_GetUGCDetails\";\n  332  SteamAPI_ISteamRemoteStorage_UGCRead :: (self: *ISteamRemoteStorage, hContent: UGCHandle_t, pvData: *void, cubDataToRead: int32, cOffset: uint32, eAction: EUGCReadAction) -> int32 #foreign steam \"SteamAPI_ISteamRemoteStorage_UGCRead\";\n  333  SteamAPI_ISteamRemoteStorage_GetCachedUGCCount :: (self: *ISteamRemoteStorage) -> int32 #foreign steam \"SteamAPI_ISteamRemoteStorage_GetCachedUGCCount\";\n  ...\n  390  SteamAPI_ISteamUserStats_GetLeaderboardDisplayType :: (self: *ISteamUserStats, hSteamLeaderboard: SteamLeaderboard_t) -> ELeaderboardDisplayType #foreign steam \"SteamAPI_ISteamUserStats_GetLeaderboardDisplayType\";\n  391  SteamAPI_ISteamUserStats_DownloadLeaderboardEntries :: (self: *ISteamUserStats, hSteamLeaderboard: SteamLeaderboard_t, eLeaderboardDataRequest: ELeaderboardDataRequest, nRangeStart: s32, nRangeEnd: s32) -> SteamAPICall_t #must #foreign steam \"SteamAPI_ISteamUserStats_DownloadLeaderboardEntries\";\n  392: SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers :: (self: *ISteamUserStats, hSteamLeaderboard: SteamLeaderboard_t, prgUsers: *CSteamID, cUsers: s32) -> SteamAPICall_t #must #foreign steam \"SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers\";\n  393  SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry :: (self: *ISteamUserStats, hSteamLeaderboardEntries: SteamLeaderboardEntries_t, index: s32, pLeaderboardEntry: *LeaderboardEntry_t, pDetails: *int32, cDetailsMax: s32) -> bool #foreign steam \"SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry\";\n  394  SteamAPI_ISteamUserStats_UploadLeaderboardScore :: (self: *ISteamUserStats, hSteamLeaderboard: SteamLeaderboard_t, eLeaderboardUploadScoreMethod: ELeaderboardUploadScoreMethod, nScore: int32, pScoreDetails: *int32, cScoreDetailsCount: s32) -> SteamAPICall_t #must #foreign steam \"SteamAPI_ISteamUserStats_UploadLeaderboardScore\";\n  ...\n  445  SteamAPI_ISteamNetworking_SendP2PPacket :: (self: *ISteamNetworking, steamIDRemote: uint64_steamid, pubData: *void, cubData: uint32, eP2PSendType: EP2PSend, nChannel: s32) -> bool #foreign steam \"SteamAPI_ISteamNetworking_SendP2PPacket\";\n  446  SteamAPI_ISteamNetworking_IsP2PPacketAvailable :: (self: *ISteamNetworking, pcubMsgSize: *uint32, nChannel: s32) -> bool #foreign steam \"SteamAPI_ISteamNetworking_IsP2PPacketAvailable\";\n  447: SteamAPI_ISteamNetworking_ReadP2PPacket :: (self: *ISteamNetworking, pubDest: *void, cubDest: uint32, pcubMsgSize: *uint32, psteamIDRemote: *CSteamID, nChannel: s32) -> bool #foreign steam \"SteamAPI_ISteamNetworking_ReadP2PPacket\";\n  448  SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser :: (self: *ISteamNetworking, steamIDRemote: uint64_steamid) -> bool #foreign steam \"SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser\";\n  449  SteamAPI_ISteamNetworking_CloseP2PSessionWithUser :: (self: *ISteamNetworking, steamIDRemote: uint64_steamid) -> bool #foreign steam \"SteamAPI_ISteamNetworking_CloseP2PSessionWithUser\";\n  ...\n  461  SteamAPI_ISteamNetworking_IsDataAvailable :: (self: *ISteamNetworking, hListenSocket: SNetListenSocket_t, pcubMsgSize: *uint32, phSocket: *SNetSocket_t) -> bool #foreign steam \"SteamAPI_ISteamNetworking_IsDataAvailable\";\n  462  SteamAPI_ISteamNetworking_RetrieveData :: (self: *ISteamNetworking, hListenSocket: SNetListenSocket_t, pubDest: *void, cubDest: uint32, pcubMsgSize: *uint32, phSocket: *SNetSocket_t) -> bool #foreign steam \"SteamAPI_ISteamNetworking_RetrieveData\";\n  463: SteamAPI_ISteamNetworking_GetSocketInfo :: (self: *ISteamNetworking, hSocket: SNetSocket_t, pSteamIDRemote: *CSteamID, peSocketStatus: *s32, punIPRemote: *SteamIPAddress_t, punPortRemote: *uint16) -> bool #foreign steam \"SteamAPI_ISteamNetworking_GetSocketInfo\";\n  464  SteamAPI_ISteamNetworking_GetListenSocketInfo :: (self: *ISteamNetworking, hListenSocket: SNetListenSocket_t, pnIP: *SteamIPAddress_t, pnPort: *uint16) -> bool #foreign steam \"SteamAPI_ISteamNetworking_GetListenSocketInfo\";\n  465  SteamAPI_ISteamNetworking_GetSocketConnectionType :: (self: *ISteamNetworking, hSocket: SNetSocket_t) -> ESNetSocketConnectionType #foreign steam \"SteamAPI_ISteamNetworking_GetSocketConnectionType\";\n  ...\n  949  SteamAPI_ISteamGameServer_SetGameData :: (self: *ISteamGameServer, pchGameData: *char) #foreign steam \"SteamAPI_ISteamGameServer_SetGameData\";\n  950  SteamAPI_ISteamGameServer_SetRegion :: (self: *ISteamGameServer, pszRegion: *char) #foreign steam \"SteamAPI_ISteamGameServer_SetRegion\";\n  951: SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate :: (self: *ISteamGameServer, unIPClient: uint32, pvAuthBlob: *void, cubAuthBlobSize: uint32, pSteamIDUser: *CSteamID) -> bool #foreign steam \"SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate\";\n  952  SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection :: (self: *ISteamGameServer) -> uint64_steamid #foreign steam \"SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection\";\n  953  SteamAPI_ISteamGameServer_SendUserDisconnect :: (self: *ISteamGameServer, steamIDUser: uint64_steamid) #foreign steam \"SteamAPI_ISteamGameServer_SendUserDisconnect\";\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\src-autogen\\api_flat_procs_internal.jai:\n   93  SteamAPI_ISteamFriends_GetFriendsGroupName :: (self: *ISteamFriends, friendsGroupID: FriendsGroupID_t) -> *char #foreign steam \"SteamAPI_ISteamFriends_GetFriendsGroupName\";\n   94  SteamAPI_ISteamFriends_GetFriendsGroupMembersCount :: (self: *ISteamFriends, friendsGroupID: FriendsGroupID_t) -> s32 #foreign steam \"SteamAPI_ISteamFriends_GetFriendsGroupMembersCount\";\n   95: SteamAPI_ISteamFriends_GetFriendsGroupMembersList :: (self: *ISteamFriends, friendsGroupID: FriendsGroupID_t, pOutSteamIDMembers: *CSteamID, nMembersCount: s32) #foreign steam \"SteamAPI_ISteamFriends_GetFriendsGroupMembersList\";\n   96  SteamAPI_ISteamFriends_HasFriend :: (self: *ISteamFriends, steamIDFriend: uint64_steamid, iFriendFlags: EFriendFlags) -> bool #foreign steam \"SteamAPI_ISteamFriends_HasFriend\";\n   97  SteamAPI_ISteamFriends_GetClanCount :: (self: *ISteamFriends) -> s32 #foreign steam \"SteamAPI_ISteamFriends_GetClanCount\";\n   ..\n  100  SteamAPI_ISteamFriends_GetClanTag :: (self: *ISteamFriends, steamIDClan: uint64_steamid) -> *char #foreign steam \"SteamAPI_ISteamFriends_GetClanTag\";\n  101  SteamAPI_ISteamFriends_GetClanActivityCounts :: (self: *ISteamFriends, steamIDClan: uint64_steamid, pnOnline: *s32, pnInGame: *s32, pnChatting: *s32) -> bool #foreign steam \"SteamAPI_ISteamFriends_GetClanActivityCounts\";\n  102: SteamAPI_ISteamFriends_DownloadClanActivityCounts :: (self: *ISteamFriends, psteamIDClans: *CSteamID, cClansToRequest: s32) -> SteamAPICall_t #must #foreign steam \"SteamAPI_ISteamFriends_DownloadClanActivityCounts\";\n  103  SteamAPI_ISteamFriends_GetFriendCountFromSource :: (self: *ISteamFriends, steamIDSource: uint64_steamid) -> s32 #foreign steam \"SteamAPI_ISteamFriends_GetFriendCountFromSource\";\n  104  SteamAPI_ISteamFriends_GetFriendFromSourceByIndex :: (self: *ISteamFriends, steamIDSource: uint64_steamid, iFriend: s32) -> uint64_steamid #foreign steam \"SteamAPI_ISteamFriends_GetFriendFromSourceByIndex\";\n  ...\n  136  SteamAPI_ISteamFriends_GetChatMemberByIndex :: (self: *ISteamFriends, steamIDClan: uint64_steamid, iUser: s32) -> uint64_steamid #foreign steam \"SteamAPI_ISteamFriends_GetChatMemberByIndex\";\n  137  SteamAPI_ISteamFriends_SendClanChatMessage :: (self: *ISteamFriends, steamIDClanChat: uint64_steamid, pchText: *char) -> bool #foreign steam \"SteamAPI_ISteamFriends_SendClanChatMessage\";\n  138: SteamAPI_ISteamFriends_GetClanChatMessage :: (self: *ISteamFriends, steamIDClanChat: uint64_steamid, iMessage: s32, prgchText: *void, cchTextMax: s32, peChatEntryType: *EChatEntryType, psteamidChatter: *CSteamID) -> s32 #foreign steam \"SteamAPI_ISteamFriends_GetClanChatMessage\";\n  139  SteamAPI_ISteamFriends_IsClanChatAdmin :: (self: *ISteamFriends, steamIDClanChat: uint64_steamid, steamIDUser: uint64_steamid) -> bool #foreign steam \"SteamAPI_ISteamFriends_IsClanChatAdmin\";\n  140  SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam :: (self: *ISteamFriends, steamIDClanChat: uint64_steamid) -> bool #foreign steam \"SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam\";\n  ...\n  219  SteamAPI_ISteamMatchmaking_SetLobbyMemberData :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, pchKey: *char, pchValue: *char) #foreign steam \"SteamAPI_ISteamMatchmaking_SetLobbyMemberData\";\n  220  SteamAPI_ISteamMatchmaking_SendLobbyChatMsg :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, pvMsgBody: *void, cubMsgBody: s32) -> bool #foreign steam \"SteamAPI_ISteamMatchmaking_SendLobbyChatMsg\";\n  221: SteamAPI_ISteamMatchmaking_GetLobbyChatEntry :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, iChatID: s32, pSteamIDUser: *CSteamID, pvData: *void, cubData: s32, peChatEntryType: *EChatEntryType) -> s32 #foreign steam \"SteamAPI_ISteamMatchmaking_GetLobbyChatEntry\";\n  222  SteamAPI_ISteamMatchmaking_RequestLobbyData :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid) -> bool #foreign steam \"SteamAPI_ISteamMatchmaking_RequestLobbyData\";\n  223  SteamAPI_ISteamMatchmaking_SetLobbyGameServer :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, unGameServerIP: uint32, unGameServerPort: uint16, steamIDGameServer: uint64_steamid) #foreign steam \"SteamAPI_ISteamMatchmaking_SetLobbyGameServer\";\n  224: SteamAPI_ISteamMatchmaking_GetLobbyGameServer :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, punGameServerIP: *uint32, punGameServerPort: *uint16, psteamIDGameServer: *CSteamID) -> bool #foreign steam \"SteamAPI_ISteamMatchmaking_GetLobbyGameServer\";\n  225  SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, cMaxMembers: s32) -> bool #foreign steam \"SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit\";\n  226  SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid) -> s32 #foreign steam \"SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit\";\n  ...\n  291  SteamAPI_ISteamParties_GetNumActiveBeacons :: (self: *ISteamParties) -> uint32 #foreign steam \"SteamAPI_ISteamParties_GetNumActiveBeacons\";\n  292  SteamAPI_ISteamParties_GetBeaconByIndex :: (self: *ISteamParties, unIndex: uint32) -> PartyBeaconID_t #foreign steam \"SteamAPI_ISteamParties_GetBeaconByIndex\";\n  293: SteamAPI_ISteamParties_GetBeaconDetails :: (self: *ISteamParties, ulBeaconID: PartyBeaconID_t, pSteamIDBeaconOwner: *CSteamID, pLocation: *SteamPartyBeaconLocation_t, pchMetadata: *char, cchMetadata: s32) -> bool #foreign steam \"SteamAPI_ISteamParties_GetBeaconDetails\";\n  294  SteamAPI_ISteamParties_JoinParty :: (self: *ISteamParties, ulBeaconID: PartyBeaconID_t) -> SteamAPICall_t #must #foreign steam \"SteamAPI_ISteamParties_JoinParty\";\n  295  SteamAPI_ISteamParties_GetNumAvailableBeaconLocations :: (self: *ISteamParties, puNumLocations: *uint32) -> bool #foreign steam \"SteamAPI_ISteamParties_GetNumAvailableBeaconLocations\";\n  ...\n  330  SteamAPI_ISteamRemoteStorage_UGCDownload :: (self: *ISteamRemoteStorage, hContent: UGCHandle_t, unPriority: uint32) -> SteamAPICall_t #must #foreign steam \"SteamAPI_ISteamRemoteStorage_UGCDownload\";\n  331  SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress :: (self: *ISteamRemoteStorage, hContent: UGCHandle_t, pnBytesDownloaded: *int32, pnBytesExpected: *int32) -> bool #foreign steam \"SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress\";\n  332: SteamAPI_ISteamRemoteStorage_GetUGCDetails :: (self: *ISteamRemoteStorage, hContent: UGCHandle_t, pnAppID: *AppId_t, ppchName: **char, pnFileSizeInBytes: *int32, pSteamIDOwner: *CSteamID) -> bool #foreign steam \"SteamAPI_ISteamRemoteStorage_GetUGCDetails\";\n  333  SteamAPI_ISteamRemoteStorage_UGCRead :: (self: *ISteamRemoteStorage, hContent: UGCHandle_t, pvData: *void, cubDataToRead: int32, cOffset: uint32, eAction: EUGCReadAction) -> int32 #foreign steam \"SteamAPI_ISteamRemoteStorage_UGCRead\";\n  334  SteamAPI_ISteamRemoteStorage_GetCachedUGCCount :: (self: *ISteamRemoteStorage) -> int32 #foreign steam \"SteamAPI_ISteamRemoteStorage_GetCachedUGCCount\";\n  ...\n  391  SteamAPI_ISteamUserStats_GetLeaderboardDisplayType :: (self: *ISteamUserStats, hSteamLeaderboard: SteamLeaderboard_t) -> ELeaderboardDisplayType #foreign steam \"SteamAPI_ISteamUserStats_GetLeaderboardDisplayType\";\n  392  SteamAPI_ISteamUserStats_DownloadLeaderboardEntries :: (self: *ISteamUserStats, hSteamLeaderboard: SteamLeaderboard_t, eLeaderboardDataRequest: ELeaderboardDataRequest, nRangeStart: s32, nRangeEnd: s32) -> SteamAPICall_t #must #foreign steam \"SteamAPI_ISteamUserStats_DownloadLeaderboardEntries\";\n  393: SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers :: (self: *ISteamUserStats, hSteamLeaderboard: SteamLeaderboard_t, prgUsers: *CSteamID, cUsers: s32) -> SteamAPICall_t #must #foreign steam \"SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers\";\n  394  SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry :: (self: *ISteamUserStats, hSteamLeaderboardEntries: SteamLeaderboardEntries_t, index: s32, pLeaderboardEntry: *LeaderboardEntry_t, pDetails: *int32, cDetailsMax: s32) -> bool #foreign steam \"SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry\";\n  395  SteamAPI_ISteamUserStats_UploadLeaderboardScore :: (self: *ISteamUserStats, hSteamLeaderboard: SteamLeaderboard_t, eLeaderboardUploadScoreMethod: ELeaderboardUploadScoreMethod, nScore: int32, pScoreDetails: *int32, cScoreDetailsCount: s32) -> SteamAPICall_t #must #foreign steam \"SteamAPI_ISteamUserStats_UploadLeaderboardScore\";\n  ...\n  446  SteamAPI_ISteamNetworking_SendP2PPacket :: (self: *ISteamNetworking, steamIDRemote: uint64_steamid, pubData: *void, cubData: uint32, eP2PSendType: EP2PSend, nChannel: s32) -> bool #foreign steam \"SteamAPI_ISteamNetworking_SendP2PPacket\";\n  447  SteamAPI_ISteamNetworking_IsP2PPacketAvailable :: (self: *ISteamNetworking, pcubMsgSize: *uint32, nChannel: s32) -> bool #foreign steam \"SteamAPI_ISteamNetworking_IsP2PPacketAvailable\";\n  448: SteamAPI_ISteamNetworking_ReadP2PPacket :: (self: *ISteamNetworking, pubDest: *void, cubDest: uint32, pcubMsgSize: *uint32, psteamIDRemote: *CSteamID, nChannel: s32) -> bool #foreign steam \"SteamAPI_ISteamNetworking_ReadP2PPacket\";\n  449  SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser :: (self: *ISteamNetworking, steamIDRemote: uint64_steamid) -> bool #foreign steam \"SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser\";\n  450  SteamAPI_ISteamNetworking_CloseP2PSessionWithUser :: (self: *ISteamNetworking, steamIDRemote: uint64_steamid) -> bool #foreign steam \"SteamAPI_ISteamNetworking_CloseP2PSessionWithUser\";\n  ...\n  462  SteamAPI_ISteamNetworking_IsDataAvailable :: (self: *ISteamNetworking, hListenSocket: SNetListenSocket_t, pcubMsgSize: *uint32, phSocket: *SNetSocket_t) -> bool #foreign steam \"SteamAPI_ISteamNetworking_IsDataAvailable\";\n  463  SteamAPI_ISteamNetworking_RetrieveData :: (self: *ISteamNetworking, hListenSocket: SNetListenSocket_t, pubDest: *void, cubDest: uint32, pcubMsgSize: *uint32, phSocket: *SNetSocket_t) -> bool #foreign steam \"SteamAPI_ISteamNetworking_RetrieveData\";\n  464: SteamAPI_ISteamNetworking_GetSocketInfo :: (self: *ISteamNetworking, hSocket: SNetSocket_t, pSteamIDRemote: *CSteamID, peSocketStatus: *s32, punIPRemote: *SteamIPAddress_t, punPortRemote: *uint16) -> bool #foreign steam \"SteamAPI_ISteamNetworking_GetSocketInfo\";\n  465  SteamAPI_ISteamNetworking_GetListenSocketInfo :: (self: *ISteamNetworking, hListenSocket: SNetListenSocket_t, pnIP: *SteamIPAddress_t, pnPort: *uint16) -> bool #foreign steam \"SteamAPI_ISteamNetworking_GetListenSocketInfo\";\n  466  SteamAPI_ISteamNetworking_GetSocketConnectionType :: (self: *ISteamNetworking, hSocket: SNetSocket_t) -> ESNetSocketConnectionType #foreign steam \"SteamAPI_ISteamNetworking_GetSocketConnectionType\";\n  ...\n  950  SteamAPI_ISteamGameServer_SetGameData :: (self: *ISteamGameServer, pchGameData: *char) #foreign steam \"SteamAPI_ISteamGameServer_SetGameData\";\n  951  SteamAPI_ISteamGameServer_SetRegion :: (self: *ISteamGameServer, pszRegion: *char) #foreign steam \"SteamAPI_ISteamGameServer_SetRegion\";\n  952: SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate :: (self: *ISteamGameServer, unIPClient: uint32, pvAuthBlob: *void, cubAuthBlobSize: uint32, pSteamIDUser: *CSteamID) -> bool #foreign steam \"SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate\";\n  953  SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection :: (self: *ISteamGameServer) -> uint64_steamid #foreign steam \"SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection\";\n  954  SteamAPI_ISteamGameServer_SendUserDisconnect :: (self: *ISteamGameServer, steamIDUser: uint64_steamid) #foreign steam \"SteamAPI_ISteamGameServer_SendUserDisconnect\";\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\src-autogen\\api_flat_types_internal.jai:\n    1: uint64_steamid :: uint64; // Used when passing or returning CSteamID\n    2  uint64_gameid :: uint64; // Used when passing or return CGameID\n    3  \n    .\n   76      k_iCallback : s32 : 143;\n   77      union {\n   78:         m_SteamID : CSteamID;\n   79:         SteamID : CSteamID;\n   80      }\n   81      union {\n   ..\n   84      }\n   85      union {\n   86:         m_OwnerSteamID : CSteamID;\n   87:         OwnerSteamID : CSteamID;\n   88      }\n   89  }\n   ..\n  227      k_iCallback : s32 : 333;\n  228      union {\n  229:         m_steamIDLobby : CSteamID;\n  230:         SteamIDLobby : CSteamID;\n  231      }\n  232      union {\n  233:         m_steamIDFriend : CSteamID;\n  234:         SteamIDFriend : CSteamID;\n  235      }\n  236  }\n  ...\n  239      k_iCallback : s32 : 334;\n  240      union {\n  241:         m_steamID : CSteamID;\n  242:         SteamID : CSteamID;\n  243      }\n  244      union {\n  ...\n  259      k_iCallback : s32 : 335;\n  260      union {\n  261:         m_steamIDClan : CSteamID;\n  262:         SteamIDClan : CSteamID;\n  263      }\n  264      union {\n  ...\n  275      k_iCallback : s32 : 336;\n  276      union {\n  277:         m_steamIDFriend : CSteamID;\n  278:         SteamIDFriend : CSteamID;\n  279      }\n  280      union {\n  ...\n  287      k_iCallback : s32 : 337;\n  288      union {\n  289:         m_steamIDFriend : CSteamID;\n  290:         SteamIDFriend : CSteamID;\n  291      }\n  292      union {\n  ...\n  299      k_iCallback : s32 : 338;\n  300      union {\n  301:         m_steamIDClanChat : CSteamID;\n  302:         SteamIDClanChat : CSteamID;\n  303      }\n  304      union {\n  305:         m_steamIDUser : CSteamID;\n  306:         SteamIDUser : CSteamID;\n  307      }\n  308      union {\n  ...\n  315      k_iCallback : s32 : 339;\n  316      union {\n  317:         m_steamIDClanChat : CSteamID;\n  318:         SteamIDClanChat : CSteamID;\n  319      }\n  320      union {\n  321:         m_steamIDUser : CSteamID;\n  322:         SteamIDUser : CSteamID;\n  323      }\n  324  }\n  ...\n  327      k_iCallback : s32 : 340;\n  328      union {\n  329:         m_steamIDClanChat : CSteamID;\n  330:         SteamIDClanChat : CSteamID;\n  331      }\n  332      union {\n  333:         m_steamIDUser : CSteamID;\n  334:         SteamIDUser : CSteamID;\n  335      }\n  336      union {\n  ...\n  355      k_iCallback : s32 : 342;\n  356      union {\n  357:         m_steamIDClanChat : CSteamID;\n  358:         SteamIDClanChat : CSteamID;\n  359      }\n  360      union {\n  ...\n  367      k_iCallback : s32 : 343;\n  368      union {\n  369:         m_steamIDUser : CSteamID;\n  370:         SteamIDUser : CSteamID;\n  371      }\n  372      union {\n  ...\n  383      }\n  384      union {\n  385:         m_steamID : CSteamID;\n  386:         SteamID : CSteamID;\n  387      }\n  388      union {\n  ...\n  399      }\n  400      union {\n  401:         m_steamID : CSteamID;\n  402:         SteamID : CSteamID;\n  403      }\n  404      union {\n  ...\n  415      }\n  416      union {\n  417:         m_rgSteamID : [50] CSteamID ;\n  418:         SteamID : [50] CSteamID ;\n  419      }\n  420      union {\n  ...\n  689      }\n  690      union {\n  691:         m_steamIDLobby : CSteamID;\n  692:         SteamIDLobby : CSteamID;\n  693      }\n  694  }\n  ...\n  713      }\n  714      union {\n  715:         m_lobbyID : CSteamID;\n  716:         LobbyID : CSteamID;\n  717      }\n  718      union {\n  719:         m_steamIDEndedSearch : CSteamID;\n  720:         SteamIDEndedSearch : CSteamID;\n  721      }\n  722      union {\n  ...\n  749      }\n  750      union {\n  751:         m_steamIDHost : CSteamID;\n  752:         SteamIDHost : CSteamID;\n  753      }\n  754      union {\n  ...\n  781      }\n  782      union {\n  783:         m_SteamIDPlayerFound : CSteamID;\n  784:         SteamIDPlayerFound : CSteamID;\n  785      }\n  786      union {\n  787:         m_SteamIDLobby : CSteamID;\n  788:         SteamIDLobby : CSteamID;\n  789      }\n  790      union {\n  ...\n  837      }\n  838      ullUniqueGameID : uint64;\n  839:     steamIDPlayer : CSteamID;\n  840  }\n  841  \n  ...\n  860      }\n  861      union {\n  862:         m_SteamIDBeaconOwner : CSteamID;\n  863:         SteamIDBeaconOwner : CSteamID;\n  864      }\n  865      union {\n  ...\n  888      }\n  889      union {\n  890:         m_steamIDJoiner : CSteamID;\n  891:         SteamIDJoiner : CSteamID;\n  892      }\n  893  }\n  ...\n 1476      }\n 1477      union {\n 1478:         m_steamIDUser : CSteamID;\n 1479:         SteamIDUser : CSteamID;\n 1480      }\n 1481  }\n ....\n 1588      k_iCallback : s32 : 1108;\n 1589      union {\n 1590:         m_steamIDUser : CSteamID;\n 1591:         SteamIDUser : CSteamID;\n 1592      }\n 1593  }\n ....\n 1752      k_iCallback : s32 : 1202;\n 1753      union {\n 1754:         m_steamIDRemote : CSteamID;\n 1755:         SteamIDRemote : CSteamID;\n 1756      }\n 1757  }\n ....\n 1760      k_iCallback : s32 : 1203;\n 1761      union {\n 1762:         m_steamIDRemote : CSteamID;\n 1763:         SteamIDRemote : CSteamID;\n 1764      }\n 1765      union {\n ....\n 1780      }\n 1781      union {\n 1782:         m_steamIDRemote : CSteamID;\n 1783:         SteamIDRemote : CSteamID;\n 1784      }\n 1785      union {\n ....\n 2421      m_result : EResult;\n 2422      union {\n 2423:         m_steamID : CSteamID;\n 2424:         SteamID : CSteamID;\n 2425      }\n 2426      union {\n ....\n 2569      k_iCallback : s32 : 201;\n 2570      union {\n 2571:         m_SteamID : CSteamID;\n 2572:         SteamID : CSteamID;\n 2573      }\n 2574      union {\n 2575:         m_OwnerSteamID : CSteamID;\n 2576:         OwnerSteamID : CSteamID;\n 2577      }\n 2578  }\n ....\n 2581      k_iCallback : s32 : 202;\n 2582      union {\n 2583:         m_SteamID : CSteamID;\n 2584:         SteamID : CSteamID;\n 2585      }\n 2586      union {\n ....\n 2597      k_iCallback : s32 : 203;\n 2598      union {\n 2599:         m_SteamID : CSteamID;\n 2600:         SteamID : CSteamID;\n 2601      }\n 2602      union {\n ....\n 2653      k_iCallback : s32 : 208;\n 2654      union {\n 2655:         m_SteamIDUser : CSteamID;\n 2656:         SteamIDUser : CSteamID;\n 2657      }\n 2658      union {\n 2659:         m_SteamIDGroup : CSteamID;\n 2660:         SteamIDGroup : CSteamID;\n 2661      }\n 2662      union {\n ....\n 2729      }\n 2730      union {\n 2731:         m_SteamIDCandidate : CSteamID;\n 2732:         SteamIDCandidate : CSteamID;\n 2733      }\n 2734  }\n ....\n 2741      }\n 2742      union {\n 2743:         m_steamIDUser : CSteamID;\n 2744:         SteamIDUser : CSteamID;\n 2745      }\n 2746  }\n ....\n 2753      }\n 2754      union {\n 2755:         m_steamIDUser : CSteamID;\n 2756:         SteamIDUser : CSteamID;\n 2757      }\n 2758  }\n ....\n 2761      k_iCallback : s32 : 1108;\n 2762      union {\n 2763:         m_steamIDUser : CSteamID;\n 2764:         SteamIDUser : CSteamID;\n 2765      }\n 2766  }\n ....\n 4898      }\n 4899      union {\n 4900:         m_steamIDLobby : CSteamID;\n 4901:         SteamIDLobby : CSteamID;\n 4902      }\n 4903  }\n ....\n 4999      }\n 5000      union {\n 5001:         m_steamID : CSteamID;\n 5002:         SteamID : CSteamID;\n 5003      }\n 5004  }\n ....\n 5028  LeaderboardEntry_t :: struct {\n 5029      union {\n 5030:         m_steamIDUser : CSteamID;\n 5031:         SteamIDUser : CSteamID;\n 5032      }\n 5033      union {\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\src-autogen\\steam_friends.jai:\n  106  \n  107  \n  108: GetFriendsGroupMembersList :: inline (friendsGroupID: FriendsGroupID_t, pOutSteamIDMembers: *CSteamID, nMembersCount: s32) {\n  109      SteamAPI_ISteamFriends_GetFriendsGroupMembersList(steam_friends, friendsGroupID, pOutSteamIDMembers, nMembersCount);\n  110  }\n  ...\n  141  \n  142  \n  143: DownloadClanActivityCounts :: inline (psteamIDClans: *CSteamID, cClansToRequest: s32) -> SteamAPICall_t {\n  144      return SteamAPI_ISteamFriends_DownloadClanActivityCounts(steam_friends, psteamIDClans, cClansToRequest);\n  145  }\n  146  \n  147: DownloadClanActivityCounts :: inline (psteamIDClans: *CSteamID, cClansToRequest: s32, callback: (DownloadClanActivityCountsResult_t, bool) -> ()) -> SteamAPICall_t {\n  148      call_result_id := DownloadClanActivityCounts(psteamIDClans, cClansToRequest);\n  149      if call_result_id {\n  ...\n  156  }\n  157  \n  158: DownloadClanActivityCounts :: (psteamIDClans: *CSteamID, cClansToRequest: s32, code: Code) -> SteamAPICall_t #expand {\n  159      call_result_id := DownloadClanActivityCounts(psteamIDClans, cClansToRequest);\n  160      if call_result_id {\n  ...\n  393  \n  394  \n  395: GetClanChatMessage :: inline (steamIDClanChat: uint64_steamid, iMessage: s32, prgchText: *void, cchTextMax: s32, peChatEntryType: *EChatEntryType, psteamidChatter: *CSteamID) -> s32 {\n  396      return SteamAPI_ISteamFriends_GetClanChatMessage(steam_friends, steamIDClanChat, iMessage, prgchText, cchTextMax, peChatEntryType, psteamidChatter);\n  397  }\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\src-autogen\\steam_game_server.jai:\n  117  \n  118  \n  119: ServerSendUserConnectAndAuthenticate :: inline (unIPClient: uint32, pvAuthBlob: *void, cubAuthBlobSize: uint32, pSteamIDUser: *CSteamID) -> bool {\n  120      return SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(steam_game_server, unIPClient, pvAuthBlob, cubAuthBlobSize, pSteamIDUser);\n  121  }\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\src-autogen\\steam_game_server_networking.jai:\n   12  \n   13  \n   14: ServerReadP2PPacket :: inline (pubDest: *void, cubDest: uint32, pcubMsgSize: *uint32, psteamIDRemote: *CSteamID, nChannel: s32) -> bool {\n   15      return SteamAPI_ISteamNetworking_ReadP2PPacket(steam_game_server_networking, pubDest, cubDest, pcubMsgSize, psteamIDRemote, nChannel);\n   16  }\n   ..\n   92  \n   93  \n   94: ServerGetSocketInfo :: inline (hSocket: SNetSocket_t, pSteamIDRemote: *CSteamID, peSocketStatus: *s32, punIPRemote: *SteamIPAddress_t, punPortRemote: *uint16) -> bool {\n   95      return SteamAPI_ISteamNetworking_GetSocketInfo(steam_game_server_networking, hSocket, pSteamIDRemote, peSocketStatus, punIPRemote, punPortRemote);\n   96  }\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\src-autogen\\steam_matchmaking.jai:\n  209  \n  210  \n  211: GetLobbyChatEntry :: inline (steamIDLobby: uint64_steamid, iChatID: s32, pSteamIDUser: *CSteamID, pvData: *void, cubData: s32, peChatEntryType: *EChatEntryType) -> s32 {\n  212      return SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(steam_matchmaking, steamIDLobby, iChatID, pSteamIDUser, pvData, cubData, peChatEntryType);\n  213  }\n  ...\n  224  \n  225  \n  226: GetLobbyGameServer :: inline (steamIDLobby: uint64_steamid, punGameServerIP: *uint32, punGameServerPort: *uint16, psteamIDGameServer: *CSteamID) -> bool {\n  227      return SteamAPI_ISteamMatchmaking_GetLobbyGameServer(steam_matchmaking, steamIDLobby, punGameServerIP, punGameServerPort, psteamIDGameServer);\n  228  }\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\src-autogen\\steam_parties.jai:\n   12  \n   13  \n   14: GetBeaconDetails :: inline (ulBeaconID: PartyBeaconID_t, pSteamIDBeaconOwner: *CSteamID, pLocation: *SteamPartyBeaconLocation_t, pchMetadata: *char, cchMetadata: s32) -> bool {\n   15      return SteamAPI_ISteamParties_GetBeaconDetails(steam_parties, ulBeaconID, pSteamIDBeaconOwner, pLocation, pchMetadata, cchMetadata);\n   16  }\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\src-autogen\\steam_remote_storage.jai:\n  228  \n  229  \n  230: GetUGCDetails :: inline (hContent: UGCHandle_t, pnAppID: *AppId_t, ppchName: **char, pnFileSizeInBytes: *int32, pSteamIDOwner: *CSteamID) -> bool {\n  231      return SteamAPI_ISteamRemoteStorage_GetUGCDetails(steam_remote_storage, hContent, pnAppID, ppchName, pnFileSizeInBytes, pSteamIDOwner);\n  232  }\n\nC:\\rando\\dev\\mountain\\modules\\Steam\\src-autogen\\steam_user_stats.jai:\n  243  \n  244  \n  245: DownloadLeaderboardEntriesForUsers :: inline (hSteamLeaderboard: SteamLeaderboard_t, prgUsers: *CSteamID, cUsers: s32) -> SteamAPICall_t {\n  246      return SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(steam_user_stats, hSteamLeaderboard, prgUsers, cUsers);\n  247  }\n  248  \n  249: DownloadLeaderboardEntriesForUsers :: inline (hSteamLeaderboard: SteamLeaderboard_t, prgUsers: *CSteamID, cUsers: s32, callback: (LeaderboardScoresDownloaded_t, bool) -> ()) -> SteamAPICall_t {\n  250      call_result_id := DownloadLeaderboardEntriesForUsers(hSteamLeaderboard, prgUsers, cUsers);\n  251      if call_result_id {\n  ...\n  258  }\n  259  \n  260: DownloadLeaderboardEntriesForUsers :: (hSteamLeaderboard: SteamLeaderboard_t, prgUsers: *CSteamID, cUsers: s32, code: Code) -> SteamAPICall_t #expand {\n  261      call_result_id := DownloadLeaderboardEntriesForUsers(hSteamLeaderboard, prgUsers, cUsers);\n  262      if call_result_id {\n\n842 matches across 52 files\n",
			"settings":
			{
				"buffer_size": 197675,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "src/steam_client_header.jai",
			"settings":
			{
				"buffer_size": 219,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src-autogen/api_flat_procs_exposed.jai",
			"settings":
			{
				"buffer_size": 186583,
				"line_ending": "Windows"
			}
		},
		{
			"file": "sdk/steamworksexample/GameEngine.h",
			"settings":
			{
				"buffer_size": 8376,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "sdk/steamworksexample/Main.cpp",
			"settings":
			{
				"buffer_size": 12491,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "sdk/steamworksexample/SpaceWar.h",
			"settings":
			{
				"buffer_size": 15032,
				"encoding": "Western (Windows 1252)",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/User/C.sublime-build",
					""
				],
				[
					"Packages/User/d3d_shader.sublime-build",
					""
				],
				[
					"Packages/User/JAI.sublime-build",
					""
				],
				[
					"Packages/User/JAI_generic.sublime-build",
					""
				]
			],
			[
				"Packages/User/JAI.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				":theme",
				"UI: Select Color Scheme"
			],
			[
				":theem",
				"UI: Customize Theme"
			],
			[
				":w",
				":w - Save"
			],
			[
				"word",
				"Word Wrap: Toggle"
			],
			[
				"theme",
				"UI: Select Color Scheme"
			],
			[
				"theme ",
				"UI: Select Theme"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"renmae",
				"Rename File"
			],
			[
				"package",
				"Package Control: Disable Package"
			],
			[
				":install p",
				"Package Control: Install Package"
			],
			[
				"extract",
				"PackageResourceViewer: Extract Package"
			],
			[
				"resoruce",
				"PackageResourceViewer: Extract Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				":",
				"UI: Select Color Scheme"
			],
			[
				"sublime tut",
				"Sublime Tutor: Start"
			],
			[
				"package ",
				"Package Control: List Packages"
			],
			[
				":extract",
				"PackageResourceViewer: Extract Package"
			],
			[
				":remove pa",
				"Package Control: Remove Package"
			],
			[
				":package",
				"Package Control: List Packages"
			],
			[
				":install",
				"Package Control: Install Package"
			],
			[
				"package control",
				"Preferences: Package Control Settings"
			],
			[
				"keybi",
				"Preferences: Key Bindings"
			],
			[
				"setting",
				"Preferences: Settings"
			],
			[
				"distra",
				"Preferences: Settings – Distraction Free"
			],
			[
				"settings",
				"Preferences: Settings"
			],
			[
				"preferences",
				"Preferences: Settings – Distraction Free"
			],
			[
				"expand",
				"Selection: Expand to Word"
			],
			[
				"wrap",
				"Word Wrap: Toggle"
			],
			[
				"remove pac",
				"Package Control: Remove Package"
			],
			[
				"remove ",
				"Package Control: Remove Package"
			],
			[
				"buildview",
				"Disable/Enable buildview for this window"
			],
			[
				"buildvi",
				"Disable/Enable buildview for this window"
			],
			[
				"keybin",
				"Preferences: Key Bindings"
			],
			[
				"toggle men",
				"View: Toggle Menu"
			],
			[
				"menu",
				"View: Toggle Menu"
			],
			[
				"distract",
				"View: Toggle Distraction Free"
			],
			[
				"set syntax",
				"Set Syntax: Jai"
			],
			[
				"git",
				"Set Syntax: Git Log"
			],
			[
				"dest",
				"Origami: Destroy Current Pane"
			],
			[
				"move ",
				"Origami: Move File to Pane on the Left"
			],
			[
				"move",
				"Origami: Move File to Pane on the Right"
			],
			[
				"origami",
				"Origami: Create and Focus Pane on the Right"
			],
			[
				"destro",
				"Origami: Destroy Current Pane"
			],
			[
				"origam",
				"Origami: Destroy Current Pane"
			],
			[
				"indent",
				"Indentation: Reindent Lines"
			],
			[
				"book",
				"Bookmarks: Clear All"
			],
			[
				"mark",
				"Bookmarks: Toggle"
			],
			[
				"rein",
				"Indentation: Reindent Lines"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"hexvi",
				"HexViewer: Toggle Hex View"
			],
			[
				"hexview",
				"HexViewer: Toggle Hex View"
			],
			[
				"hex",
				"HexViewer: Toggle Hex View"
			],
			[
				"isntall",
				"Package Control: Install Package"
			],
			[
				"package ins",
				"Package Control: Install Package"
			],
			[
				"build",
				"Build: New Build System"
			],
			[
				"packageresou",
				"PackageResourceViewer: Extract Package"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"package controll",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 226.0,
		"history":
		[
			"sublime.log_commands(False)",
			"sublime.log_commands(True)",
			"sublime.log_commands(true)",
			"list",
			"help",
			"?",
			"commands",
			"call",
			"cmd",
			"pip",
			"subl",
			"Testt",
			"view.run_command(\"example\")",
			"view.run_command(\"ExampleCommand\")",
			"view.run_command(\"copy_line\")",
			"view.run_command(\"copy-line\")",
			"dir"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/rando/dev/mountain/modules/Steam",
		"/C/rando/dev/mountain/modules/Steam/sdk",
		"/C/rando/dev/mountain/modules/Steam/sdk/public",
		"/C/rando/dev/mountain/modules/Steam/sdk/public/steam",
		"/C/rando/dev/mountain/modules/Steam/src"
	],
	"file_history":
	[
		"/C/rando/dev/mountain/modules/Steam/example/spacewar.jai",
		"/C/rando/dev/mountain/modules/Steam/src/json.jai",
		"/C/rando/dev/mountain/modules/Steam/sdk/public/steam/steam_api_internal.h",
		"/C/rando/dev/mountain/sauce/arcane/GameNetworkingSockets.jai",
		"/C/rando/dev/mountain/modules/GameNetworkingSockets/gns.h",
		"/C/Users/randy/Downloads/test_common.h",
		"/C/rando/dev/mountain/sauce/network.jai",
		"/C/rando/dev/mountain/modules/MetaDesk/module.jai",
		"/C/rando/dev/jai/modules/ImGui/module.jai",
		"/C/rando/dev/mountain/modules/GameNetworkingSockets/module.jai",
		"/C/rando/dev/jai/modules/ImGui/windows.jai",
		"/C/rando/dev/mountain/modules/GameNetworkingSockets/test.jai",
		"/C/rando/dev/mountain/modules/GameNetworkingSockets/examples/chatroom/chat_window.jai",
		"/C/Users/randy/AppData/Local/Temp/Tempee724839-edd5-412d-8b5a-1d4108132c96_gns-jai-main.zip/gns-jai-main/gns.h",
		"/C/rando/dev/jai/modules/Bindings_Generator/module.jai",
		"/C/rando/dev/mountain/sauce/profile.jai",
		"/C/rando/dev/mountain/sauce/common.jai",
		"/C/rando/dev/mountain/sauce/arcane/.build/.added_strings_w2.jai",
		"/C/rando/dev/mountain/sauce/arcane/server.aji",
		"/C/rando/dev/mountain/sauce/arcane/main.jai",
		"/C/rando/dev/mountain/readme.md",
		"/C/rando/dev/jai/how_to/495_default_metaprogram.jai",
		"/C/rando/dev/mountain/sauce/arcane/.build/.added_strings_w3.jai",
		"/C/rando/dev/jai/modules/System.jai",
		"/C/rando/dev/jai/modules/Minimal_Metaprogram.jai",
		"/C/rando/dev/jai/modules/Default_Metaprogram.jai",
		"/C/rando/dev/jai/modules/Socket/generated_windows.jai",
		"/C/rando/dev/jai/modules/Socket/module.jai",
		"/C/rando/dev/mountain/sauce/arcane/res/generate.mdesk",
		"/C/rando/dev/jai/modules/pl_mpeg/audio.jai",
		"/C/rando/dev/jai/examples/d3d11_example/d3d11_example.jai",
		"/C/rando/dev/jai/modules/d3d11/d3d11_bindings.jai",
		"/C/rando/dev/mountain/sauce/arcane/metadata.jai",
		"/C/rando/dev/focus/first.jai",
		"/C/Users/randy/Desktop/Simp/immediate.jai",
		"/C/Users/randy/Desktop/Simp/module.jai",
		"/C/Users/randy/Desktop/Simp/font.jai",
		"/C/Users/randy/Desktop/Runtime_Support.jai",
		"/C/rando/dev/mountain/modules/Simp/font.jai",
		"/C/rando/dev/mountain/modules/Runtime_Support.jai",
		"/C/rando/dev/jai/modules/Default_Allocator/module.jai",
		"/C/rando/dev/jai/modules/Runtime_Support.jai",
		"/C/rando/dev/jai/modules/Windows.jai",
		"/C/rando/dev/jai/modules/Machine_X64.jai",
		"/C/rando/dev/mountain/modules/Spall/module.jai",
		"/C/rando/dev/mountain/sauce/metadesk_helpers.jai",
		"/C/rando/dev/jai/modules/Wav_File.jai",
		"/C/rando/dev/jai/modules/Preload.jai",
		"/C/rando/dev/mountain/sauce/arcane/arena.jai",
		"/C/rando/dev/jai/modules/Input/module.jai",
		"/C/rando/dev/jai/modules/Simp/bitmap.jai",
		"/C/rando/dev/jai/modules/dxgi/dxgi_bindings.jai",
		"/C/rando/dev/jai/modules/Basic/Array.jai",
		"/C/rando/dev/jai/modules/File/module.jai",
		"/C/rando/dev/jai/modules/File/windows.jai",
		"/C/rando/dev/jai/modules/Basic/module.jai",
		"/C/rando/dev/jai/modules/Basic/Print.jai",
		"/C/rando/dev/jai/modules/Hash_Table.jai",
		"/C/rando/dev/jai/modules/Math/cephes.jai",
		"/C/rando/dev/jai/modules/Math/module.jai",
		"/C/rando/dev/jai/modules/File_Utilities/os/windows.jai",
		"/C/rando/dev/jai/modules/Basic/Simple_String.jai",
		"/C/rando/dev/jai/modules/String/module.jai",
		"/C/Users/randy/Documents/Visual Studio 2019/Visualizers/jai.natvis",
		"/C/rando/dev/jai/modules/Hash.jai",
		"/C/rando/dev/jai/modules/Random.jai",
		"/C/rando/dev/mountain/sauce/arcane/res/res.mdesk",
		"/C/rando/dev/mountain/modules/MetaDesk/md.h",
		"/C/rando/dev/mountain/modules/MetaDesk/md.c",
		"/C/rando/dev/mountain/modules/Spall/spall.c",
		"/C/rando/dev/jai/modules/BuildCpp.jai",
		"/C/rando/dev/mountain/modules/Spall/spall.h",
		"/C/rando/dev/jai/modules/Basic/windows.jai",
		"/C/Users/randy/AppData/Roaming/Aseprite/scripts/Tags-To-Sheets.lua",
		"/C/rando/dev/mountain/.gitattributes",
		"/C/rando/dev/mountain/sauce/arcane/test.jai",
		"/C/rando/dev/mountain/sauce/arcane/graveyard.jai",
		"/C/rando/dev/mountain/sauce/arcane/config.jai",
		"/C/rando/dev/mountain/readme.txt",
		"/C/rando/dev/mountain/proj/arcane/res/res.mdesk",
		"/C/rando/dev/mountain/proj/arcane/res/generate.mdesk",
		"/C/rando/dev/mountain/proj/arcane/render.jai",
		"/C/rando/dev/mountain/proj/arcane/resource.jai",
		"/C/rando/dev/mountain/proj/arcane/main.jai",
		"/C/rando/dev/jaitime/.gitignore",
		"/C/rando/dev/jaitime/arcane/data.mdesk",
		"/C/rando/dev/jaitime/arcane/linked.jai",
		"/C/rando/dev/jaitime/modules/Simp/font.jai",
		"/C/rando/dev/jaitime/imui.jai",
		"/C/rando/dev/jaitime/recycle.jai",
		"/C/rando/dev/jaitime/arcane/graveyard.jai",
		"/C/rando/dev/jaitime/modules/MetaDesk/md.c",
		"/C/rando/dev/jaitime/modules/MetaDesk/md.h",
		"/C/rando/dev/jaitime/modules/MetaDesk/module.jai",
		"/C/rando/dev/jaitime/modules/Sokol/c/sokol/util/sokol_color.h",
		"/C/rando/dev/jaitime/metadesk_helpers.jai",
		"/C/rando/dev/jaitime/modules/Simp/bitmap.jai",
		"/C/rando/dev/jaitime/arcane/resource.jai",
		"/C/rando/dev/jaitime/arcane/res/res.mdesk",
		"/C/rando/dev/jaitime/arcane/render.jai",
		"/C/rando/dev/jaitime/arcane/res/generate.mdesk",
		"/C/rando/dev/jaitime/arcane/config.jai",
		"/C/rando/dev/jaitime/arcane/sound.jai",
		"/C/rando/dev/jaitime/arcane/main.jai",
		"/C/rando/dev/jaitime/arcane/res/shaders/shader.hlsl",
		"/C/rando/dev/jaitime/randy/d3dshader/shader.hlsl",
		"/C/Users/randy/AppData/Roaming/Sublime Text/Packages/User/d3d_shader.sublime-build",
		"/C/rando/dev/jaitime/arcane/res/shader.hlsl",
		"/C/rando/dev/jaitime/arcane/shader.hlsl",
		"/C/rando/dev/jaitime/arcane/shader.txt",
		"/C/rando/dev/jaitime/arcane/shader.jai",
		"/C/rando/dev/jai/how_to/019_looping.jai",
		"/C/rando/dev/jaitime/arcane/docs/layer_config.md",
		"/C/rando/dev/jaitime/arcane/res/generate/generate.mdesk",
		"/C/rando/dev/jai/how_to/120_polymorphic_structs.jai",
		"/C/rando/dev/jai/how_to/730_for_expansions.jai",
		"/C/rando/dev/jaitime/modules/MetaDesk/metadesk_helpers.jai",
		"/C/rando/dev/jai/modules/Compiler/Compiler.jai",
		"/C/rando/dev/jai/examples/hash_table_test.jai",
		"/G/My Drive/randy_cloud/dev_sync/arcane.vcxproj",
		"/G/My Drive/randy_cloud/dev_sync/arcane.sln",
		"/C/Users/randy/Desktop/sublime/Data/Packages/Vintage/Default.sublime-keymap",
		"/C/Users/randy/Desktop/sublime/Data/Packages/Vintage/Default (Windows).sublime-keymap",
		"/C/randy/dev/jaitime/imui.jai",
		"/C/randy/dev/jaitime/arcane/main.jai",
		"/C/randy/dev/jaitime/recycle.jai",
		"/C/rando/jai/jai-beta/modules/Basic/module.jai",
		"/C/rando/jai/jaitime/arcane/.build/.added_strings_w2.jai"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 119.0,
		"where_history":
		[
			"",
			"C:\\rando\\dev\\mountain\\modules\\Steam\\sdk\\steamworksexample",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"steamid",
			"CSteamID",
			"1040011",
			"steam_server_pipe",
			"steam_api.h",
			"SteamGameServer_Init",
			"initgameserver",
			"serverinit",
			"m_hListenSocket",
			"CreateListenSocketP2P",
			"identi",
			"SteamNetworkingIdentity",
			"ConnectP2P",
			"16994230852859110826",
			"1296",
			"2101",
			"1296",
			"warning",
			"failed",
			"Failed to get",
			"Recieved CallResult",
			"Recieved",
			"OnNetConnectionStatusChanged",
			"createlisten",
			"ConnectByIP",
			"sendmess",
			"connect",
			"verbose",
			"SteamInternal_CreateInterface",
			"expose_raw_calls",
			"SteamAPIDebugTextHook"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "module.jai",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3766,
						"regions":
						{
						},
						"selection":
						[
							[
								2812,
								2812
							]
						],
						"settings":
						{
							"syntax": "Packages/JaiTools/Jai.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 756.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "steam.jai",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16675,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JaiTools/Jai.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 3150.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "sdk/steamworksexample/SpaceWarServer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37562,
						"regions":
						{
							"bookmarks":
							{
								"flags": 144,
								"icon": "bookmark",
								"regions":
								[
									[
										618,
										618
									],
									[
										23164,
										23164
									]
								],
								"scope": "bookmarks"
							}
						},
						"selection":
						[
							[
								36624,
								36624
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 14580.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "sdk/public/steam/steamclientpublic.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 67678,
						"regions":
						{
						},
						"selection":
						[
							[
								38763,
								38763
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 10226.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "sdk/steamworksexample/SpaceWarClient.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 87493,
						"regions":
						{
							"bookmarks":
							{
								"flags": 144,
								"icon": "bookmark",
								"regions":
								[
									[
										1593,
										1593
									],
									[
										2661,
										2661
									],
									[
										17481,
										17481
									],
									[
										18883,
										18883
									],
									[
										51952,
										51952
									]
								],
								"scope": "bookmarks"
							}
						},
						"selection":
						[
							[
								51977,
								51977
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 22476.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "steam_flat.jai",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11446,
						"regions":
						{
							"bookmarks":
							{
								"flags": 144,
								"icon": "bookmark",
								"regions":
								[
									[
										7655,
										7655
									],
									[
										9783,
										9783
									]
								],
								"scope": "bookmarks"
							}
						},
						"selection":
						[
							[
								8870,
								8870
							]
						],
						"settings":
						{
							"syntax": "Packages/JaiTools/Jai.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 2008.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "generate_files.jai",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 45273,
						"regions":
						{
						},
						"selection":
						[
							[
								555,
								555
							]
						],
						"settings":
						{
							"syntax": "Packages/JaiTools/Jai.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "sdk/public/steam/steam_api_common.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9435,
						"regions":
						{
						},
						"selection":
						[
							[
								2864,
								2864
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 622.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "sdk/steamworksexample/SpaceWarServer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5750,
						"regions":
						{
						},
						"selection":
						[
							[
								1719,
								1719
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 412.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "sdk/public/steam/steam_gameserver.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5420,
						"regions":
						{
						},
						"selection":
						[
							[
								419,
								419
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "README.jai",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8056,
						"regions":
						{
						},
						"selection":
						[
							[
								5234,
								5234
							]
						],
						"settings":
						{
							"syntax": "Packages/JaiTools/Jai.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "example/spacewar.jai",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 53892,
						"regions":
						{
						},
						"selection":
						[
							[
								2984,
								2984
							]
						],
						"settings":
						{
							"syntax": "Packages/JaiTools/Jai.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1551.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "sdk/public/steam/isteamgameserver.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15674,
						"regions":
						{
						},
						"selection":
						[
							[
								11863,
								11863
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 3072.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src-autogen/steam_game_server_utils.jai",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6304,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JaiTools/Jai.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "src-autogen/steam_game_server_networking_sockets.jai",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10110,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JaiTools/Jai.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src-autogen/partial_steam_callbacks.jai",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 209029,
						"regions":
						{
							"bookmarks":
							{
								"flags": 144,
								"icon": "bookmark",
								"regions":
								[
									[
										16081,
										16081
									]
								],
								"scope": "bookmarks"
							}
						},
						"selection":
						[
							[
								65842,
								65842
							]
						],
						"settings":
						{
							"syntax": "Packages/JaiTools/Jai.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 9974.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "src-autogen/api_flat.jai",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 339522,
						"regions":
						{
						},
						"selection":
						[
							[
								27843,
								27843
							]
						],
						"settings":
						{
							"syntax": "Packages/JaiTools/Jai.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 2442.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "src/build.jai",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2337,
						"regions":
						{
						},
						"selection":
						[
							[
								2125,
								2125
							]
						],
						"settings":
						{
							"syntax": "Packages/JaiTools/Jai.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "src-autogen/steam_client.jai",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7096,
						"regions":
						{
						},
						"selection":
						[
							[
								635,
								635
							]
						],
						"settings":
						{
							"syntax": "Packages/JaiTools/Jai.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 19,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 197675,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions": "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",
								"scope": ""
							}
						},
						"selection":
						[
							[
								914,
								914
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "src/steam_client_header.jai",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 219,
						"regions":
						{
						},
						"selection":
						[
							[
								219,
								219
							]
						],
						"settings":
						{
							"syntax": "Packages/JaiTools/Jai.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "src-autogen/api_flat_procs_exposed.jai",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 186583,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JaiTools/Jai.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "sdk/steamworksexample/GameEngine.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8376,
						"regions":
						{
						},
						"selection":
						[
							[
								2396,
								2396
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 860.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "sdk/steamworksexample/Main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12491,
						"regions":
						{
							"bookmarks":
							{
								"flags": 144,
								"icon": "bookmark",
								"regions":
								[
									[
										7191,
										7191
									]
								],
								"scope": "bookmarks"
							}
						},
						"selection":
						[
							[
								5798,
								5798
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1932.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "sdk/steamworksexample/SpaceWar.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15032,
						"regions":
						{
						},
						"selection":
						[
							[
								1109,
								1109
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 38.0
	},
	"input":
	{
		"height": 44.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 137.0
	},
	"output.find_results":
	{
		"height": 134.0
	},
	"output.hex_viewer_inspector":
	{
		"height": 128.0
	},
	"pinned_build_system": "Packages/User/JAI.sublime-build",
	"project": "steam.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"steamclient",
				"src-autogen\\steam_client.jai"
			],
			[
				"sapcewar",
				"sdk\\steamworksexample\\SpaceWarClient.cpp"
			],
			[
				"seamgameserv",
				"sdk\\public\\steam\\steam_gameserver.h"
			],
			[
				"steamgames",
				"sdk\\public\\steam\\isteamgameserver.h"
			],
			[
				"spacewar",
				"sdk\\steamworksexample\\SpaceWarServer.cpp"
			],
			[
				"spacewarser",
				"sdk\\steamworksexample\\SpaceWarServer.cpp"
			],
			[
				"steamclien",
				"src-autogen\\steam_client.jai"
			],
			[
				"api_fla",
				"src-autogen\\api_flat_procs_exposed.jai"
			],
			[
				"steam module",
				"mountain\\modules\\Steam\\module.jai"
			],
			[
				"recy",
				"mountain\\sauce\\recycle.jai"
			],
			[
				"gamenetwor",
				"mountain\\sauce\\arcane\\GameNetworkingSockets.jai"
			],
			[
				"windows.jai imgu",
				"jai\\modules\\ImGui\\windows.jai"
			],
			[
				"imgui module",
				"jai\\modules\\ImGui\\module.jai"
			],
			[
				"metadesk mo",
				"mountain\\modules\\MetaDesk\\module.jai"
			],
			[
				"metadesk",
				"mountain\\modules\\MetaDesk\\module.jai"
			],
			[
				"metadesk modu",
				"mountain\\modules\\MetaDesk\\module.jai"
			],
			[
				"first jai chat",
				"mountain\\modules\\GameNetworkingSockets\\examples\\chatroom\\first.jai"
			],
			[
				"module game",
				"mountain\\modules\\GameNetworkingSockets\\module.jai"
			],
			[
				"network",
				"mountain\\sauce\\network.jai"
			],
			[
				"profi",
				"mountain\\sauce\\profile.jai"
			],
			[
				"default",
				"jai\\modules\\Default_Metaprogram.jai"
			],
			[
				"arcanejai",
				"mountain\\sauce\\arcane\\arcane.jai"
			],
			[
				"read",
				"mountain\\readme.md"
			],
			[
				"defaultm",
				"jai\\modules\\Default_Metaprogram.jai"
			],
			[
				"system",
				"jai\\modules\\System.jai"
			],
			[
				"compiler ",
				"jai\\modules\\Compiler\\Compiler.jai"
			],
			[
				"metaprogram",
				"jai\\how_to\\495_default_metaprogram.jai"
			],
			[
				"runtime",
				"mountain\\modules\\Runtime_Support.jai"
			],
			[
				"grave",
				"mountain\\sauce\\arcane\\graveyard.jai"
			],
			[
				"gener",
				"mountain\\sauce\\arcane\\res\\generate.mdesk"
			],
			[
				"ded11",
				"jai\\examples\\d3d11_example\\d3d11_example.jai"
			],
			[
				"imui",
				"mountain\\sauce\\imui.jai"
			],
			[
				"sound",
				"mountain\\sauce\\arcane\\sound.jai"
			],
			[
				"render",
				"mountain\\sauce\\arcane\\render.jai"
			],
			[
				"resour",
				"mountain\\sauce\\arcane\\resource.jai"
			],
			[
				"metadata",
				"mountain\\sauce\\arcane\\metadata.jai"
			],
			[
				"conf",
				"mountain\\sauce\\arcane\\config.jai"
			],
			[
				"config",
				"mountain\\sauce\\arcane\\config.jai"
			],
			[
				"font",
				"mountain\\modules\\Simp\\font.jai"
			],
			[
				"linked",
				"mountain\\sauce\\arcane\\linked.jai"
			],
			[
				"linke",
				"mountain\\sauce\\arcane\\linked.jai"
			],
			[
				"basic",
				"jai\\modules\\Basic\\module.jai"
			],
			[
				"",
				"mountain\\sauce\\metadesk_helpers.jai"
			],
			[
				"metade",
				"mountain\\sauce\\metadesk_helpers.jai"
			],
			[
				"defaultll",
				"jai\\modules\\Default_Allocator\\module.jai"
			],
			[
				"arena",
				"mountain\\sauce\\arcane\\arena.jai"
			],
			[
				"resource",
				"mountain\\sauce\\arcane\\resource.jai"
			],
			[
				"defaultallo",
				"jai\\modules\\Default_Allocator\\module.jai"
			],
			[
				"memory",
				"jai\\modules\\Basic\\Memory_Debugger.jai"
			],
			[
				"runtiem",
				"mountain\\modules\\Runtime_Support.jai"
			],
			[
				"font ",
				"mountain\\modules\\Simp\\font.jai"
			],
			[
				"resou",
				"mountain\\sauce\\arcane\\resource.jai"
			],
			[
				"recyc",
				"mountain\\sauce\\recycle.jai"
			],
			[
				"generat",
				"mountain\\sauce\\arcane\\res\\generate.mdesk"
			],
			[
				"rnadom",
				"jai\\modules\\Random.jai"
			],
			[
				"array",
				"jai\\modules\\Basic\\Array.jai"
			],
			[
				"sort",
				"jai\\modules\\Sort.jai"
			],
			[
				"gen",
				"mountain\\sauce\\arcane\\res\\generate.mdesk"
			],
			[
				"confi",
				"mountain\\sauce\\arcane\\config.jai"
			],
			[
				"res",
				"mountain\\sauce\\arcane\\resource.jai"
			],
			[
				"reso",
				"mountain\\sauce\\arcane\\resource.jai"
			],
			[
				"imu",
				"mountain\\sauce\\imui.jai"
			],
			[
				"metada",
				"mountain\\sauce\\arcane\\metadata.jai"
			],
			[
				"mdesk",
				"mountain\\sauce\\arcane\\res\\res.mdesk"
			],
			[
				"machine",
				"jai\\modules\\Machine_X64.jai"
			],
			[
				"md.h",
				"mountain\\modules\\MetaDesk\\md.h"
			],
			[
				"spall.c",
				"mountain\\modules\\Spall\\spall.c"
			],
			[
				"metadesk modul",
				"mountain\\modules\\MetaDesk\\module.jai"
			],
			[
				"spall modu",
				"mountain\\modules\\Spall\\module.jai"
			],
			[
				"generate.",
				"mountain\\sauce\\arcane\\res\\generate.mdesk"
			],
			[
				"random",
				"jai\\modules\\Random.jai"
			],
			[
				"input mod",
				"jai\\modules\\Input\\module.jai"
			],
			[
				"gitat",
				"mountain\\.gitattributes"
			],
			[
				"md help",
				"mountain\\sauce\\metadesk_helpers.jai"
			],
			[
				"md module",
				"mountain\\modules\\MetaDesk\\module.jai"
			],
			[
				"grav",
				"mountain\\sauce\\arcane\\graveyard.jai"
			],
			[
				"rec",
				"mountain\\sauce\\recycle.jai"
			],
			[
				"generate.mde",
				"mountain\\sauce\\arcane\\res\\generate.mdesk"
			],
			[
				"array mod",
				"jai\\modules\\Basic\\Array.jai"
			],
			[
				"res mdes",
				"mountain\\sauce\\arcane\\res\\res.mdesk"
			],
			[
				"readme",
				"mountain\\readme.md"
			],
			[
				"resmd",
				"jaitime\\arcane\\res\\res.mdesk"
			],
			[
				"con",
				"jaitime\\arcane\\config.jai"
			],
			[
				"giti",
				"jaitime\\.gitignore"
			],
			[
				"shader",
				"jaitime\\arcane\\res\\shaders\\shader.hlsl"
			],
			[
				"md",
				"jaitime\\modules\\MetaDesk\\md.h"
			],
			[
				"colour",
				"jaitime\\modules\\Sokol\\c\\sokol\\util\\sokol_color.h"
			],
			[
				"color mod",
				"jaitime\\modules\\Sokol\\c\\sokol\\util\\sokol_color.h"
			],
			[
				"loop",
				"jai\\how_to\\019_looping.jai"
			],
			[
				"random ",
				"jai\\modules\\Random.jai"
			],
			[
				"basic mod",
				"jai\\modules\\Basic\\module.jai"
			],
			[
				"ignore",
				"jaitime\\.gitignore"
			],
			[
				"md.c",
				"jaitime\\modules\\MetaDesk\\md.c"
			],
			[
				"polym",
				"jai\\how_to\\120_polymorphic_structs.jai"
			],
			[
				"forexp",
				"jai\\how_to\\730_for_expansions.jai"
			],
			[
				"math module",
				"jai\\modules\\Math\\module.jai"
			],
			[
				"string module",
				"jai\\modules\\Basic\\Simple_String.jai"
			],
			[
				"modulemdesk",
				"jaitime\\modules\\MetaDesk\\module.jai"
			],
			[
				"string mod",
				"jai\\modules\\String\\module.jai"
			],
			[
				"hashtablete",
				"jai\\examples\\hash_table_test.jai"
			],
			[
				"hash",
				"jai\\modules\\Hash.jai"
			],
			[
				"lin",
				"jaitime\\arcane\\linked.jai"
			],
			[
				"link",
				"jaitime\\arcane\\linked.jai"
			],
			[
				"main",
				"jaitime\\arcane\\main.jai"
			],
			[
				"windows",
				"jaitime\\modules\\windows_extra.jai"
			],
			[
				"window",
				"jai-beta\\modules\\Windows.jai"
			],
			[
				"windows ",
				"jai-beta\\modules\\Windows.jai"
			],
			[
				"window ",
				"jaitime\\modules\\Windows.jai"
			],
			[
				"basic modu",
				"jai-beta\\modules\\Basic\\module.jai"
			],
			[
				"math mod",
				"jai-beta\\modules\\Math\\module.jai"
			],
			[
				"rend",
				"jaitime\\arcane\\render.jai"
			],
			[
				"strings",
				"jaitime\\arcane\\.build\\.added_strings_w2.jai"
			],
			[
				"cephe",
				"jai-beta\\modules\\Math\\cephes.jai"
			],
			[
				"util",
				"jaitime\\davis\\util.jai"
			],
			[
				"math modul",
				"jai-beta\\modules\\Math\\module.jai"
			],
			[
				"math",
				"jai-beta\\modules\\Sloppy_Math.jai"
			],
			[
				"re",
				"jaitime\\recycle.jai"
			],
			[
				"string",
				"jai-beta\\how_to\\005_strings.jai"
			],
			[
				"string jai",
				"jai-beta\\modules\\String\\module.jai"
			],
			[
				"string ",
				"jai-beta\\modules\\Basic\\Simple_String.jai"
			],
			[
				"rle",
				"jai-beta\\modules\\Relative_Pointers.jai"
			],
			[
				"jai",
				"C:\\Users\\randy\\AppData\\Roaming\\Sublime Text\\Packages\\User\\JAI.sublime-build"
			],
			[
				"entit",
				"jaitime\\arcane\\entity.jai"
			],
			[
				"im",
				"jaitime\\imui.jai"
			],
			[
				"que",
				"arcane\\quest.jai"
			],
			[
				"mod",
				"jaitime\\modules\\Simp\\module.jai"
			],
			[
				"module",
				"jaitime\\modules\\Simp\\module.jai"
			],
			[
				"ahk",
				"C:\\rando\\ahk.ahk"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 420.0,
		"last_filter": "selectedst",
		"selected_items":
		[
			[
				"selectedst",
				"selected_structure"
			],
			[
				"selected structure",
				"selected_structure"
			],
			[
				"init rend",
				"render_init"
			],
			[
				"init render",
				"init_render"
			],
			[
				"",
				"Y"
			],
			[
				"metadata",
				"MetaDataInit"
			]
		],
		"width": 600.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 293.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
