#scope_module




// ISteamClient
SteamClient_CreateSteamPipe :: (self: *ISteamClient) -> HSteamPipe #foreign steam "SteamAPI_ISteamClient_CreateSteamPipe";
SteamClient_BReleaseSteamPipe :: (self: *ISteamClient, hSteamPipe: HSteamPipe) -> bool #foreign steam "SteamAPI_ISteamClient_BReleaseSteamPipe";
SteamClient_ConnectToGlobalUser :: (self: *ISteamClient, hSteamPipe: HSteamPipe) -> HSteamUser #foreign steam "SteamAPI_ISteamClient_ConnectToGlobalUser";
SteamClient_CreateLocalUser :: (self: *ISteamClient, phSteamPipe: *HSteamPipe, eAccountType: EAccountType) -> HSteamUser #foreign steam "SteamAPI_ISteamClient_CreateLocalUser";
SteamClient_ReleaseUser :: (self: *ISteamClient, hSteamPipe: HSteamPipe, hUser: HSteamUser) #foreign steam "SteamAPI_ISteamClient_ReleaseUser";
SteamClient_GetISteamUser :: (self: *ISteamClient, hSteamUser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamUser #foreign steam "SteamAPI_ISteamClient_GetISteamUser";
SteamClient_GetISteamGameServer :: (self: *ISteamClient, hSteamUser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamGameServer #foreign steam "SteamAPI_ISteamClient_GetISteamGameServer";
SteamClient_SetLocalIPBinding :: (self: *ISteamClient, unIP: *SteamIPAddress_t, usPort: uint16) #foreign steam "SteamAPI_ISteamClient_SetLocalIPBinding";
SteamClient_GetISteamFriends :: (self: *ISteamClient, hSteamUser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamFriends #foreign steam "SteamAPI_ISteamClient_GetISteamFriends";
SteamClient_GetISteamUtils :: (self: *ISteamClient, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamUtils #foreign steam "SteamAPI_ISteamClient_GetISteamUtils";
SteamClient_GetISteamMatchmaking :: (self: *ISteamClient, hSteamUser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamMatchmaking #foreign steam "SteamAPI_ISteamClient_GetISteamMatchmaking";
SteamClient_GetISteamMatchmakingServers :: (self: *ISteamClient, hSteamUser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamMatchmakingServers #foreign steam "SteamAPI_ISteamClient_GetISteamMatchmakingServers";
SteamClient_GetISteamGenericInterface :: (self: *ISteamClient, hSteamUser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) #foreign steam "SteamAPI_ISteamClient_GetISteamGenericInterface";
SteamClient_GetISteamUserStats :: (self: *ISteamClient, hSteamUser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamUserStats #foreign steam "SteamAPI_ISteamClient_GetISteamUserStats";
SteamClient_GetISteamGameServerStats :: (self: *ISteamClient, hSteamuser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamGameServerStats #foreign steam "SteamAPI_ISteamClient_GetISteamGameServerStats";
SteamClient_GetISteamApps :: (self: *ISteamClient, hSteamUser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamApps #foreign steam "SteamAPI_ISteamClient_GetISteamApps";
SteamClient_GetISteamNetworking :: (self: *ISteamClient, hSteamUser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamNetworking #foreign steam "SteamAPI_ISteamClient_GetISteamNetworking";
SteamClient_GetISteamRemoteStorage :: (self: *ISteamClient, hSteamuser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamRemoteStorage #foreign steam "SteamAPI_ISteamClient_GetISteamRemoteStorage";
SteamClient_GetISteamScreenshots :: (self: *ISteamClient, hSteamuser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamScreenshots #foreign steam "SteamAPI_ISteamClient_GetISteamScreenshots";
SteamClient_GetISteamGameSearch :: (self: *ISteamClient, hSteamuser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamGameSearch #foreign steam "SteamAPI_ISteamClient_GetISteamGameSearch";
SteamClient_GetIPCCallCount :: (self: *ISteamClient) -> uint32 #foreign steam "SteamAPI_ISteamClient_GetIPCCallCount";
SteamClient_SetWarningMessageHook :: (self: *ISteamClient, pFunction: SteamAPIWarningMessageHook_t) #foreign steam "SteamAPI_ISteamClient_SetWarningMessageHook";
SteamClient_BShutdownIfAllPipesClosed :: (self: *ISteamClient) -> bool #foreign steam "SteamAPI_ISteamClient_BShutdownIfAllPipesClosed";
SteamClient_GetISteamHTTP :: (self: *ISteamClient, hSteamuser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamHTTP #foreign steam "SteamAPI_ISteamClient_GetISteamHTTP";
SteamClient_GetISteamController :: (self: *ISteamClient, hSteamUser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamController #foreign steam "SteamAPI_ISteamClient_GetISteamController";
SteamClient_GetISteamUGC :: (self: *ISteamClient, hSteamUser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamUGC #foreign steam "SteamAPI_ISteamClient_GetISteamUGC";
SteamClient_GetISteamAppList :: (self: *ISteamClient, hSteamUser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamAppList #foreign steam "SteamAPI_ISteamClient_GetISteamAppList";
SteamClient_GetISteamMusic :: (self: *ISteamClient, hSteamuser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamMusic #foreign steam "SteamAPI_ISteamClient_GetISteamMusic";
SteamClient_GetISteamMusicRemote :: (self: *ISteamClient, hSteamuser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamMusicRemote #foreign steam "SteamAPI_ISteamClient_GetISteamMusicRemote";
SteamClient_GetISteamHTMLSurface :: (self: *ISteamClient, hSteamuser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamHTMLSurface #foreign steam "SteamAPI_ISteamClient_GetISteamHTMLSurface";
SteamClient_GetISteamInventory :: (self: *ISteamClient, hSteamuser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamInventory #foreign steam "SteamAPI_ISteamClient_GetISteamInventory";
SteamClient_GetISteamVideo :: (self: *ISteamClient, hSteamuser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamVideo #foreign steam "SteamAPI_ISteamClient_GetISteamVideo";
SteamClient_GetISteamParentalSettings :: (self: *ISteamClient, hSteamuser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamParentalSettings #foreign steam "SteamAPI_ISteamClient_GetISteamParentalSettings";
SteamClient_GetISteamInput :: (self: *ISteamClient, hSteamUser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamInput #foreign steam "SteamAPI_ISteamClient_GetISteamInput";
SteamClient_GetISteamParties :: (self: *ISteamClient, hSteamUser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamParties #foreign steam "SteamAPI_ISteamClient_GetISteamParties";
SteamClient_GetISteamRemotePlay :: (self: *ISteamClient, hSteamUser: HSteamUser, hSteamPipe: HSteamPipe, pchVersion: *char) -> *ISteamRemotePlay #foreign steam "SteamAPI_ISteamClient_GetISteamRemotePlay";

// ISteamUser
SteamUser_v021 :: () -> *ISteamUser #foreign steam "SteamAPI_SteamUser_v021";
SteamUser_GetHSteamUser :: (self: *ISteamUser) -> HSteamUser #foreign steam "SteamAPI_ISteamUser_GetHSteamUser";
SteamUser_BLoggedOn :: (self: *ISteamUser) -> bool #foreign steam "SteamAPI_ISteamUser_BLoggedOn";
SteamUser_GetSteamID :: (self: *ISteamUser) -> uint64_steamid #foreign steam "SteamAPI_ISteamUser_GetSteamID";
SteamUser_InitiateGameConnection :: (self: *ISteamUser, pAuthBlob: *void, cbMaxAuthBlob: s32, steamIDGameServer: uint64_steamid, unIPServer: uint32, usPortServer: uint16, bSecure: bool) -> s32 #foreign steam "SteamAPI_ISteamUser_InitiateGameConnection";
SteamUser_TerminateGameConnection :: (self: *ISteamUser, unIPServer: uint32, usPortServer: uint16) #foreign steam "SteamAPI_ISteamUser_TerminateGameConnection";
SteamUser_TrackAppUsageEvent :: (self: *ISteamUser, gameID: uint64_gameid, eAppUsageEvent: s32, pchExtraInfo: *char) #foreign steam "SteamAPI_ISteamUser_TrackAppUsageEvent";
SteamUser_GetUserDataFolder :: (self: *ISteamUser, pchBuffer: *char, cubBuffer: s32) -> bool #foreign steam "SteamAPI_ISteamUser_GetUserDataFolder";
SteamUser_StartVoiceRecording :: (self: *ISteamUser) #foreign steam "SteamAPI_ISteamUser_StartVoiceRecording";
SteamUser_StopVoiceRecording :: (self: *ISteamUser) #foreign steam "SteamAPI_ISteamUser_StopVoiceRecording";
SteamUser_GetAvailableVoice :: (self: *ISteamUser, pcbCompressed: *uint32, pcbUncompressed_Deprecated: *uint32, nUncompressedVoiceDesiredSampleRate_Deprecated: uint32) -> EVoiceResult #foreign steam "SteamAPI_ISteamUser_GetAvailableVoice";
SteamUser_GetVoice :: (self: *ISteamUser, bWantCompressed: bool, pDestBuffer: *void, cbDestBufferSize: uint32, nBytesWritten: *uint32, bWantUncompressed_Deprecated: bool, pUncompressedDestBuffer_Deprecated: *void, cbUncompressedDestBufferSize_Deprecated: uint32, nUncompressBytesWritten_Deprecated: *uint32, nUncompressedVoiceDesiredSampleRate_Deprecated: uint32) -> EVoiceResult #foreign steam "SteamAPI_ISteamUser_GetVoice";
SteamUser_DecompressVoice :: (self: *ISteamUser, pCompressed: *void, cbCompressed: uint32, pDestBuffer: *void, cbDestBufferSize: uint32, nBytesWritten: *uint32, nDesiredSampleRate: uint32) -> EVoiceResult #foreign steam "SteamAPI_ISteamUser_DecompressVoice";
SteamUser_GetVoiceOptimalSampleRate :: (self: *ISteamUser) -> uint32 #foreign steam "SteamAPI_ISteamUser_GetVoiceOptimalSampleRate";
SteamUser_GetAuthSessionTicket :: (self: *ISteamUser, pTicket: *void, cbMaxTicket: s32, pcbTicket: *uint32) -> HAuthTicket #foreign steam "SteamAPI_ISteamUser_GetAuthSessionTicket";
SteamUser_BeginAuthSession :: (self: *ISteamUser, pAuthTicket: *void, cbAuthTicket: s32, steamID: uint64_steamid) -> EBeginAuthSessionResult #foreign steam "SteamAPI_ISteamUser_BeginAuthSession";
SteamUser_EndAuthSession :: (self: *ISteamUser, steamID: uint64_steamid) #foreign steam "SteamAPI_ISteamUser_EndAuthSession";
SteamUser_CancelAuthTicket :: (self: *ISteamUser, hAuthTicket: HAuthTicket) #foreign steam "SteamAPI_ISteamUser_CancelAuthTicket";
SteamUser_UserHasLicenseForApp :: (self: *ISteamUser, steamID: uint64_steamid, appID: AppId_t) -> EUserHasLicenseForAppResult #foreign steam "SteamAPI_ISteamUser_UserHasLicenseForApp";
SteamUser_BIsBehindNAT :: (self: *ISteamUser) -> bool #foreign steam "SteamAPI_ISteamUser_BIsBehindNAT";
SteamUser_AdvertiseGame :: (self: *ISteamUser, steamIDGameServer: uint64_steamid, unIPServer: uint32, usPortServer: uint16) #foreign steam "SteamAPI_ISteamUser_AdvertiseGame";
SteamUser_RequestEncryptedAppTicket :: (self: *ISteamUser, pDataToInclude: *void, cbDataToInclude: s32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUser_RequestEncryptedAppTicket";
SteamUser_GetEncryptedAppTicket :: (self: *ISteamUser, pTicket: *void, cbMaxTicket: s32, pcbTicket: *uint32) -> bool #foreign steam "SteamAPI_ISteamUser_GetEncryptedAppTicket";
SteamUser_GetGameBadgeLevel :: (self: *ISteamUser, nSeries: s32, bFoil: bool) -> s32 #foreign steam "SteamAPI_ISteamUser_GetGameBadgeLevel";
SteamUser_GetPlayerSteamLevel :: (self: *ISteamUser) -> s32 #foreign steam "SteamAPI_ISteamUser_GetPlayerSteamLevel";
SteamUser_RequestStoreAuthURL :: (self: *ISteamUser, pchRedirectURL: *char) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUser_RequestStoreAuthURL";
SteamUser_BIsPhoneVerified :: (self: *ISteamUser) -> bool #foreign steam "SteamAPI_ISteamUser_BIsPhoneVerified";
SteamUser_BIsTwoFactorEnabled :: (self: *ISteamUser) -> bool #foreign steam "SteamAPI_ISteamUser_BIsTwoFactorEnabled";
SteamUser_BIsPhoneIdentifying :: (self: *ISteamUser) -> bool #foreign steam "SteamAPI_ISteamUser_BIsPhoneIdentifying";
SteamUser_BIsPhoneRequiringVerification :: (self: *ISteamUser) -> bool #foreign steam "SteamAPI_ISteamUser_BIsPhoneRequiringVerification";
SteamUser_GetMarketEligibility :: (self: *ISteamUser) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUser_GetMarketEligibility";
SteamUser_GetDurationControl :: (self: *ISteamUser) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUser_GetDurationControl";
SteamUser_BSetDurationControlOnlineState :: (self: *ISteamUser, eNewState: EDurationControlOnlineState) -> bool #foreign steam "SteamAPI_ISteamUser_BSetDurationControlOnlineState";

// ISteamFriends
SteamFriends_v017 :: () -> *ISteamFriends #foreign steam "SteamAPI_SteamFriends_v017";
SteamFriends_GetPersonaName :: (self: *ISteamFriends) -> *char #foreign steam "SteamAPI_ISteamFriends_GetPersonaName";
SteamFriends_SetPersonaName :: (self: *ISteamFriends, pchPersonaName: *char) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamFriends_SetPersonaName";
SteamFriends_GetPersonaState :: (self: *ISteamFriends) -> EPersonaState #foreign steam "SteamAPI_ISteamFriends_GetPersonaState";
SteamFriends_GetFriendCount :: (self: *ISteamFriends, iFriendFlags: s32) -> s32 #foreign steam "SteamAPI_ISteamFriends_GetFriendCount";
SteamFriends_GetFriendByIndex :: (self: *ISteamFriends, iFriend: s32, iFriendFlags: s32) -> uint64_steamid #foreign steam "SteamAPI_ISteamFriends_GetFriendByIndex";
SteamFriends_GetFriendRelationship :: (self: *ISteamFriends, steamIDFriend: uint64_steamid) -> EFriendRelationship #foreign steam "SteamAPI_ISteamFriends_GetFriendRelationship";
SteamFriends_GetFriendPersonaState :: (self: *ISteamFriends, steamIDFriend: uint64_steamid) -> EPersonaState #foreign steam "SteamAPI_ISteamFriends_GetFriendPersonaState";
SteamFriends_GetFriendPersonaName :: (self: *ISteamFriends, steamIDFriend: uint64_steamid) -> *char #foreign steam "SteamAPI_ISteamFriends_GetFriendPersonaName";
SteamFriends_GetFriendGamePlayed :: (self: *ISteamFriends, steamIDFriend: uint64_steamid, pFriendGameInfo: *FriendGameInfo_t) -> bool #foreign steam "SteamAPI_ISteamFriends_GetFriendGamePlayed";
SteamFriends_GetFriendPersonaNameHistory :: (self: *ISteamFriends, steamIDFriend: uint64_steamid, iPersonaName: s32) -> *char #foreign steam "SteamAPI_ISteamFriends_GetFriendPersonaNameHistory";
SteamFriends_GetFriendSteamLevel :: (self: *ISteamFriends, steamIDFriend: uint64_steamid) -> s32 #foreign steam "SteamAPI_ISteamFriends_GetFriendSteamLevel";
SteamFriends_GetPlayerNickname :: (self: *ISteamFriends, steamIDPlayer: uint64_steamid) -> *char #foreign steam "SteamAPI_ISteamFriends_GetPlayerNickname";
SteamFriends_GetFriendsGroupCount :: (self: *ISteamFriends) -> s32 #foreign steam "SteamAPI_ISteamFriends_GetFriendsGroupCount";
SteamFriends_GetFriendsGroupIDByIndex :: (self: *ISteamFriends, iFG: s32) -> FriendsGroupID_t #foreign steam "SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex";
SteamFriends_GetFriendsGroupName :: (self: *ISteamFriends, friendsGroupID: FriendsGroupID_t) -> *char #foreign steam "SteamAPI_ISteamFriends_GetFriendsGroupName";
SteamFriends_GetFriendsGroupMembersCount :: (self: *ISteamFriends, friendsGroupID: FriendsGroupID_t) -> s32 #foreign steam "SteamAPI_ISteamFriends_GetFriendsGroupMembersCount";
SteamFriends_GetFriendsGroupMembersList :: (self: *ISteamFriends, friendsGroupID: FriendsGroupID_t, pOutSteamIDMembers: *CSteamID, nMembersCount: s32) #foreign steam "SteamAPI_ISteamFriends_GetFriendsGroupMembersList";
SteamFriends_HasFriend :: (self: *ISteamFriends, steamIDFriend: uint64_steamid, iFriendFlags: s32) -> bool #foreign steam "SteamAPI_ISteamFriends_HasFriend";
SteamFriends_GetClanCount :: (self: *ISteamFriends) -> s32 #foreign steam "SteamAPI_ISteamFriends_GetClanCount";
SteamFriends_GetClanByIndex :: (self: *ISteamFriends, iClan: s32) -> uint64_steamid #foreign steam "SteamAPI_ISteamFriends_GetClanByIndex";
SteamFriends_GetClanName :: (self: *ISteamFriends, steamIDClan: uint64_steamid) -> *char #foreign steam "SteamAPI_ISteamFriends_GetClanName";
SteamFriends_GetClanTag :: (self: *ISteamFriends, steamIDClan: uint64_steamid) -> *char #foreign steam "SteamAPI_ISteamFriends_GetClanTag";
SteamFriends_GetClanActivityCounts :: (self: *ISteamFriends, steamIDClan: uint64_steamid, pnOnline: *s32, pnInGame: *s32, pnChatting: *s32) -> bool #foreign steam "SteamAPI_ISteamFriends_GetClanActivityCounts";
SteamFriends_DownloadClanActivityCounts :: (self: *ISteamFriends, psteamIDClans: *CSteamID, cClansToRequest: s32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamFriends_DownloadClanActivityCounts";
SteamFriends_GetFriendCountFromSource :: (self: *ISteamFriends, steamIDSource: uint64_steamid) -> s32 #foreign steam "SteamAPI_ISteamFriends_GetFriendCountFromSource";
SteamFriends_GetFriendFromSourceByIndex :: (self: *ISteamFriends, steamIDSource: uint64_steamid, iFriend: s32) -> uint64_steamid #foreign steam "SteamAPI_ISteamFriends_GetFriendFromSourceByIndex";
SteamFriends_IsUserInSource :: (self: *ISteamFriends, steamIDUser: uint64_steamid, steamIDSource: uint64_steamid) -> bool #foreign steam "SteamAPI_ISteamFriends_IsUserInSource";
SteamFriends_SetInGameVoiceSpeaking :: (self: *ISteamFriends, steamIDUser: uint64_steamid, bSpeaking: bool) #foreign steam "SteamAPI_ISteamFriends_SetInGameVoiceSpeaking";
SteamFriends_ActivateGameOverlay :: (self: *ISteamFriends, pchDialog: *char) #foreign steam "SteamAPI_ISteamFriends_ActivateGameOverlay";
SteamFriends_ActivateGameOverlayToUser :: (self: *ISteamFriends, pchDialog: *char, steamID: uint64_steamid) #foreign steam "SteamAPI_ISteamFriends_ActivateGameOverlayToUser";
SteamFriends_ActivateGameOverlayToWebPage :: (self: *ISteamFriends, pchURL: *char, eMode: EActivateGameOverlayToWebPageMode) #foreign steam "SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage";
SteamFriends_ActivateGameOverlayToStore :: (self: *ISteamFriends, nAppID: AppId_t, eFlag: EOverlayToStoreFlag) #foreign steam "SteamAPI_ISteamFriends_ActivateGameOverlayToStore";
SteamFriends_SetPlayedWith :: (self: *ISteamFriends, steamIDUserPlayedWith: uint64_steamid) #foreign steam "SteamAPI_ISteamFriends_SetPlayedWith";
SteamFriends_ActivateGameOverlayInviteDialog :: (self: *ISteamFriends, steamIDLobby: uint64_steamid) #foreign steam "SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog";
SteamFriends_GetSmallFriendAvatar :: (self: *ISteamFriends, steamIDFriend: uint64_steamid) -> s32 #foreign steam "SteamAPI_ISteamFriends_GetSmallFriendAvatar";
SteamFriends_GetMediumFriendAvatar :: (self: *ISteamFriends, steamIDFriend: uint64_steamid) -> s32 #foreign steam "SteamAPI_ISteamFriends_GetMediumFriendAvatar";
SteamFriends_GetLargeFriendAvatar :: (self: *ISteamFriends, steamIDFriend: uint64_steamid) -> s32 #foreign steam "SteamAPI_ISteamFriends_GetLargeFriendAvatar";
SteamFriends_RequestUserInformation :: (self: *ISteamFriends, steamIDUser: uint64_steamid, bRequireNameOnly: bool) -> bool #foreign steam "SteamAPI_ISteamFriends_RequestUserInformation";
SteamFriends_RequestClanOfficerList :: (self: *ISteamFriends, steamIDClan: uint64_steamid) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamFriends_RequestClanOfficerList";
SteamFriends_GetClanOwner :: (self: *ISteamFriends, steamIDClan: uint64_steamid) -> uint64_steamid #foreign steam "SteamAPI_ISteamFriends_GetClanOwner";
SteamFriends_GetClanOfficerCount :: (self: *ISteamFriends, steamIDClan: uint64_steamid) -> s32 #foreign steam "SteamAPI_ISteamFriends_GetClanOfficerCount";
SteamFriends_GetClanOfficerByIndex :: (self: *ISteamFriends, steamIDClan: uint64_steamid, iOfficer: s32) -> uint64_steamid #foreign steam "SteamAPI_ISteamFriends_GetClanOfficerByIndex";
SteamFriends_GetUserRestrictions :: (self: *ISteamFriends) -> uint32 #foreign steam "SteamAPI_ISteamFriends_GetUserRestrictions";
SteamFriends_SetRichPresence :: (self: *ISteamFriends, pchKey: *char, pchValue: *char) -> bool #foreign steam "SteamAPI_ISteamFriends_SetRichPresence";
SteamFriends_ClearRichPresence :: (self: *ISteamFriends) #foreign steam "SteamAPI_ISteamFriends_ClearRichPresence";
SteamFriends_GetFriendRichPresence :: (self: *ISteamFriends, steamIDFriend: uint64_steamid, pchKey: *char) -> *char #foreign steam "SteamAPI_ISteamFriends_GetFriendRichPresence";
SteamFriends_GetFriendRichPresenceKeyCount :: (self: *ISteamFriends, steamIDFriend: uint64_steamid) -> s32 #foreign steam "SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount";
SteamFriends_GetFriendRichPresenceKeyByIndex :: (self: *ISteamFriends, steamIDFriend: uint64_steamid, iKey: s32) -> *char #foreign steam "SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex";
SteamFriends_RequestFriendRichPresence :: (self: *ISteamFriends, steamIDFriend: uint64_steamid) #foreign steam "SteamAPI_ISteamFriends_RequestFriendRichPresence";
SteamFriends_InviteUserToGame :: (self: *ISteamFriends, steamIDFriend: uint64_steamid, pchConnectString: *char) -> bool #foreign steam "SteamAPI_ISteamFriends_InviteUserToGame";
SteamFriends_GetCoplayFriendCount :: (self: *ISteamFriends) -> s32 #foreign steam "SteamAPI_ISteamFriends_GetCoplayFriendCount";
SteamFriends_GetCoplayFriend :: (self: *ISteamFriends, iCoplayFriend: s32) -> uint64_steamid #foreign steam "SteamAPI_ISteamFriends_GetCoplayFriend";
SteamFriends_GetFriendCoplayTime :: (self: *ISteamFriends, steamIDFriend: uint64_steamid) -> s32 #foreign steam "SteamAPI_ISteamFriends_GetFriendCoplayTime";
SteamFriends_GetFriendCoplayGame :: (self: *ISteamFriends, steamIDFriend: uint64_steamid) -> AppId_t #foreign steam "SteamAPI_ISteamFriends_GetFriendCoplayGame";
SteamFriends_JoinClanChatRoom :: (self: *ISteamFriends, steamIDClan: uint64_steamid) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamFriends_JoinClanChatRoom";
SteamFriends_LeaveClanChatRoom :: (self: *ISteamFriends, steamIDClan: uint64_steamid) -> bool #foreign steam "SteamAPI_ISteamFriends_LeaveClanChatRoom";
SteamFriends_GetClanChatMemberCount :: (self: *ISteamFriends, steamIDClan: uint64_steamid) -> s32 #foreign steam "SteamAPI_ISteamFriends_GetClanChatMemberCount";
SteamFriends_GetChatMemberByIndex :: (self: *ISteamFriends, steamIDClan: uint64_steamid, iUser: s32) -> uint64_steamid #foreign steam "SteamAPI_ISteamFriends_GetChatMemberByIndex";
SteamFriends_SendClanChatMessage :: (self: *ISteamFriends, steamIDClanChat: uint64_steamid, pchText: *char) -> bool #foreign steam "SteamAPI_ISteamFriends_SendClanChatMessage";
SteamFriends_GetClanChatMessage :: (self: *ISteamFriends, steamIDClanChat: uint64_steamid, iMessage: s32, prgchText: *void, cchTextMax: s32, peChatEntryType: *EChatEntryType, psteamidChatter: *CSteamID) -> s32 #foreign steam "SteamAPI_ISteamFriends_GetClanChatMessage";
SteamFriends_IsClanChatAdmin :: (self: *ISteamFriends, steamIDClanChat: uint64_steamid, steamIDUser: uint64_steamid) -> bool #foreign steam "SteamAPI_ISteamFriends_IsClanChatAdmin";
SteamFriends_IsClanChatWindowOpenInSteam :: (self: *ISteamFriends, steamIDClanChat: uint64_steamid) -> bool #foreign steam "SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam";
SteamFriends_OpenClanChatWindowInSteam :: (self: *ISteamFriends, steamIDClanChat: uint64_steamid) -> bool #foreign steam "SteamAPI_ISteamFriends_OpenClanChatWindowInSteam";
SteamFriends_CloseClanChatWindowInSteam :: (self: *ISteamFriends, steamIDClanChat: uint64_steamid) -> bool #foreign steam "SteamAPI_ISteamFriends_CloseClanChatWindowInSteam";
SteamFriends_SetListenForFriendsMessages :: (self: *ISteamFriends, bInterceptEnabled: bool) -> bool #foreign steam "SteamAPI_ISteamFriends_SetListenForFriendsMessages";
SteamFriends_ReplyToFriendMessage :: (self: *ISteamFriends, steamIDFriend: uint64_steamid, pchMsgToSend: *char) -> bool #foreign steam "SteamAPI_ISteamFriends_ReplyToFriendMessage";
SteamFriends_GetFriendMessage :: (self: *ISteamFriends, steamIDFriend: uint64_steamid, iMessageID: s32, pvData: *void, cubData: s32, peChatEntryType: *EChatEntryType) -> s32 #foreign steam "SteamAPI_ISteamFriends_GetFriendMessage";
SteamFriends_GetFollowerCount :: (self: *ISteamFriends, steamID: uint64_steamid) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamFriends_GetFollowerCount";
SteamFriends_IsFollowing :: (self: *ISteamFriends, steamID: uint64_steamid) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamFriends_IsFollowing";
SteamFriends_EnumerateFollowingList :: (self: *ISteamFriends, unStartIndex: uint32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamFriends_EnumerateFollowingList";
SteamFriends_IsClanPublic :: (self: *ISteamFriends, steamIDClan: uint64_steamid) -> bool #foreign steam "SteamAPI_ISteamFriends_IsClanPublic";
SteamFriends_IsClanOfficialGameGroup :: (self: *ISteamFriends, steamIDClan: uint64_steamid) -> bool #foreign steam "SteamAPI_ISteamFriends_IsClanOfficialGameGroup";
SteamFriends_GetNumChatsWithUnreadPriorityMessages :: (self: *ISteamFriends) -> s32 #foreign steam "SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages";
SteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog :: (self: *ISteamFriends, steamIDLobby: uint64_steamid) #foreign steam "SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog";
SteamFriends_RegisterProtocolInOverlayBrowser :: (self: *ISteamFriends, pchProtocol: *char) -> bool #foreign steam "SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser";

// ISteamUtils
SteamUtils_v010 :: () -> *ISteamUtils #foreign steam "SteamAPI_SteamUtils_v010";
SteamGameServerUtils_v010 :: () -> *ISteamUtils #foreign steam "SteamAPI_SteamGameServerUtils_v010";
SteamUtils_GetSecondsSinceAppActive :: (self: *ISteamUtils) -> uint32 #foreign steam "SteamAPI_ISteamUtils_GetSecondsSinceAppActive";
SteamUtils_GetSecondsSinceComputerActive :: (self: *ISteamUtils) -> uint32 #foreign steam "SteamAPI_ISteamUtils_GetSecondsSinceComputerActive";
SteamUtils_GetConnectedUniverse :: (self: *ISteamUtils) -> EUniverse #foreign steam "SteamAPI_ISteamUtils_GetConnectedUniverse";
SteamUtils_GetServerRealTime :: (self: *ISteamUtils) -> uint32 #foreign steam "SteamAPI_ISteamUtils_GetServerRealTime";
SteamUtils_GetIPCountry :: (self: *ISteamUtils) -> *char #foreign steam "SteamAPI_ISteamUtils_GetIPCountry";
SteamUtils_GetImageSize :: (self: *ISteamUtils, iImage: s32, pnWidth: *uint32, pnHeight: *uint32) -> bool #foreign steam "SteamAPI_ISteamUtils_GetImageSize";
SteamUtils_GetImageRGBA :: (self: *ISteamUtils, iImage: s32, pubDest: *uint8, nDestBufferSize: s32) -> bool #foreign steam "SteamAPI_ISteamUtils_GetImageRGBA";
SteamUtils_GetCSERIPPort :: (self: *ISteamUtils, unIP: *uint32, usPort: *uint16) -> bool #foreign steam "SteamAPI_ISteamUtils_GetCSERIPPort";
SteamUtils_GetCurrentBatteryPower :: (self: *ISteamUtils) -> uint8 #foreign steam "SteamAPI_ISteamUtils_GetCurrentBatteryPower";
SteamUtils_GetAppID :: (self: *ISteamUtils) -> uint32 #foreign steam "SteamAPI_ISteamUtils_GetAppID";
SteamUtils_SetOverlayNotificationPosition :: (self: *ISteamUtils, eNotificationPosition: ENotificationPosition) #foreign steam "SteamAPI_ISteamUtils_SetOverlayNotificationPosition";
SteamUtils_IsAPICallCompleted :: (self: *ISteamUtils, hSteamAPICall: SteamAPICall_t, pbFailed: *bool) -> bool #foreign steam "SteamAPI_ISteamUtils_IsAPICallCompleted";
SteamUtils_GetAPICallFailureReason :: (self: *ISteamUtils, hSteamAPICall: SteamAPICall_t) -> ESteamAPICallFailure #foreign steam "SteamAPI_ISteamUtils_GetAPICallFailureReason";
SteamUtils_GetAPICallResult :: (self: *ISteamUtils, hSteamAPICall: SteamAPICall_t, pCallback: *void, cubCallback: s32, iCallbackExpected: s32, pbFailed: *bool) -> bool #foreign steam "SteamAPI_ISteamUtils_GetAPICallResult";
SteamUtils_GetIPCCallCount :: (self: *ISteamUtils) -> uint32 #foreign steam "SteamAPI_ISteamUtils_GetIPCCallCount";
SteamUtils_SetWarningMessageHook :: (self: *ISteamUtils, pFunction: SteamAPIWarningMessageHook_t) #foreign steam "SteamAPI_ISteamUtils_SetWarningMessageHook";
SteamUtils_IsOverlayEnabled :: (self: *ISteamUtils) -> bool #foreign steam "SteamAPI_ISteamUtils_IsOverlayEnabled";
SteamUtils_BOverlayNeedsPresent :: (self: *ISteamUtils) -> bool #foreign steam "SteamAPI_ISteamUtils_BOverlayNeedsPresent";
SteamUtils_CheckFileSignature :: (self: *ISteamUtils, szFileName: *char) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUtils_CheckFileSignature";
SteamUtils_ShowGamepadTextInput :: (self: *ISteamUtils, eInputMode: EGamepadTextInputMode, eLineInputMode: EGamepadTextInputLineMode, pchDescription: *char, unCharMax: uint32, pchExistingText: *char) -> bool #foreign steam "SteamAPI_ISteamUtils_ShowGamepadTextInput";
SteamUtils_GetEnteredGamepadTextLength :: (self: *ISteamUtils) -> uint32 #foreign steam "SteamAPI_ISteamUtils_GetEnteredGamepadTextLength";
SteamUtils_GetEnteredGamepadTextInput :: (self: *ISteamUtils, pchText: *char, cchText: uint32) -> bool #foreign steam "SteamAPI_ISteamUtils_GetEnteredGamepadTextInput";
SteamUtils_GetSteamUILanguage :: (self: *ISteamUtils) -> *char #foreign steam "SteamAPI_ISteamUtils_GetSteamUILanguage";
SteamUtils_IsSteamRunningInVR :: (self: *ISteamUtils) -> bool #foreign steam "SteamAPI_ISteamUtils_IsSteamRunningInVR";
SteamUtils_SetOverlayNotificationInset :: (self: *ISteamUtils, nHorizontalInset: s32, nVerticalInset: s32) #foreign steam "SteamAPI_ISteamUtils_SetOverlayNotificationInset";
SteamUtils_IsSteamInBigPictureMode :: (self: *ISteamUtils) -> bool #foreign steam "SteamAPI_ISteamUtils_IsSteamInBigPictureMode";
SteamUtils_StartVRDashboard :: (self: *ISteamUtils) #foreign steam "SteamAPI_ISteamUtils_StartVRDashboard";
SteamUtils_IsVRHeadsetStreamingEnabled :: (self: *ISteamUtils) -> bool #foreign steam "SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled";
SteamUtils_SetVRHeadsetStreamingEnabled :: (self: *ISteamUtils, bEnabled: bool) #foreign steam "SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled";
SteamUtils_IsSteamChinaLauncher :: (self: *ISteamUtils) -> bool #foreign steam "SteamAPI_ISteamUtils_IsSteamChinaLauncher";
SteamUtils_InitFilterText :: (self: *ISteamUtils, unFilterOptions: uint32) -> bool #foreign steam "SteamAPI_ISteamUtils_InitFilterText";
SteamUtils_FilterText :: (self: *ISteamUtils, eContext: ETextFilteringContext, sourceSteamID: uint64_steamid, pchInputMessage: *char, pchOutFilteredText: *char, nByteSizeOutFilteredText: uint32) -> s32 #foreign steam "SteamAPI_ISteamUtils_FilterText";
SteamUtils_GetIPv6ConnectivityState :: (self: *ISteamUtils, eProtocol: ESteamIPv6ConnectivityProtocol) -> ESteamIPv6ConnectivityState #foreign steam "SteamAPI_ISteamUtils_GetIPv6ConnectivityState";

// ISteamMatchmaking
SteamMatchmaking_v009 :: () -> *ISteamMatchmaking #foreign steam "SteamAPI_SteamMatchmaking_v009";
SteamMatchmaking_GetFavoriteGameCount :: (self: *ISteamMatchmaking) -> s32 #foreign steam "SteamAPI_ISteamMatchmaking_GetFavoriteGameCount";
SteamMatchmaking_GetFavoriteGame :: (self: *ISteamMatchmaking, iGame: s32, pnAppID: *AppId_t, pnIP: *uint32, pnConnPort: *uint16, pnQueryPort: *uint16, punFlags: *uint32, pRTime32LastPlayedOnServer: *uint32) -> bool #foreign steam "SteamAPI_ISteamMatchmaking_GetFavoriteGame";
SteamMatchmaking_AddFavoriteGame :: (self: *ISteamMatchmaking, nAppID: AppId_t, nIP: uint32, nConnPort: uint16, nQueryPort: uint16, unFlags: uint32, rTime32LastPlayedOnServer: uint32) -> s32 #foreign steam "SteamAPI_ISteamMatchmaking_AddFavoriteGame";
SteamMatchmaking_RemoveFavoriteGame :: (self: *ISteamMatchmaking, nAppID: AppId_t, nIP: uint32, nConnPort: uint16, nQueryPort: uint16, unFlags: uint32) -> bool #foreign steam "SteamAPI_ISteamMatchmaking_RemoveFavoriteGame";
SteamMatchmaking_RequestLobbyList :: (self: *ISteamMatchmaking) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamMatchmaking_RequestLobbyList";
SteamMatchmaking_AddRequestLobbyListStringFilter :: (self: *ISteamMatchmaking, pchKeyToMatch: *char, pchValueToMatch: *char, eComparisonType: ELobbyComparison) #foreign steam "SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter";
SteamMatchmaking_AddRequestLobbyListNumericalFilter :: (self: *ISteamMatchmaking, pchKeyToMatch: *char, nValueToMatch: s32, eComparisonType: ELobbyComparison) #foreign steam "SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter";
SteamMatchmaking_AddRequestLobbyListNearValueFilter :: (self: *ISteamMatchmaking, pchKeyToMatch: *char, nValueToBeCloseTo: s32) #foreign steam "SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter";
SteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable :: (self: *ISteamMatchmaking, nSlotsAvailable: s32) #foreign steam "SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable";
SteamMatchmaking_AddRequestLobbyListDistanceFilter :: (self: *ISteamMatchmaking, eLobbyDistanceFilter: ELobbyDistanceFilter) #foreign steam "SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter";
SteamMatchmaking_AddRequestLobbyListResultCountFilter :: (self: *ISteamMatchmaking, cMaxResults: s32) #foreign steam "SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter";
SteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid) #foreign steam "SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter";
SteamMatchmaking_GetLobbyByIndex :: (self: *ISteamMatchmaking, iLobby: s32) -> uint64_steamid #foreign steam "SteamAPI_ISteamMatchmaking_GetLobbyByIndex";
SteamMatchmaking_CreateLobby :: (self: *ISteamMatchmaking, eLobbyType: ELobbyType, cMaxMembers: s32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamMatchmaking_CreateLobby";
SteamMatchmaking_JoinLobby :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamMatchmaking_JoinLobby";
SteamMatchmaking_LeaveLobby :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid) #foreign steam "SteamAPI_ISteamMatchmaking_LeaveLobby";
SteamMatchmaking_InviteUserToLobby :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, steamIDInvitee: uint64_steamid) -> bool #foreign steam "SteamAPI_ISteamMatchmaking_InviteUserToLobby";
SteamMatchmaking_GetNumLobbyMembers :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid) -> s32 #foreign steam "SteamAPI_ISteamMatchmaking_GetNumLobbyMembers";
SteamMatchmaking_GetLobbyMemberByIndex :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, iMember: s32) -> uint64_steamid #foreign steam "SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex";
SteamMatchmaking_GetLobbyData :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, pchKey: *char) -> *char #foreign steam "SteamAPI_ISteamMatchmaking_GetLobbyData";
SteamMatchmaking_SetLobbyData :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, pchKey: *char, pchValue: *char) -> bool #foreign steam "SteamAPI_ISteamMatchmaking_SetLobbyData";
SteamMatchmaking_GetLobbyDataCount :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid) -> s32 #foreign steam "SteamAPI_ISteamMatchmaking_GetLobbyDataCount";
SteamMatchmaking_GetLobbyDataByIndex :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, iLobbyData: s32, pchKey: *char, cchKeyBufferSize: s32, pchValue: *char, cchValueBufferSize: s32) -> bool #foreign steam "SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex";
SteamMatchmaking_DeleteLobbyData :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, pchKey: *char) -> bool #foreign steam "SteamAPI_ISteamMatchmaking_DeleteLobbyData";
SteamMatchmaking_GetLobbyMemberData :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, steamIDUser: uint64_steamid, pchKey: *char) -> *char #foreign steam "SteamAPI_ISteamMatchmaking_GetLobbyMemberData";
SteamMatchmaking_SetLobbyMemberData :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, pchKey: *char, pchValue: *char) #foreign steam "SteamAPI_ISteamMatchmaking_SetLobbyMemberData";
SteamMatchmaking_SendLobbyChatMsg :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, pvMsgBody: *void, cubMsgBody: s32) -> bool #foreign steam "SteamAPI_ISteamMatchmaking_SendLobbyChatMsg";
SteamMatchmaking_GetLobbyChatEntry :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, iChatID: s32, pSteamIDUser: *CSteamID, pvData: *void, cubData: s32, peChatEntryType: *EChatEntryType) -> s32 #foreign steam "SteamAPI_ISteamMatchmaking_GetLobbyChatEntry";
SteamMatchmaking_RequestLobbyData :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid) -> bool #foreign steam "SteamAPI_ISteamMatchmaking_RequestLobbyData";
SteamMatchmaking_SetLobbyGameServer :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, unGameServerIP: uint32, unGameServerPort: uint16, steamIDGameServer: uint64_steamid) #foreign steam "SteamAPI_ISteamMatchmaking_SetLobbyGameServer";
SteamMatchmaking_GetLobbyGameServer :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, punGameServerIP: *uint32, punGameServerPort: *uint16, psteamIDGameServer: *CSteamID) -> bool #foreign steam "SteamAPI_ISteamMatchmaking_GetLobbyGameServer";
SteamMatchmaking_SetLobbyMemberLimit :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, cMaxMembers: s32) -> bool #foreign steam "SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit";
SteamMatchmaking_GetLobbyMemberLimit :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid) -> s32 #foreign steam "SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit";
SteamMatchmaking_SetLobbyType :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, eLobbyType: ELobbyType) -> bool #foreign steam "SteamAPI_ISteamMatchmaking_SetLobbyType";
SteamMatchmaking_SetLobbyJoinable :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, bLobbyJoinable: bool) -> bool #foreign steam "SteamAPI_ISteamMatchmaking_SetLobbyJoinable";
SteamMatchmaking_GetLobbyOwner :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid) -> uint64_steamid #foreign steam "SteamAPI_ISteamMatchmaking_GetLobbyOwner";
SteamMatchmaking_SetLobbyOwner :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, steamIDNewOwner: uint64_steamid) -> bool #foreign steam "SteamAPI_ISteamMatchmaking_SetLobbyOwner";
SteamMatchmaking_SetLinkedLobby :: (self: *ISteamMatchmaking, steamIDLobby: uint64_steamid, steamIDLobbyDependent: uint64_steamid) -> bool #foreign steam "SteamAPI_ISteamMatchmaking_SetLinkedLobby";

// ISteamMatchmakingServerListResponse
SteamMatchmakingServerListResponse_ServerResponded :: (self: *ISteamMatchmakingServerListResponse, hRequest: HServerListRequest, iServer: s32) #foreign steam "SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded";
SteamMatchmakingServerListResponse_ServerFailedToRespond :: (self: *ISteamMatchmakingServerListResponse, hRequest: HServerListRequest, iServer: s32) #foreign steam "SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond";
SteamMatchmakingServerListResponse_RefreshComplete :: (self: *ISteamMatchmakingServerListResponse, hRequest: HServerListRequest, response: EMatchMakingServerResponse) #foreign steam "SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete";

// ISteamMatchmakingPingResponse
SteamMatchmakingPingResponse_ServerResponded :: (self: *ISteamMatchmakingPingResponse, server: *gameserveritem_t) #foreign steam "SteamAPI_ISteamMatchmakingPingResponse_ServerResponded";
SteamMatchmakingPingResponse_ServerFailedToRespond :: (self: *ISteamMatchmakingPingResponse) #foreign steam "SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond";

// ISteamMatchmakingPlayersResponse
SteamMatchmakingPlayersResponse_AddPlayerToList :: (self: *ISteamMatchmakingPlayersResponse, pchName: *char, nScore: s32, flTimePlayed: float) #foreign steam "SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList";
SteamMatchmakingPlayersResponse_PlayersFailedToRespond :: (self: *ISteamMatchmakingPlayersResponse) #foreign steam "SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond";
SteamMatchmakingPlayersResponse_PlayersRefreshComplete :: (self: *ISteamMatchmakingPlayersResponse) #foreign steam "SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete";

// ISteamMatchmakingRulesResponse
SteamMatchmakingRulesResponse_RulesResponded :: (self: *ISteamMatchmakingRulesResponse, pchRule: *char, pchValue: *char) #foreign steam "SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded";
SteamMatchmakingRulesResponse_RulesFailedToRespond :: (self: *ISteamMatchmakingRulesResponse) #foreign steam "SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond";
SteamMatchmakingRulesResponse_RulesRefreshComplete :: (self: *ISteamMatchmakingRulesResponse) #foreign steam "SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete";

// ISteamMatchmakingServers
SteamMatchmakingServers_v002 :: () -> *ISteamMatchmakingServers #foreign steam "SteamAPI_SteamMatchmakingServers_v002";
SteamMatchmakingServers_RequestInternetServerList :: (self: *ISteamMatchmakingServers, iApp: AppId_t, ppchFilters: **MatchMakingKeyValuePair_t, nFilters: uint32, pRequestServersResponse: *ISteamMatchmakingServerListResponse) -> HServerListRequest #foreign steam "SteamAPI_ISteamMatchmakingServers_RequestInternetServerList";
SteamMatchmakingServers_RequestLANServerList :: (self: *ISteamMatchmakingServers, iApp: AppId_t, pRequestServersResponse: *ISteamMatchmakingServerListResponse) -> HServerListRequest #foreign steam "SteamAPI_ISteamMatchmakingServers_RequestLANServerList";
SteamMatchmakingServers_RequestFriendsServerList :: (self: *ISteamMatchmakingServers, iApp: AppId_t, ppchFilters: **MatchMakingKeyValuePair_t, nFilters: uint32, pRequestServersResponse: *ISteamMatchmakingServerListResponse) -> HServerListRequest #foreign steam "SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList";
SteamMatchmakingServers_RequestFavoritesServerList :: (self: *ISteamMatchmakingServers, iApp: AppId_t, ppchFilters: **MatchMakingKeyValuePair_t, nFilters: uint32, pRequestServersResponse: *ISteamMatchmakingServerListResponse) -> HServerListRequest #foreign steam "SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList";
SteamMatchmakingServers_RequestHistoryServerList :: (self: *ISteamMatchmakingServers, iApp: AppId_t, ppchFilters: **MatchMakingKeyValuePair_t, nFilters: uint32, pRequestServersResponse: *ISteamMatchmakingServerListResponse) -> HServerListRequest #foreign steam "SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList";
SteamMatchmakingServers_RequestSpectatorServerList :: (self: *ISteamMatchmakingServers, iApp: AppId_t, ppchFilters: **MatchMakingKeyValuePair_t, nFilters: uint32, pRequestServersResponse: *ISteamMatchmakingServerListResponse) -> HServerListRequest #foreign steam "SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList";
SteamMatchmakingServers_ReleaseRequest :: (self: *ISteamMatchmakingServers, hServerListRequest: HServerListRequest) #foreign steam "SteamAPI_ISteamMatchmakingServers_ReleaseRequest";
SteamMatchmakingServers_GetServerDetails :: (self: *ISteamMatchmakingServers, hRequest: HServerListRequest, iServer: s32) -> *gameserveritem_t #foreign steam "SteamAPI_ISteamMatchmakingServers_GetServerDetails";
SteamMatchmakingServers_CancelQuery :: (self: *ISteamMatchmakingServers, hRequest: HServerListRequest) #foreign steam "SteamAPI_ISteamMatchmakingServers_CancelQuery";
SteamMatchmakingServers_RefreshQuery :: (self: *ISteamMatchmakingServers, hRequest: HServerListRequest) #foreign steam "SteamAPI_ISteamMatchmakingServers_RefreshQuery";
SteamMatchmakingServers_IsRefreshing :: (self: *ISteamMatchmakingServers, hRequest: HServerListRequest) -> bool #foreign steam "SteamAPI_ISteamMatchmakingServers_IsRefreshing";
SteamMatchmakingServers_GetServerCount :: (self: *ISteamMatchmakingServers, hRequest: HServerListRequest) -> s32 #foreign steam "SteamAPI_ISteamMatchmakingServers_GetServerCount";
SteamMatchmakingServers_RefreshServer :: (self: *ISteamMatchmakingServers, hRequest: HServerListRequest, iServer: s32) #foreign steam "SteamAPI_ISteamMatchmakingServers_RefreshServer";
SteamMatchmakingServers_PingServer :: (self: *ISteamMatchmakingServers, unIP: uint32, usPort: uint16, pRequestServersResponse: *ISteamMatchmakingPingResponse) -> HServerQuery #foreign steam "SteamAPI_ISteamMatchmakingServers_PingServer";
SteamMatchmakingServers_PlayerDetails :: (self: *ISteamMatchmakingServers, unIP: uint32, usPort: uint16, pRequestServersResponse: *ISteamMatchmakingPlayersResponse) -> HServerQuery #foreign steam "SteamAPI_ISteamMatchmakingServers_PlayerDetails";
SteamMatchmakingServers_ServerRules :: (self: *ISteamMatchmakingServers, unIP: uint32, usPort: uint16, pRequestServersResponse: *ISteamMatchmakingRulesResponse) -> HServerQuery #foreign steam "SteamAPI_ISteamMatchmakingServers_ServerRules";
SteamMatchmakingServers_CancelServerQuery :: (self: *ISteamMatchmakingServers, hServerQuery: HServerQuery) #foreign steam "SteamAPI_ISteamMatchmakingServers_CancelServerQuery";

// ISteamGameSearch
SteamGameSearch_v001 :: () -> *ISteamGameSearch #foreign steam "SteamAPI_SteamGameSearch_v001";
SteamGameSearch_AddGameSearchParams :: (self: *ISteamGameSearch, pchKeyToFind: *char, pchValuesToFind: *char) -> EGameSearchErrorCode_t #foreign steam "SteamAPI_ISteamGameSearch_AddGameSearchParams";
SteamGameSearch_SearchForGameWithLobby :: (self: *ISteamGameSearch, steamIDLobby: uint64_steamid, nPlayerMin: s32, nPlayerMax: s32) -> EGameSearchErrorCode_t #foreign steam "SteamAPI_ISteamGameSearch_SearchForGameWithLobby";
SteamGameSearch_SearchForGameSolo :: (self: *ISteamGameSearch, nPlayerMin: s32, nPlayerMax: s32) -> EGameSearchErrorCode_t #foreign steam "SteamAPI_ISteamGameSearch_SearchForGameSolo";
SteamGameSearch_AcceptGame :: (self: *ISteamGameSearch) -> EGameSearchErrorCode_t #foreign steam "SteamAPI_ISteamGameSearch_AcceptGame";
SteamGameSearch_DeclineGame :: (self: *ISteamGameSearch) -> EGameSearchErrorCode_t #foreign steam "SteamAPI_ISteamGameSearch_DeclineGame";
SteamGameSearch_RetrieveConnectionDetails :: (self: *ISteamGameSearch, steamIDHost: uint64_steamid, pchConnectionDetails: *char, cubConnectionDetails: s32) -> EGameSearchErrorCode_t #foreign steam "SteamAPI_ISteamGameSearch_RetrieveConnectionDetails";
SteamGameSearch_EndGameSearch :: (self: *ISteamGameSearch) -> EGameSearchErrorCode_t #foreign steam "SteamAPI_ISteamGameSearch_EndGameSearch";
SteamGameSearch_SetGameHostParams :: (self: *ISteamGameSearch, pchKey: *char, pchValue: *char) -> EGameSearchErrorCode_t #foreign steam "SteamAPI_ISteamGameSearch_SetGameHostParams";
SteamGameSearch_SetConnectionDetails :: (self: *ISteamGameSearch, pchConnectionDetails: *char, cubConnectionDetails: s32) -> EGameSearchErrorCode_t #foreign steam "SteamAPI_ISteamGameSearch_SetConnectionDetails";
SteamGameSearch_RequestPlayersForGame :: (self: *ISteamGameSearch, nPlayerMin: s32, nPlayerMax: s32, nMaxTeamSize: s32) -> EGameSearchErrorCode_t #foreign steam "SteamAPI_ISteamGameSearch_RequestPlayersForGame";
SteamGameSearch_HostConfirmGameStart :: (self: *ISteamGameSearch, ullUniqueGameID: uint64) -> EGameSearchErrorCode_t #foreign steam "SteamAPI_ISteamGameSearch_HostConfirmGameStart";
SteamGameSearch_CancelRequestPlayersForGame :: (self: *ISteamGameSearch) -> EGameSearchErrorCode_t #foreign steam "SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame";
SteamGameSearch_SubmitPlayerResult :: (self: *ISteamGameSearch, ullUniqueGameID: uint64, steamIDPlayer: uint64_steamid, EPlayerResult: EPlayerResult_t) -> EGameSearchErrorCode_t #foreign steam "SteamAPI_ISteamGameSearch_SubmitPlayerResult";
SteamGameSearch_EndGame :: (self: *ISteamGameSearch, ullUniqueGameID: uint64) -> EGameSearchErrorCode_t #foreign steam "SteamAPI_ISteamGameSearch_EndGame";

// ISteamParties
SteamParties_v002 :: () -> *ISteamParties #foreign steam "SteamAPI_SteamParties_v002";
SteamParties_GetNumActiveBeacons :: (self: *ISteamParties) -> uint32 #foreign steam "SteamAPI_ISteamParties_GetNumActiveBeacons";
SteamParties_GetBeaconByIndex :: (self: *ISteamParties, unIndex: uint32) -> PartyBeaconID_t #foreign steam "SteamAPI_ISteamParties_GetBeaconByIndex";
SteamParties_GetBeaconDetails :: (self: *ISteamParties, ulBeaconID: PartyBeaconID_t, pSteamIDBeaconOwner: *CSteamID, pLocation: *SteamPartyBeaconLocation_t, pchMetadata: *char, cchMetadata: s32) -> bool #foreign steam "SteamAPI_ISteamParties_GetBeaconDetails";
SteamParties_JoinParty :: (self: *ISteamParties, ulBeaconID: PartyBeaconID_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamParties_JoinParty";
SteamParties_GetNumAvailableBeaconLocations :: (self: *ISteamParties, puNumLocations: *uint32) -> bool #foreign steam "SteamAPI_ISteamParties_GetNumAvailableBeaconLocations";
SteamParties_GetAvailableBeaconLocations :: (self: *ISteamParties, pLocationList: *SteamPartyBeaconLocation_t, uMaxNumLocations: uint32) -> bool #foreign steam "SteamAPI_ISteamParties_GetAvailableBeaconLocations";
SteamParties_CreateBeacon :: (self: *ISteamParties, unOpenSlots: uint32, pBeaconLocation: *SteamPartyBeaconLocation_t, pchConnectString: *char, pchMetadata: *char) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamParties_CreateBeacon";
SteamParties_OnReservationCompleted :: (self: *ISteamParties, ulBeacon: PartyBeaconID_t, steamIDUser: uint64_steamid) #foreign steam "SteamAPI_ISteamParties_OnReservationCompleted";
SteamParties_CancelReservation :: (self: *ISteamParties, ulBeacon: PartyBeaconID_t, steamIDUser: uint64_steamid) #foreign steam "SteamAPI_ISteamParties_CancelReservation";
SteamParties_ChangeNumOpenSlots :: (self: *ISteamParties, ulBeacon: PartyBeaconID_t, unOpenSlots: uint32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamParties_ChangeNumOpenSlots";
SteamParties_DestroyBeacon :: (self: *ISteamParties, ulBeacon: PartyBeaconID_t) -> bool #foreign steam "SteamAPI_ISteamParties_DestroyBeacon";
SteamParties_GetBeaconLocationData :: (self: *ISteamParties, BeaconLocation: SteamPartyBeaconLocation_t, eData: ESteamPartyBeaconLocationData, pchDataStringOut: *char, cchDataStringOut: s32) -> bool #foreign steam "SteamAPI_ISteamParties_GetBeaconLocationData";

// ISteamRemoteStorage
SteamRemoteStorage_v014 :: () -> *ISteamRemoteStorage #foreign steam "SteamAPI_SteamRemoteStorage_v014";
SteamRemoteStorage_FileWrite :: (self: *ISteamRemoteStorage, pchFile: *char, pvData: *void, cubData: int32) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_FileWrite";
SteamRemoteStorage_FileRead :: (self: *ISteamRemoteStorage, pchFile: *char, pvData: *void, cubDataToRead: int32) -> int32 #foreign steam "SteamAPI_ISteamRemoteStorage_FileRead";
SteamRemoteStorage_FileWriteAsync :: (self: *ISteamRemoteStorage, pchFile: *char, pvData: *void, cubData: uint32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_FileWriteAsync";
SteamRemoteStorage_FileReadAsync :: (self: *ISteamRemoteStorage, pchFile: *char, nOffset: uint32, cubToRead: uint32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_FileReadAsync";
SteamRemoteStorage_FileReadAsyncComplete :: (self: *ISteamRemoteStorage, hReadCall: SteamAPICall_t, pvBuffer: *void, cubToRead: uint32) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete";
SteamRemoteStorage_FileForget :: (self: *ISteamRemoteStorage, pchFile: *char) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_FileForget";
SteamRemoteStorage_FileDelete :: (self: *ISteamRemoteStorage, pchFile: *char) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_FileDelete";
SteamRemoteStorage_FileShare :: (self: *ISteamRemoteStorage, pchFile: *char) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_FileShare";
SteamRemoteStorage_SetSyncPlatforms :: (self: *ISteamRemoteStorage, pchFile: *char, eRemoteStoragePlatform: ERemoteStoragePlatform) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_SetSyncPlatforms";
SteamRemoteStorage_FileWriteStreamOpen :: (self: *ISteamRemoteStorage, pchFile: *char) -> UGCFileWriteStreamHandle_t #foreign steam "SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen";
SteamRemoteStorage_FileWriteStreamWriteChunk :: (self: *ISteamRemoteStorage, writeHandle: UGCFileWriteStreamHandle_t, pvData: *void, cubData: int32) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk";
SteamRemoteStorage_FileWriteStreamClose :: (self: *ISteamRemoteStorage, writeHandle: UGCFileWriteStreamHandle_t) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_FileWriteStreamClose";
SteamRemoteStorage_FileWriteStreamCancel :: (self: *ISteamRemoteStorage, writeHandle: UGCFileWriteStreamHandle_t) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel";
SteamRemoteStorage_FileExists :: (self: *ISteamRemoteStorage, pchFile: *char) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_FileExists";
SteamRemoteStorage_FilePersisted :: (self: *ISteamRemoteStorage, pchFile: *char) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_FilePersisted";
SteamRemoteStorage_GetFileSize :: (self: *ISteamRemoteStorage, pchFile: *char) -> int32 #foreign steam "SteamAPI_ISteamRemoteStorage_GetFileSize";
SteamRemoteStorage_GetFileTimestamp :: (self: *ISteamRemoteStorage, pchFile: *char) -> int64 #foreign steam "SteamAPI_ISteamRemoteStorage_GetFileTimestamp";
SteamRemoteStorage_GetSyncPlatforms :: (self: *ISteamRemoteStorage, pchFile: *char) -> ERemoteStoragePlatform #foreign steam "SteamAPI_ISteamRemoteStorage_GetSyncPlatforms";
SteamRemoteStorage_GetFileCount :: (self: *ISteamRemoteStorage) -> int32 #foreign steam "SteamAPI_ISteamRemoteStorage_GetFileCount";
SteamRemoteStorage_GetFileNameAndSize :: (self: *ISteamRemoteStorage, iFile: s32, pnFileSizeInBytes: *int32) -> *char #foreign steam "SteamAPI_ISteamRemoteStorage_GetFileNameAndSize";
SteamRemoteStorage_GetQuota :: (self: *ISteamRemoteStorage, pnTotalBytes: *uint64, puAvailableBytes: *uint64) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_GetQuota";
SteamRemoteStorage_IsCloudEnabledForAccount :: (self: *ISteamRemoteStorage) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount";
SteamRemoteStorage_IsCloudEnabledForApp :: (self: *ISteamRemoteStorage) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp";
SteamRemoteStorage_SetCloudEnabledForApp :: (self: *ISteamRemoteStorage, bEnabled: bool) #foreign steam "SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp";
SteamRemoteStorage_UGCDownload :: (self: *ISteamRemoteStorage, hContent: UGCHandle_t, unPriority: uint32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_UGCDownload";
SteamRemoteStorage_GetUGCDownloadProgress :: (self: *ISteamRemoteStorage, hContent: UGCHandle_t, pnBytesDownloaded: *int32, pnBytesExpected: *int32) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress";
SteamRemoteStorage_GetUGCDetails :: (self: *ISteamRemoteStorage, hContent: UGCHandle_t, pnAppID: *AppId_t, ppchName: **char, pnFileSizeInBytes: *int32, pSteamIDOwner: *CSteamID) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_GetUGCDetails";
SteamRemoteStorage_UGCRead :: (self: *ISteamRemoteStorage, hContent: UGCHandle_t, pvData: *void, cubDataToRead: int32, cOffset: uint32, eAction: EUGCReadAction) -> int32 #foreign steam "SteamAPI_ISteamRemoteStorage_UGCRead";
SteamRemoteStorage_GetCachedUGCCount :: (self: *ISteamRemoteStorage) -> int32 #foreign steam "SteamAPI_ISteamRemoteStorage_GetCachedUGCCount";
SteamRemoteStorage_GetCachedUGCHandle :: (self: *ISteamRemoteStorage, iCachedContent: int32) -> UGCHandle_t #foreign steam "SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle";
SteamRemoteStorage_PublishWorkshopFile :: (self: *ISteamRemoteStorage, pchFile: *char, pchPreviewFile: *char, nConsumerAppId: AppId_t, pchTitle: *char, pchDescription: *char, eVisibility: ERemoteStoragePublishedFileVisibility, pTags: *SteamParamStringArray_t, eWorkshopFileType: EWorkshopFileType) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_PublishWorkshopFile";
SteamRemoteStorage_CreatePublishedFileUpdateRequest :: (self: *ISteamRemoteStorage, unPublishedFileId: PublishedFileId_t) -> PublishedFileUpdateHandle_t #foreign steam "SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest";
SteamRemoteStorage_UpdatePublishedFileFile :: (self: *ISteamRemoteStorage, updateHandle: PublishedFileUpdateHandle_t, pchFile: *char) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile";
SteamRemoteStorage_UpdatePublishedFilePreviewFile :: (self: *ISteamRemoteStorage, updateHandle: PublishedFileUpdateHandle_t, pchPreviewFile: *char) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile";
SteamRemoteStorage_UpdatePublishedFileTitle :: (self: *ISteamRemoteStorage, updateHandle: PublishedFileUpdateHandle_t, pchTitle: *char) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle";
SteamRemoteStorage_UpdatePublishedFileDescription :: (self: *ISteamRemoteStorage, updateHandle: PublishedFileUpdateHandle_t, pchDescription: *char) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription";
SteamRemoteStorage_UpdatePublishedFileVisibility :: (self: *ISteamRemoteStorage, updateHandle: PublishedFileUpdateHandle_t, eVisibility: ERemoteStoragePublishedFileVisibility) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility";
SteamRemoteStorage_UpdatePublishedFileTags :: (self: *ISteamRemoteStorage, updateHandle: PublishedFileUpdateHandle_t, pTags: *SteamParamStringArray_t) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags";
SteamRemoteStorage_CommitPublishedFileUpdate :: (self: *ISteamRemoteStorage, updateHandle: PublishedFileUpdateHandle_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate";
SteamRemoteStorage_GetPublishedFileDetails :: (self: *ISteamRemoteStorage, unPublishedFileId: PublishedFileId_t, unMaxSecondsOld: uint32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails";
SteamRemoteStorage_DeletePublishedFile :: (self: *ISteamRemoteStorage, unPublishedFileId: PublishedFileId_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_DeletePublishedFile";
SteamRemoteStorage_EnumerateUserPublishedFiles :: (self: *ISteamRemoteStorage, unStartIndex: uint32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles";
SteamRemoteStorage_SubscribePublishedFile :: (self: *ISteamRemoteStorage, unPublishedFileId: PublishedFileId_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_SubscribePublishedFile";
SteamRemoteStorage_EnumerateUserSubscribedFiles :: (self: *ISteamRemoteStorage, unStartIndex: uint32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles";
SteamRemoteStorage_UnsubscribePublishedFile :: (self: *ISteamRemoteStorage, unPublishedFileId: PublishedFileId_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile";
SteamRemoteStorage_UpdatePublishedFileSetChangeDescription :: (self: *ISteamRemoteStorage, updateHandle: PublishedFileUpdateHandle_t, pchChangeDescription: *char) -> bool #foreign steam "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription";
SteamRemoteStorage_GetPublishedItemVoteDetails :: (self: *ISteamRemoteStorage, unPublishedFileId: PublishedFileId_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails";
SteamRemoteStorage_UpdateUserPublishedItemVote :: (self: *ISteamRemoteStorage, unPublishedFileId: PublishedFileId_t, bVoteUp: bool) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote";
SteamRemoteStorage_GetUserPublishedItemVoteDetails :: (self: *ISteamRemoteStorage, unPublishedFileId: PublishedFileId_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails";
SteamRemoteStorage_EnumerateUserSharedWorkshopFiles :: (self: *ISteamRemoteStorage, steamId: uint64_steamid, unStartIndex: uint32, pRequiredTags: *SteamParamStringArray_t, pExcludedTags: *SteamParamStringArray_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles";
SteamRemoteStorage_PublishVideo :: (self: *ISteamRemoteStorage, eVideoProvider: EWorkshopVideoProvider, pchVideoAccount: *char, pchVideoIdentifier: *char, pchPreviewFile: *char, nConsumerAppId: AppId_t, pchTitle: *char, pchDescription: *char, eVisibility: ERemoteStoragePublishedFileVisibility, pTags: *SteamParamStringArray_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_PublishVideo";
SteamRemoteStorage_SetUserPublishedFileAction :: (self: *ISteamRemoteStorage, unPublishedFileId: PublishedFileId_t, eAction: EWorkshopFileAction) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction";
SteamRemoteStorage_EnumeratePublishedFilesByUserAction :: (self: *ISteamRemoteStorage, eAction: EWorkshopFileAction, unStartIndex: uint32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction";
SteamRemoteStorage_EnumeratePublishedWorkshopFiles :: (self: *ISteamRemoteStorage, eEnumerationType: EWorkshopEnumerationType, unStartIndex: uint32, unCount: uint32, unDays: uint32, pTags: *SteamParamStringArray_t, pUserTags: *SteamParamStringArray_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles";
SteamRemoteStorage_UGCDownloadToLocation :: (self: *ISteamRemoteStorage, hContent: UGCHandle_t, pchLocation: *char, unPriority: uint32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation";

// ISteamUserStats
SteamUserStats_v012 :: () -> *ISteamUserStats #foreign steam "SteamAPI_SteamUserStats_v012";
SteamUserStats_RequestCurrentStats :: (self: *ISteamUserStats) -> bool #foreign steam "SteamAPI_ISteamUserStats_RequestCurrentStats";
SteamUserStats_GetStatInt32 :: (self: *ISteamUserStats, pchName: *char, pData: *int32) -> bool #foreign steam "SteamAPI_ISteamUserStats_GetStatInt32";
SteamUserStats_GetStatFloat :: (self: *ISteamUserStats, pchName: *char, pData: *float) -> bool #foreign steam "SteamAPI_ISteamUserStats_GetStatFloat";
SteamUserStats_SetStatInt32 :: (self: *ISteamUserStats, pchName: *char, nData: int32) -> bool #foreign steam "SteamAPI_ISteamUserStats_SetStatInt32";
SteamUserStats_SetStatFloat :: (self: *ISteamUserStats, pchName: *char, fData: float) -> bool #foreign steam "SteamAPI_ISteamUserStats_SetStatFloat";
SteamUserStats_UpdateAvgRateStat :: (self: *ISteamUserStats, pchName: *char, flCountThisSession: float, dSessionLength: double) -> bool #foreign steam "SteamAPI_ISteamUserStats_UpdateAvgRateStat";
SteamUserStats_GetAchievement :: (self: *ISteamUserStats, pchName: *char, pbAchieved: *bool) -> bool #foreign steam "SteamAPI_ISteamUserStats_GetAchievement";
SteamUserStats_SetAchievement :: (self: *ISteamUserStats, pchName: *char) -> bool #foreign steam "SteamAPI_ISteamUserStats_SetAchievement";
SteamUserStats_ClearAchievement :: (self: *ISteamUserStats, pchName: *char) -> bool #foreign steam "SteamAPI_ISteamUserStats_ClearAchievement";
SteamUserStats_GetAchievementAndUnlockTime :: (self: *ISteamUserStats, pchName: *char, pbAchieved: *bool, punUnlockTime: *uint32) -> bool #foreign steam "SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime";
SteamUserStats_StoreStats :: (self: *ISteamUserStats) -> bool #foreign steam "SteamAPI_ISteamUserStats_StoreStats";
SteamUserStats_GetAchievementIcon :: (self: *ISteamUserStats, pchName: *char) -> s32 #foreign steam "SteamAPI_ISteamUserStats_GetAchievementIcon";
SteamUserStats_GetAchievementDisplayAttribute :: (self: *ISteamUserStats, pchName: *char, pchKey: *char) -> *char #foreign steam "SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute";
SteamUserStats_IndicateAchievementProgress :: (self: *ISteamUserStats, pchName: *char, nCurProgress: uint32, nMaxProgress: uint32) -> bool #foreign steam "SteamAPI_ISteamUserStats_IndicateAchievementProgress";
SteamUserStats_GetNumAchievements :: (self: *ISteamUserStats) -> uint32 #foreign steam "SteamAPI_ISteamUserStats_GetNumAchievements";
SteamUserStats_GetAchievementName :: (self: *ISteamUserStats, iAchievement: uint32) -> *char #foreign steam "SteamAPI_ISteamUserStats_GetAchievementName";
SteamUserStats_RequestUserStats :: (self: *ISteamUserStats, steamIDUser: uint64_steamid) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUserStats_RequestUserStats";
SteamUserStats_GetUserStatInt32 :: (self: *ISteamUserStats, steamIDUser: uint64_steamid, pchName: *char, pData: *int32) -> bool #foreign steam "SteamAPI_ISteamUserStats_GetUserStatInt32";
SteamUserStats_GetUserStatFloat :: (self: *ISteamUserStats, steamIDUser: uint64_steamid, pchName: *char, pData: *float) -> bool #foreign steam "SteamAPI_ISteamUserStats_GetUserStatFloat";
SteamUserStats_GetUserAchievement :: (self: *ISteamUserStats, steamIDUser: uint64_steamid, pchName: *char, pbAchieved: *bool) -> bool #foreign steam "SteamAPI_ISteamUserStats_GetUserAchievement";
SteamUserStats_GetUserAchievementAndUnlockTime :: (self: *ISteamUserStats, steamIDUser: uint64_steamid, pchName: *char, pbAchieved: *bool, punUnlockTime: *uint32) -> bool #foreign steam "SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime";
SteamUserStats_ResetAllStats :: (self: *ISteamUserStats, bAchievementsToo: bool) -> bool #foreign steam "SteamAPI_ISteamUserStats_ResetAllStats";
SteamUserStats_FindOrCreateLeaderboard :: (self: *ISteamUserStats, pchLeaderboardName: *char, eLeaderboardSortMethod: ELeaderboardSortMethod, eLeaderboardDisplayType: ELeaderboardDisplayType) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUserStats_FindOrCreateLeaderboard";
SteamUserStats_FindLeaderboard :: (self: *ISteamUserStats, pchLeaderboardName: *char) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUserStats_FindLeaderboard";
SteamUserStats_GetLeaderboardName :: (self: *ISteamUserStats, hSteamLeaderboard: SteamLeaderboard_t) -> *char #foreign steam "SteamAPI_ISteamUserStats_GetLeaderboardName";
SteamUserStats_GetLeaderboardEntryCount :: (self: *ISteamUserStats, hSteamLeaderboard: SteamLeaderboard_t) -> s32 #foreign steam "SteamAPI_ISteamUserStats_GetLeaderboardEntryCount";
SteamUserStats_GetLeaderboardSortMethod :: (self: *ISteamUserStats, hSteamLeaderboard: SteamLeaderboard_t) -> ELeaderboardSortMethod #foreign steam "SteamAPI_ISteamUserStats_GetLeaderboardSortMethod";
SteamUserStats_GetLeaderboardDisplayType :: (self: *ISteamUserStats, hSteamLeaderboard: SteamLeaderboard_t) -> ELeaderboardDisplayType #foreign steam "SteamAPI_ISteamUserStats_GetLeaderboardDisplayType";
SteamUserStats_DownloadLeaderboardEntries :: (self: *ISteamUserStats, hSteamLeaderboard: SteamLeaderboard_t, eLeaderboardDataRequest: ELeaderboardDataRequest, nRangeStart: s32, nRangeEnd: s32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUserStats_DownloadLeaderboardEntries";
SteamUserStats_DownloadLeaderboardEntriesForUsers :: (self: *ISteamUserStats, hSteamLeaderboard: SteamLeaderboard_t, prgUsers: *CSteamID, cUsers: s32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers";
SteamUserStats_GetDownloadedLeaderboardEntry :: (self: *ISteamUserStats, hSteamLeaderboardEntries: SteamLeaderboardEntries_t, index: s32, pLeaderboardEntry: *LeaderboardEntry_t, pDetails: *int32, cDetailsMax: s32) -> bool #foreign steam "SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry";
SteamUserStats_UploadLeaderboardScore :: (self: *ISteamUserStats, hSteamLeaderboard: SteamLeaderboard_t, eLeaderboardUploadScoreMethod: ELeaderboardUploadScoreMethod, nScore: int32, pScoreDetails: *int32, cScoreDetailsCount: s32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUserStats_UploadLeaderboardScore";
SteamUserStats_AttachLeaderboardUGC :: (self: *ISteamUserStats, hSteamLeaderboard: SteamLeaderboard_t, hUGC: UGCHandle_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUserStats_AttachLeaderboardUGC";
SteamUserStats_GetNumberOfCurrentPlayers :: (self: *ISteamUserStats) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers";
SteamUserStats_RequestGlobalAchievementPercentages :: (self: *ISteamUserStats) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages";
SteamUserStats_GetMostAchievedAchievementInfo :: (self: *ISteamUserStats, pchName: *char, unNameBufLen: uint32, pflPercent: *float, pbAchieved: *bool) -> s32 #foreign steam "SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo";
SteamUserStats_GetNextMostAchievedAchievementInfo :: (self: *ISteamUserStats, iIteratorPrevious: s32, pchName: *char, unNameBufLen: uint32, pflPercent: *float, pbAchieved: *bool) -> s32 #foreign steam "SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo";
SteamUserStats_GetAchievementAchievedPercent :: (self: *ISteamUserStats, pchName: *char, pflPercent: *float) -> bool #foreign steam "SteamAPI_ISteamUserStats_GetAchievementAchievedPercent";
SteamUserStats_RequestGlobalStats :: (self: *ISteamUserStats, nHistoryDays: s32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUserStats_RequestGlobalStats";
SteamUserStats_GetGlobalStatInt64 :: (self: *ISteamUserStats, pchStatName: *char, pData: *int64) -> bool #foreign steam "SteamAPI_ISteamUserStats_GetGlobalStatInt64";
SteamUserStats_GetGlobalStatDouble :: (self: *ISteamUserStats, pchStatName: *char, pData: *double) -> bool #foreign steam "SteamAPI_ISteamUserStats_GetGlobalStatDouble";
SteamUserStats_GetGlobalStatHistoryInt64 :: (self: *ISteamUserStats, pchStatName: *char, pData: *int64, cubData: uint32) -> int32 #foreign steam "SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64";
SteamUserStats_GetGlobalStatHistoryDouble :: (self: *ISteamUserStats, pchStatName: *char, pData: *double, cubData: uint32) -> int32 #foreign steam "SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble";
SteamUserStats_GetAchievementProgressLimitsInt32 :: (self: *ISteamUserStats, pchName: *char, pnMinProgress: *int32, pnMaxProgress: *int32) -> bool #foreign steam "SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32";
SteamUserStats_GetAchievementProgressLimitsFloat :: (self: *ISteamUserStats, pchName: *char, pfMinProgress: *float, pfMaxProgress: *float) -> bool #foreign steam "SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat";

// ISteamApps
SteamApps_v008 :: () -> *ISteamApps #foreign steam "SteamAPI_SteamApps_v008";
SteamGameServerApps_v008 :: () -> *ISteamApps #foreign steam "SteamAPI_SteamGameServerApps_v008";
SteamApps_BIsSubscribed :: (self: *ISteamApps) -> bool #foreign steam "SteamAPI_ISteamApps_BIsSubscribed";
SteamApps_BIsLowViolence :: (self: *ISteamApps) -> bool #foreign steam "SteamAPI_ISteamApps_BIsLowViolence";
SteamApps_BIsCybercafe :: (self: *ISteamApps) -> bool #foreign steam "SteamAPI_ISteamApps_BIsCybercafe";
SteamApps_BIsVACBanned :: (self: *ISteamApps) -> bool #foreign steam "SteamAPI_ISteamApps_BIsVACBanned";
SteamApps_GetCurrentGameLanguage :: (self: *ISteamApps) -> *char #foreign steam "SteamAPI_ISteamApps_GetCurrentGameLanguage";
SteamApps_GetAvailableGameLanguages :: (self: *ISteamApps) -> *char #foreign steam "SteamAPI_ISteamApps_GetAvailableGameLanguages";
SteamApps_BIsSubscribedApp :: (self: *ISteamApps, appID: AppId_t) -> bool #foreign steam "SteamAPI_ISteamApps_BIsSubscribedApp";
SteamApps_BIsDlcInstalled :: (self: *ISteamApps, appID: AppId_t) -> bool #foreign steam "SteamAPI_ISteamApps_BIsDlcInstalled";
SteamApps_GetEarliestPurchaseUnixTime :: (self: *ISteamApps, nAppID: AppId_t) -> uint32 #foreign steam "SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime";
SteamApps_BIsSubscribedFromFreeWeekend :: (self: *ISteamApps) -> bool #foreign steam "SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend";
SteamApps_GetDLCCount :: (self: *ISteamApps) -> s32 #foreign steam "SteamAPI_ISteamApps_GetDLCCount";
SteamApps_BGetDLCDataByIndex :: (self: *ISteamApps, iDLC: s32, pAppID: *AppId_t, pbAvailable: *bool, pchName: *char, cchNameBufferSize: s32) -> bool #foreign steam "SteamAPI_ISteamApps_BGetDLCDataByIndex";
SteamApps_InstallDLC :: (self: *ISteamApps, nAppID: AppId_t) #foreign steam "SteamAPI_ISteamApps_InstallDLC";
SteamApps_UninstallDLC :: (self: *ISteamApps, nAppID: AppId_t) #foreign steam "SteamAPI_ISteamApps_UninstallDLC";
SteamApps_RequestAppProofOfPurchaseKey :: (self: *ISteamApps, nAppID: AppId_t) #foreign steam "SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey";
SteamApps_GetCurrentBetaName :: (self: *ISteamApps, pchName: *char, cchNameBufferSize: s32) -> bool #foreign steam "SteamAPI_ISteamApps_GetCurrentBetaName";
SteamApps_MarkContentCorrupt :: (self: *ISteamApps, bMissingFilesOnly: bool) -> bool #foreign steam "SteamAPI_ISteamApps_MarkContentCorrupt";
SteamApps_GetInstalledDepots :: (self: *ISteamApps, appID: AppId_t, pvecDepots: *DepotId_t, cMaxDepots: uint32) -> uint32 #foreign steam "SteamAPI_ISteamApps_GetInstalledDepots";
SteamApps_GetAppInstallDir :: (self: *ISteamApps, appID: AppId_t, pchFolder: *char, cchFolderBufferSize: uint32) -> uint32 #foreign steam "SteamAPI_ISteamApps_GetAppInstallDir";
SteamApps_BIsAppInstalled :: (self: *ISteamApps, appID: AppId_t) -> bool #foreign steam "SteamAPI_ISteamApps_BIsAppInstalled";
SteamApps_GetAppOwner :: (self: *ISteamApps) -> uint64_steamid #foreign steam "SteamAPI_ISteamApps_GetAppOwner";
SteamApps_GetLaunchQueryParam :: (self: *ISteamApps, pchKey: *char) -> *char #foreign steam "SteamAPI_ISteamApps_GetLaunchQueryParam";
SteamApps_GetDlcDownloadProgress :: (self: *ISteamApps, nAppID: AppId_t, punBytesDownloaded: *uint64, punBytesTotal: *uint64) -> bool #foreign steam "SteamAPI_ISteamApps_GetDlcDownloadProgress";
SteamApps_GetAppBuildId :: (self: *ISteamApps) -> s32 #foreign steam "SteamAPI_ISteamApps_GetAppBuildId";
SteamApps_RequestAllProofOfPurchaseKeys :: (self: *ISteamApps) #foreign steam "SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys";
SteamApps_GetFileDetails :: (self: *ISteamApps, pszFileName: *char) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamApps_GetFileDetails";
SteamApps_GetLaunchCommandLine :: (self: *ISteamApps, pszCommandLine: *char, cubCommandLine: s32) -> s32 #foreign steam "SteamAPI_ISteamApps_GetLaunchCommandLine";
SteamApps_BIsSubscribedFromFamilySharing :: (self: *ISteamApps) -> bool #foreign steam "SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing";
SteamApps_BIsTimedTrial :: (self: *ISteamApps, punSecondsAllowed: *uint32, punSecondsPlayed: *uint32) -> bool #foreign steam "SteamAPI_ISteamApps_BIsTimedTrial";

// ISteamNetworking
SteamNetworking_v006 :: () -> *ISteamNetworking #foreign steam "SteamAPI_SteamNetworking_v006";
SteamGameServerNetworking_v006 :: () -> *ISteamNetworking #foreign steam "SteamAPI_SteamGameServerNetworking_v006";
SteamNetworking_SendP2PPacket :: (self: *ISteamNetworking, steamIDRemote: uint64_steamid, pubData: *void, cubData: uint32, eP2PSendType: EP2PSend, nChannel: s32) -> bool #foreign steam "SteamAPI_ISteamNetworking_SendP2PPacket";
SteamNetworking_IsP2PPacketAvailable :: (self: *ISteamNetworking, pcubMsgSize: *uint32, nChannel: s32) -> bool #foreign steam "SteamAPI_ISteamNetworking_IsP2PPacketAvailable";
SteamNetworking_ReadP2PPacket :: (self: *ISteamNetworking, pubDest: *void, cubDest: uint32, pcubMsgSize: *uint32, psteamIDRemote: *CSteamID, nChannel: s32) -> bool #foreign steam "SteamAPI_ISteamNetworking_ReadP2PPacket";
SteamNetworking_AcceptP2PSessionWithUser :: (self: *ISteamNetworking, steamIDRemote: uint64_steamid) -> bool #foreign steam "SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser";
SteamNetworking_CloseP2PSessionWithUser :: (self: *ISteamNetworking, steamIDRemote: uint64_steamid) -> bool #foreign steam "SteamAPI_ISteamNetworking_CloseP2PSessionWithUser";
SteamNetworking_CloseP2PChannelWithUser :: (self: *ISteamNetworking, steamIDRemote: uint64_steamid, nChannel: s32) -> bool #foreign steam "SteamAPI_ISteamNetworking_CloseP2PChannelWithUser";
SteamNetworking_GetP2PSessionState :: (self: *ISteamNetworking, steamIDRemote: uint64_steamid, pConnectionState: *P2PSessionState_t) -> bool #foreign steam "SteamAPI_ISteamNetworking_GetP2PSessionState";
SteamNetworking_AllowP2PPacketRelay :: (self: *ISteamNetworking, bAllow: bool) -> bool #foreign steam "SteamAPI_ISteamNetworking_AllowP2PPacketRelay";
SteamNetworking_CreateListenSocket :: (self: *ISteamNetworking, nVirtualP2PPort: s32, nIP: SteamIPAddress_t, nPort: uint16, bAllowUseOfPacketRelay: bool) -> SNetListenSocket_t #foreign steam "SteamAPI_ISteamNetworking_CreateListenSocket";
SteamNetworking_CreateP2PConnectionSocket :: (self: *ISteamNetworking, steamIDTarget: uint64_steamid, nVirtualPort: s32, nTimeoutSec: s32, bAllowUseOfPacketRelay: bool) -> SNetSocket_t #foreign steam "SteamAPI_ISteamNetworking_CreateP2PConnectionSocket";
SteamNetworking_CreateConnectionSocket :: (self: *ISteamNetworking, nIP: SteamIPAddress_t, nPort: uint16, nTimeoutSec: s32) -> SNetSocket_t #foreign steam "SteamAPI_ISteamNetworking_CreateConnectionSocket";
SteamNetworking_DestroySocket :: (self: *ISteamNetworking, hSocket: SNetSocket_t, bNotifyRemoteEnd: bool) -> bool #foreign steam "SteamAPI_ISteamNetworking_DestroySocket";
SteamNetworking_DestroyListenSocket :: (self: *ISteamNetworking, hSocket: SNetListenSocket_t, bNotifyRemoteEnd: bool) -> bool #foreign steam "SteamAPI_ISteamNetworking_DestroyListenSocket";
SteamNetworking_SendDataOnSocket :: (self: *ISteamNetworking, hSocket: SNetSocket_t, pubData: *void, cubData: uint32, bReliable: bool) -> bool #foreign steam "SteamAPI_ISteamNetworking_SendDataOnSocket";
SteamNetworking_IsDataAvailableOnSocket :: (self: *ISteamNetworking, hSocket: SNetSocket_t, pcubMsgSize: *uint32) -> bool #foreign steam "SteamAPI_ISteamNetworking_IsDataAvailableOnSocket";
SteamNetworking_RetrieveDataFromSocket :: (self: *ISteamNetworking, hSocket: SNetSocket_t, pubDest: *void, cubDest: uint32, pcubMsgSize: *uint32) -> bool #foreign steam "SteamAPI_ISteamNetworking_RetrieveDataFromSocket";
SteamNetworking_IsDataAvailable :: (self: *ISteamNetworking, hListenSocket: SNetListenSocket_t, pcubMsgSize: *uint32, phSocket: *SNetSocket_t) -> bool #foreign steam "SteamAPI_ISteamNetworking_IsDataAvailable";
SteamNetworking_RetrieveData :: (self: *ISteamNetworking, hListenSocket: SNetListenSocket_t, pubDest: *void, cubDest: uint32, pcubMsgSize: *uint32, phSocket: *SNetSocket_t) -> bool #foreign steam "SteamAPI_ISteamNetworking_RetrieveData";
SteamNetworking_GetSocketInfo :: (self: *ISteamNetworking, hSocket: SNetSocket_t, pSteamIDRemote: *CSteamID, peSocketStatus: *s32, punIPRemote: *SteamIPAddress_t, punPortRemote: *uint16) -> bool #foreign steam "SteamAPI_ISteamNetworking_GetSocketInfo";
SteamNetworking_GetListenSocketInfo :: (self: *ISteamNetworking, hListenSocket: SNetListenSocket_t, pnIP: *SteamIPAddress_t, pnPort: *uint16) -> bool #foreign steam "SteamAPI_ISteamNetworking_GetListenSocketInfo";
SteamNetworking_GetSocketConnectionType :: (self: *ISteamNetworking, hSocket: SNetSocket_t) -> ESNetSocketConnectionType #foreign steam "SteamAPI_ISteamNetworking_GetSocketConnectionType";
SteamNetworking_GetMaxPacketSize :: (self: *ISteamNetworking, hSocket: SNetSocket_t) -> s32 #foreign steam "SteamAPI_ISteamNetworking_GetMaxPacketSize";

// ISteamScreenshots
SteamScreenshots_v003 :: () -> *ISteamScreenshots #foreign steam "SteamAPI_SteamScreenshots_v003";
SteamScreenshots_WriteScreenshot :: (self: *ISteamScreenshots, pubRGB: *void, cubRGB: uint32, nWidth: s32, nHeight: s32) -> ScreenshotHandle #foreign steam "SteamAPI_ISteamScreenshots_WriteScreenshot";
SteamScreenshots_AddScreenshotToLibrary :: (self: *ISteamScreenshots, pchFilename: *char, pchThumbnailFilename: *char, nWidth: s32, nHeight: s32) -> ScreenshotHandle #foreign steam "SteamAPI_ISteamScreenshots_AddScreenshotToLibrary";
SteamScreenshots_TriggerScreenshot :: (self: *ISteamScreenshots) #foreign steam "SteamAPI_ISteamScreenshots_TriggerScreenshot";
SteamScreenshots_HookScreenshots :: (self: *ISteamScreenshots, bHook: bool) #foreign steam "SteamAPI_ISteamScreenshots_HookScreenshots";
SteamScreenshots_SetLocation :: (self: *ISteamScreenshots, hScreenshot: ScreenshotHandle, pchLocation: *char) -> bool #foreign steam "SteamAPI_ISteamScreenshots_SetLocation";
SteamScreenshots_TagUser :: (self: *ISteamScreenshots, hScreenshot: ScreenshotHandle, steamID: uint64_steamid) -> bool #foreign steam "SteamAPI_ISteamScreenshots_TagUser";
SteamScreenshots_TagPublishedFile :: (self: *ISteamScreenshots, hScreenshot: ScreenshotHandle, unPublishedFileID: PublishedFileId_t) -> bool #foreign steam "SteamAPI_ISteamScreenshots_TagPublishedFile";
SteamScreenshots_IsScreenshotsHooked :: (self: *ISteamScreenshots) -> bool #foreign steam "SteamAPI_ISteamScreenshots_IsScreenshotsHooked";
SteamScreenshots_AddVRScreenshotToLibrary :: (self: *ISteamScreenshots, eType: EVRScreenshotType, pchFilename: *char, pchVRFilename: *char) -> ScreenshotHandle #foreign steam "SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary";

// ISteamMusic
SteamMusic_v001 :: () -> *ISteamMusic #foreign steam "SteamAPI_SteamMusic_v001";
SteamMusic_BIsEnabled :: (self: *ISteamMusic) -> bool #foreign steam "SteamAPI_ISteamMusic_BIsEnabled";
SteamMusic_BIsPlaying :: (self: *ISteamMusic) -> bool #foreign steam "SteamAPI_ISteamMusic_BIsPlaying";
SteamMusic_GetPlaybackStatus :: (self: *ISteamMusic) -> AudioPlayback_Status #foreign steam "SteamAPI_ISteamMusic_GetPlaybackStatus";
SteamMusic_Play :: (self: *ISteamMusic) #foreign steam "SteamAPI_ISteamMusic_Play";
SteamMusic_Pause :: (self: *ISteamMusic) #foreign steam "SteamAPI_ISteamMusic_Pause";
SteamMusic_PlayPrevious :: (self: *ISteamMusic) #foreign steam "SteamAPI_ISteamMusic_PlayPrevious";
SteamMusic_PlayNext :: (self: *ISteamMusic) #foreign steam "SteamAPI_ISteamMusic_PlayNext";
SteamMusic_SetVolume :: (self: *ISteamMusic, flVolume: float) #foreign steam "SteamAPI_ISteamMusic_SetVolume";
SteamMusic_GetVolume :: (self: *ISteamMusic) -> float #foreign steam "SteamAPI_ISteamMusic_GetVolume";

// ISteamMusicRemote
SteamMusicRemote_v001 :: () -> *ISteamMusicRemote #foreign steam "SteamAPI_SteamMusicRemote_v001";
SteamMusicRemote_RegisterSteamMusicRemote :: (self: *ISteamMusicRemote, pchName: *char) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote";
SteamMusicRemote_DeregisterSteamMusicRemote :: (self: *ISteamMusicRemote) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote";
SteamMusicRemote_BIsCurrentMusicRemote :: (self: *ISteamMusicRemote) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote";
SteamMusicRemote_BActivationSuccess :: (self: *ISteamMusicRemote, bValue: bool) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_BActivationSuccess";
SteamMusicRemote_SetDisplayName :: (self: *ISteamMusicRemote, pchDisplayName: *char) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_SetDisplayName";
SteamMusicRemote_SetPNGIcon_64x64 :: (self: *ISteamMusicRemote, pvBuffer: *void, cbBufferLength: uint32) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64";
SteamMusicRemote_EnablePlayPrevious :: (self: *ISteamMusicRemote, bValue: bool) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_EnablePlayPrevious";
SteamMusicRemote_EnablePlayNext :: (self: *ISteamMusicRemote, bValue: bool) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_EnablePlayNext";
SteamMusicRemote_EnableShuffled :: (self: *ISteamMusicRemote, bValue: bool) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_EnableShuffled";
SteamMusicRemote_EnableLooped :: (self: *ISteamMusicRemote, bValue: bool) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_EnableLooped";
SteamMusicRemote_EnableQueue :: (self: *ISteamMusicRemote, bValue: bool) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_EnableQueue";
SteamMusicRemote_EnablePlaylists :: (self: *ISteamMusicRemote, bValue: bool) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_EnablePlaylists";
SteamMusicRemote_UpdatePlaybackStatus :: (self: *ISteamMusicRemote, nStatus: AudioPlayback_Status) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus";
SteamMusicRemote_UpdateShuffled :: (self: *ISteamMusicRemote, bValue: bool) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_UpdateShuffled";
SteamMusicRemote_UpdateLooped :: (self: *ISteamMusicRemote, bValue: bool) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_UpdateLooped";
SteamMusicRemote_UpdateVolume :: (self: *ISteamMusicRemote, flValue: float) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_UpdateVolume";
SteamMusicRemote_CurrentEntryWillChange :: (self: *ISteamMusicRemote) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_CurrentEntryWillChange";
SteamMusicRemote_CurrentEntryIsAvailable :: (self: *ISteamMusicRemote, bAvailable: bool) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable";
SteamMusicRemote_UpdateCurrentEntryText :: (self: *ISteamMusicRemote, pchText: *char) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText";
SteamMusicRemote_UpdateCurrentEntryElapsedSeconds :: (self: *ISteamMusicRemote, nValue: s32) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds";
SteamMusicRemote_UpdateCurrentEntryCoverArt :: (self: *ISteamMusicRemote, pvBuffer: *void, cbBufferLength: uint32) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt";
SteamMusicRemote_CurrentEntryDidChange :: (self: *ISteamMusicRemote) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_CurrentEntryDidChange";
SteamMusicRemote_QueueWillChange :: (self: *ISteamMusicRemote) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_QueueWillChange";
SteamMusicRemote_ResetQueueEntries :: (self: *ISteamMusicRemote) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_ResetQueueEntries";
SteamMusicRemote_SetQueueEntry :: (self: *ISteamMusicRemote, nID: s32, nPosition: s32, pchEntryText: *char) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_SetQueueEntry";
SteamMusicRemote_SetCurrentQueueEntry :: (self: *ISteamMusicRemote, nID: s32) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry";
SteamMusicRemote_QueueDidChange :: (self: *ISteamMusicRemote) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_QueueDidChange";
SteamMusicRemote_PlaylistWillChange :: (self: *ISteamMusicRemote) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_PlaylistWillChange";
SteamMusicRemote_ResetPlaylistEntries :: (self: *ISteamMusicRemote) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_ResetPlaylistEntries";
SteamMusicRemote_SetPlaylistEntry :: (self: *ISteamMusicRemote, nID: s32, nPosition: s32, pchEntryText: *char) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_SetPlaylistEntry";
SteamMusicRemote_SetCurrentPlaylistEntry :: (self: *ISteamMusicRemote, nID: s32) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry";
SteamMusicRemote_PlaylistDidChange :: (self: *ISteamMusicRemote) -> bool #foreign steam "SteamAPI_ISteamMusicRemote_PlaylistDidChange";

// ISteamHTTP
SteamHTTP_v003 :: () -> *ISteamHTTP #foreign steam "SteamAPI_SteamHTTP_v003";
SteamGameServerHTTP_v003 :: () -> *ISteamHTTP #foreign steam "SteamAPI_SteamGameServerHTTP_v003";
SteamHTTP_CreateHTTPRequest :: (self: *ISteamHTTP, eHTTPRequestMethod: EHTTPMethod, pchAbsoluteURL: *char) -> HTTPRequestHandle #foreign steam "SteamAPI_ISteamHTTP_CreateHTTPRequest";
SteamHTTP_SetHTTPRequestContextValue :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle, ulContextValue: uint64) -> bool #foreign steam "SteamAPI_ISteamHTTP_SetHTTPRequestContextValue";
SteamHTTP_SetHTTPRequestNetworkActivityTimeout :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle, unTimeoutSeconds: uint32) -> bool #foreign steam "SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout";
SteamHTTP_SetHTTPRequestHeaderValue :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle, pchHeaderName: *char, pchHeaderValue: *char) -> bool #foreign steam "SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue";
SteamHTTP_SetHTTPRequestGetOrPostParameter :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle, pchParamName: *char, pchParamValue: *char) -> bool #foreign steam "SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter";
SteamHTTP_SendHTTPRequest :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle, pCallHandle: *SteamAPICall_t) -> bool #foreign steam "SteamAPI_ISteamHTTP_SendHTTPRequest";
SteamHTTP_SendHTTPRequestAndStreamResponse :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle, pCallHandle: *SteamAPICall_t) -> bool #foreign steam "SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse";
SteamHTTP_DeferHTTPRequest :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle) -> bool #foreign steam "SteamAPI_ISteamHTTP_DeferHTTPRequest";
SteamHTTP_PrioritizeHTTPRequest :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle) -> bool #foreign steam "SteamAPI_ISteamHTTP_PrioritizeHTTPRequest";
SteamHTTP_GetHTTPResponseHeaderSize :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle, pchHeaderName: *char, unResponseHeaderSize: *uint32) -> bool #foreign steam "SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize";
SteamHTTP_GetHTTPResponseHeaderValue :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle, pchHeaderName: *char, pHeaderValueBuffer: *uint8, unBufferSize: uint32) -> bool #foreign steam "SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue";
SteamHTTP_GetHTTPResponseBodySize :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle, unBodySize: *uint32) -> bool #foreign steam "SteamAPI_ISteamHTTP_GetHTTPResponseBodySize";
SteamHTTP_GetHTTPResponseBodyData :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle, pBodyDataBuffer: *uint8, unBufferSize: uint32) -> bool #foreign steam "SteamAPI_ISteamHTTP_GetHTTPResponseBodyData";
SteamHTTP_GetHTTPStreamingResponseBodyData :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle, cOffset: uint32, pBodyDataBuffer: *uint8, unBufferSize: uint32) -> bool #foreign steam "SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData";
SteamHTTP_ReleaseHTTPRequest :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle) -> bool #foreign steam "SteamAPI_ISteamHTTP_ReleaseHTTPRequest";
SteamHTTP_GetHTTPDownloadProgressPct :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle, pflPercentOut: *float) -> bool #foreign steam "SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct";
SteamHTTP_SetHTTPRequestRawPostBody :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle, pchContentType: *char, pubBody: *uint8, unBodyLen: uint32) -> bool #foreign steam "SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody";
SteamHTTP_CreateCookieContainer :: (self: *ISteamHTTP, bAllowResponsesToModify: bool) -> HTTPCookieContainerHandle #foreign steam "SteamAPI_ISteamHTTP_CreateCookieContainer";
SteamHTTP_ReleaseCookieContainer :: (self: *ISteamHTTP, hCookieContainer: HTTPCookieContainerHandle) -> bool #foreign steam "SteamAPI_ISteamHTTP_ReleaseCookieContainer";
SteamHTTP_SetCookie :: (self: *ISteamHTTP, hCookieContainer: HTTPCookieContainerHandle, pchHost: *char, pchUrl: *char, pchCookie: *char) -> bool #foreign steam "SteamAPI_ISteamHTTP_SetCookie";
SteamHTTP_SetHTTPRequestCookieContainer :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle, hCookieContainer: HTTPCookieContainerHandle) -> bool #foreign steam "SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer";
SteamHTTP_SetHTTPRequestUserAgentInfo :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle, pchUserAgentInfo: *char) -> bool #foreign steam "SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo";
SteamHTTP_SetHTTPRequestRequiresVerifiedCertificate :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle, bRequireVerifiedCertificate: bool) -> bool #foreign steam "SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate";
SteamHTTP_SetHTTPRequestAbsoluteTimeoutMS :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle, unMilliseconds: uint32) -> bool #foreign steam "SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS";
SteamHTTP_GetHTTPRequestWasTimedOut :: (self: *ISteamHTTP, hRequest: HTTPRequestHandle, pbWasTimedOut: *bool) -> bool #foreign steam "SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut";

// ISteamInput
SteamInput_v001 :: () -> *ISteamInput #foreign steam "SteamAPI_SteamInput_v001";
SteamInput_Init :: (self: *ISteamInput) -> bool #foreign steam "SteamAPI_ISteamInput_Init";
SteamInput_Shutdown :: (self: *ISteamInput) -> bool #foreign steam "SteamAPI_ISteamInput_Shutdown";
SteamInput_RunFrame :: (self: *ISteamInput) #foreign steam "SteamAPI_ISteamInput_RunFrame";
SteamInput_GetConnectedControllers :: (self: *ISteamInput, handlesOut: *InputHandle_t) -> s32 #foreign steam "SteamAPI_ISteamInput_GetConnectedControllers";
SteamInput_GetActionSetHandle :: (self: *ISteamInput, pszActionSetName: *char) -> InputActionSetHandle_t #foreign steam "SteamAPI_ISteamInput_GetActionSetHandle";
SteamInput_ActivateActionSet :: (self: *ISteamInput, inputHandle: InputHandle_t, actionSetHandle: InputActionSetHandle_t) #foreign steam "SteamAPI_ISteamInput_ActivateActionSet";
SteamInput_GetCurrentActionSet :: (self: *ISteamInput, inputHandle: InputHandle_t) -> InputActionSetHandle_t #foreign steam "SteamAPI_ISteamInput_GetCurrentActionSet";
SteamInput_ActivateActionSetLayer :: (self: *ISteamInput, inputHandle: InputHandle_t, actionSetLayerHandle: InputActionSetHandle_t) #foreign steam "SteamAPI_ISteamInput_ActivateActionSetLayer";
SteamInput_DeactivateActionSetLayer :: (self: *ISteamInput, inputHandle: InputHandle_t, actionSetLayerHandle: InputActionSetHandle_t) #foreign steam "SteamAPI_ISteamInput_DeactivateActionSetLayer";
SteamInput_DeactivateAllActionSetLayers :: (self: *ISteamInput, inputHandle: InputHandle_t) #foreign steam "SteamAPI_ISteamInput_DeactivateAllActionSetLayers";
SteamInput_GetActiveActionSetLayers :: (self: *ISteamInput, inputHandle: InputHandle_t, handlesOut: *InputActionSetHandle_t) -> s32 #foreign steam "SteamAPI_ISteamInput_GetActiveActionSetLayers";
SteamInput_GetDigitalActionHandle :: (self: *ISteamInput, pszActionName: *char) -> InputDigitalActionHandle_t #foreign steam "SteamAPI_ISteamInput_GetDigitalActionHandle";
SteamInput_GetDigitalActionData :: (self: *ISteamInput, inputHandle: InputHandle_t, digitalActionHandle: InputDigitalActionHandle_t) -> InputDigitalActionData_t #foreign steam "SteamAPI_ISteamInput_GetDigitalActionData";
SteamInput_GetDigitalActionOrigins :: (self: *ISteamInput, inputHandle: InputHandle_t, actionSetHandle: InputActionSetHandle_t, digitalActionHandle: InputDigitalActionHandle_t, originsOut: *EInputActionOrigin) -> s32 #foreign steam "SteamAPI_ISteamInput_GetDigitalActionOrigins";
SteamInput_GetAnalogActionHandle :: (self: *ISteamInput, pszActionName: *char) -> InputAnalogActionHandle_t #foreign steam "SteamAPI_ISteamInput_GetAnalogActionHandle";
SteamInput_GetAnalogActionData :: (self: *ISteamInput, inputHandle: InputHandle_t, analogActionHandle: InputAnalogActionHandle_t) -> InputAnalogActionData_t #foreign steam "SteamAPI_ISteamInput_GetAnalogActionData";
SteamInput_GetAnalogActionOrigins :: (self: *ISteamInput, inputHandle: InputHandle_t, actionSetHandle: InputActionSetHandle_t, analogActionHandle: InputAnalogActionHandle_t, originsOut: *EInputActionOrigin) -> s32 #foreign steam "SteamAPI_ISteamInput_GetAnalogActionOrigins";
SteamInput_GetGlyphForActionOrigin :: (self: *ISteamInput, eOrigin: EInputActionOrigin) -> *char #foreign steam "SteamAPI_ISteamInput_GetGlyphForActionOrigin";
SteamInput_GetStringForActionOrigin :: (self: *ISteamInput, eOrigin: EInputActionOrigin) -> *char #foreign steam "SteamAPI_ISteamInput_GetStringForActionOrigin";
SteamInput_StopAnalogActionMomentum :: (self: *ISteamInput, inputHandle: InputHandle_t, eAction: InputAnalogActionHandle_t) #foreign steam "SteamAPI_ISteamInput_StopAnalogActionMomentum";
SteamInput_GetMotionData :: (self: *ISteamInput, inputHandle: InputHandle_t) -> InputMotionData_t #foreign steam "SteamAPI_ISteamInput_GetMotionData";
SteamInput_TriggerVibration :: (self: *ISteamInput, inputHandle: InputHandle_t, usLeftSpeed: u16, usRightSpeed: u16) #foreign steam "SteamAPI_ISteamInput_TriggerVibration";
SteamInput_SetLEDColor :: (self: *ISteamInput, inputHandle: InputHandle_t, nColorR: uint8, nColorG: uint8, nColorB: uint8, nFlags: u32) #foreign steam "SteamAPI_ISteamInput_SetLEDColor";
SteamInput_TriggerHapticPulse :: (self: *ISteamInput, inputHandle: InputHandle_t, eTargetPad: ESteamControllerPad, usDurationMicroSec: u16) #foreign steam "SteamAPI_ISteamInput_TriggerHapticPulse";
SteamInput_TriggerRepeatedHapticPulse :: (self: *ISteamInput, inputHandle: InputHandle_t, eTargetPad: ESteamControllerPad, usDurationMicroSec: u16, usOffMicroSec: u16, unRepeat: u16, nFlags: u32) #foreign steam "SteamAPI_ISteamInput_TriggerRepeatedHapticPulse";
SteamInput_ShowBindingPanel :: (self: *ISteamInput, inputHandle: InputHandle_t) -> bool #foreign steam "SteamAPI_ISteamInput_ShowBindingPanel";
SteamInput_GetInputTypeForHandle :: (self: *ISteamInput, inputHandle: InputHandle_t) -> ESteamInputType #foreign steam "SteamAPI_ISteamInput_GetInputTypeForHandle";
SteamInput_GetControllerForGamepadIndex :: (self: *ISteamInput, nIndex: s32) -> InputHandle_t #foreign steam "SteamAPI_ISteamInput_GetControllerForGamepadIndex";
SteamInput_GetGamepadIndexForController :: (self: *ISteamInput, ulinputHandle: InputHandle_t) -> s32 #foreign steam "SteamAPI_ISteamInput_GetGamepadIndexForController";
SteamInput_GetStringForXboxOrigin :: (self: *ISteamInput, eOrigin: EXboxOrigin) -> *char #foreign steam "SteamAPI_ISteamInput_GetStringForXboxOrigin";
SteamInput_GetGlyphForXboxOrigin :: (self: *ISteamInput, eOrigin: EXboxOrigin) -> *char #foreign steam "SteamAPI_ISteamInput_GetGlyphForXboxOrigin";
SteamInput_GetActionOriginFromXboxOrigin :: (self: *ISteamInput, inputHandle: InputHandle_t, eOrigin: EXboxOrigin) -> EInputActionOrigin #foreign steam "SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin";
SteamInput_TranslateActionOrigin :: (self: *ISteamInput, eDestinationInputType: ESteamInputType, eSourceOrigin: EInputActionOrigin) -> EInputActionOrigin #foreign steam "SteamAPI_ISteamInput_TranslateActionOrigin";
SteamInput_GetDeviceBindingRevision :: (self: *ISteamInput, inputHandle: InputHandle_t, pMajor: *s32, pMinor: *s32) -> bool #foreign steam "SteamAPI_ISteamInput_GetDeviceBindingRevision";
SteamInput_GetRemotePlaySessionID :: (self: *ISteamInput, inputHandle: InputHandle_t) -> uint32 #foreign steam "SteamAPI_ISteamInput_GetRemotePlaySessionID";

// ISteamController
SteamController_v007 :: () -> *ISteamController #foreign steam "SteamAPI_SteamController_v007";
SteamController_Init :: (self: *ISteamController) -> bool #foreign steam "SteamAPI_ISteamController_Init";
SteamController_Shutdown :: (self: *ISteamController) -> bool #foreign steam "SteamAPI_ISteamController_Shutdown";
SteamController_RunFrame :: (self: *ISteamController) #foreign steam "SteamAPI_ISteamController_RunFrame";
SteamController_GetConnectedControllers :: (self: *ISteamController, handlesOut: *ControllerHandle_t) -> s32 #foreign steam "SteamAPI_ISteamController_GetConnectedControllers";
SteamController_GetActionSetHandle :: (self: *ISteamController, pszActionSetName: *char) -> ControllerActionSetHandle_t #foreign steam "SteamAPI_ISteamController_GetActionSetHandle";
SteamController_ActivateActionSet :: (self: *ISteamController, controllerHandle: ControllerHandle_t, actionSetHandle: ControllerActionSetHandle_t) #foreign steam "SteamAPI_ISteamController_ActivateActionSet";
SteamController_GetCurrentActionSet :: (self: *ISteamController, controllerHandle: ControllerHandle_t) -> ControllerActionSetHandle_t #foreign steam "SteamAPI_ISteamController_GetCurrentActionSet";
SteamController_ActivateActionSetLayer :: (self: *ISteamController, controllerHandle: ControllerHandle_t, actionSetLayerHandle: ControllerActionSetHandle_t) #foreign steam "SteamAPI_ISteamController_ActivateActionSetLayer";
SteamController_DeactivateActionSetLayer :: (self: *ISteamController, controllerHandle: ControllerHandle_t, actionSetLayerHandle: ControllerActionSetHandle_t) #foreign steam "SteamAPI_ISteamController_DeactivateActionSetLayer";
SteamController_DeactivateAllActionSetLayers :: (self: *ISteamController, controllerHandle: ControllerHandle_t) #foreign steam "SteamAPI_ISteamController_DeactivateAllActionSetLayers";
SteamController_GetActiveActionSetLayers :: (self: *ISteamController, controllerHandle: ControllerHandle_t, handlesOut: *ControllerActionSetHandle_t) -> s32 #foreign steam "SteamAPI_ISteamController_GetActiveActionSetLayers";
SteamController_GetDigitalActionHandle :: (self: *ISteamController, pszActionName: *char) -> ControllerDigitalActionHandle_t #foreign steam "SteamAPI_ISteamController_GetDigitalActionHandle";
SteamController_GetDigitalActionData :: (self: *ISteamController, controllerHandle: ControllerHandle_t, digitalActionHandle: ControllerDigitalActionHandle_t) -> InputDigitalActionData_t #foreign steam "SteamAPI_ISteamController_GetDigitalActionData";
SteamController_GetDigitalActionOrigins :: (self: *ISteamController, controllerHandle: ControllerHandle_t, actionSetHandle: ControllerActionSetHandle_t, digitalActionHandle: ControllerDigitalActionHandle_t, originsOut: *EControllerActionOrigin) -> s32 #foreign steam "SteamAPI_ISteamController_GetDigitalActionOrigins";
SteamController_GetAnalogActionHandle :: (self: *ISteamController, pszActionName: *char) -> ControllerAnalogActionHandle_t #foreign steam "SteamAPI_ISteamController_GetAnalogActionHandle";
SteamController_GetAnalogActionData :: (self: *ISteamController, controllerHandle: ControllerHandle_t, analogActionHandle: ControllerAnalogActionHandle_t) -> InputAnalogActionData_t #foreign steam "SteamAPI_ISteamController_GetAnalogActionData";
SteamController_GetAnalogActionOrigins :: (self: *ISteamController, controllerHandle: ControllerHandle_t, actionSetHandle: ControllerActionSetHandle_t, analogActionHandle: ControllerAnalogActionHandle_t, originsOut: *EControllerActionOrigin) -> s32 #foreign steam "SteamAPI_ISteamController_GetAnalogActionOrigins";
SteamController_GetGlyphForActionOrigin :: (self: *ISteamController, eOrigin: EControllerActionOrigin) -> *char #foreign steam "SteamAPI_ISteamController_GetGlyphForActionOrigin";
SteamController_GetStringForActionOrigin :: (self: *ISteamController, eOrigin: EControllerActionOrigin) -> *char #foreign steam "SteamAPI_ISteamController_GetStringForActionOrigin";
SteamController_StopAnalogActionMomentum :: (self: *ISteamController, controllerHandle: ControllerHandle_t, eAction: ControllerAnalogActionHandle_t) #foreign steam "SteamAPI_ISteamController_StopAnalogActionMomentum";
SteamController_GetMotionData :: (self: *ISteamController, controllerHandle: ControllerHandle_t) -> InputMotionData_t #foreign steam "SteamAPI_ISteamController_GetMotionData";
SteamController_TriggerHapticPulse :: (self: *ISteamController, controllerHandle: ControllerHandle_t, eTargetPad: ESteamControllerPad, usDurationMicroSec: u16) #foreign steam "SteamAPI_ISteamController_TriggerHapticPulse";
SteamController_TriggerRepeatedHapticPulse :: (self: *ISteamController, controllerHandle: ControllerHandle_t, eTargetPad: ESteamControllerPad, usDurationMicroSec: u16, usOffMicroSec: u16, unRepeat: u16, nFlags: u32) #foreign steam "SteamAPI_ISteamController_TriggerRepeatedHapticPulse";
SteamController_TriggerVibration :: (self: *ISteamController, controllerHandle: ControllerHandle_t, usLeftSpeed: u16, usRightSpeed: u16) #foreign steam "SteamAPI_ISteamController_TriggerVibration";
SteamController_SetLEDColor :: (self: *ISteamController, controllerHandle: ControllerHandle_t, nColorR: uint8, nColorG: uint8, nColorB: uint8, nFlags: u32) #foreign steam "SteamAPI_ISteamController_SetLEDColor";
SteamController_ShowBindingPanel :: (self: *ISteamController, controllerHandle: ControllerHandle_t) -> bool #foreign steam "SteamAPI_ISteamController_ShowBindingPanel";
SteamController_GetInputTypeForHandle :: (self: *ISteamController, controllerHandle: ControllerHandle_t) -> ESteamInputType #foreign steam "SteamAPI_ISteamController_GetInputTypeForHandle";
SteamController_GetControllerForGamepadIndex :: (self: *ISteamController, nIndex: s32) -> ControllerHandle_t #foreign steam "SteamAPI_ISteamController_GetControllerForGamepadIndex";
SteamController_GetGamepadIndexForController :: (self: *ISteamController, ulControllerHandle: ControllerHandle_t) -> s32 #foreign steam "SteamAPI_ISteamController_GetGamepadIndexForController";
SteamController_GetStringForXboxOrigin :: (self: *ISteamController, eOrigin: EXboxOrigin) -> *char #foreign steam "SteamAPI_ISteamController_GetStringForXboxOrigin";
SteamController_GetGlyphForXboxOrigin :: (self: *ISteamController, eOrigin: EXboxOrigin) -> *char #foreign steam "SteamAPI_ISteamController_GetGlyphForXboxOrigin";
SteamController_GetActionOriginFromXboxOrigin :: (self: *ISteamController, controllerHandle: ControllerHandle_t, eOrigin: EXboxOrigin) -> EControllerActionOrigin #foreign steam "SteamAPI_ISteamController_GetActionOriginFromXboxOrigin";
SteamController_TranslateActionOrigin :: (self: *ISteamController, eDestinationInputType: ESteamInputType, eSourceOrigin: EControllerActionOrigin) -> EControllerActionOrigin #foreign steam "SteamAPI_ISteamController_TranslateActionOrigin";
SteamController_GetControllerBindingRevision :: (self: *ISteamController, controllerHandle: ControllerHandle_t, pMajor: *s32, pMinor: *s32) -> bool #foreign steam "SteamAPI_ISteamController_GetControllerBindingRevision";

// ISteamUGC
SteamUGC_v014 :: () -> *ISteamUGC #foreign steam "SteamAPI_SteamUGC_v014";
SteamGameServerUGC_v014 :: () -> *ISteamUGC #foreign steam "SteamAPI_SteamGameServerUGC_v014";
SteamUGC_CreateQueryUserUGCRequest :: (self: *ISteamUGC, unAccountID: AccountID_t, eListType: EUserUGCList, eMatchingUGCType: EUGCMatchingUGCType, eSortOrder: EUserUGCListSortOrder, nCreatorAppID: AppId_t, nConsumerAppID: AppId_t, unPage: uint32) -> UGCQueryHandle_t #foreign steam "SteamAPI_ISteamUGC_CreateQueryUserUGCRequest";
SteamUGC_CreateQueryAllUGCRequestPage :: (self: *ISteamUGC, eQueryType: EUGCQuery, eMatchingeMatchingUGCTypeFileType: EUGCMatchingUGCType, nCreatorAppID: AppId_t, nConsumerAppID: AppId_t, unPage: uint32) -> UGCQueryHandle_t #foreign steam "SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage";
SteamUGC_CreateQueryAllUGCRequestCursor :: (self: *ISteamUGC, eQueryType: EUGCQuery, eMatchingeMatchingUGCTypeFileType: EUGCMatchingUGCType, nCreatorAppID: AppId_t, nConsumerAppID: AppId_t, pchCursor: *char) -> UGCQueryHandle_t #foreign steam "SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor";
SteamUGC_CreateQueryUGCDetailsRequest :: (self: *ISteamUGC, pvecPublishedFileID: *PublishedFileId_t, unNumPublishedFileIDs: uint32) -> UGCQueryHandle_t #foreign steam "SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest";
SteamUGC_SendQueryUGCRequest :: (self: *ISteamUGC, handle: UGCQueryHandle_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUGC_SendQueryUGCRequest";
SteamUGC_GetQueryUGCResult :: (self: *ISteamUGC, handle: UGCQueryHandle_t, index: uint32, pDetails: *SteamUGCDetails_t) -> bool #foreign steam "SteamAPI_ISteamUGC_GetQueryUGCResult";
SteamUGC_GetQueryUGCPreviewURL :: (self: *ISteamUGC, handle: UGCQueryHandle_t, index: uint32, pchURL: *char, cchURLSize: uint32) -> bool #foreign steam "SteamAPI_ISteamUGC_GetQueryUGCPreviewURL";
SteamUGC_GetQueryUGCMetadata :: (self: *ISteamUGC, handle: UGCQueryHandle_t, index: uint32, pchMetadata: *char, cchMetadatasize: uint32) -> bool #foreign steam "SteamAPI_ISteamUGC_GetQueryUGCMetadata";
SteamUGC_GetQueryUGCChildren :: (self: *ISteamUGC, handle: UGCQueryHandle_t, index: uint32, pvecPublishedFileID: *PublishedFileId_t, cMaxEntries: uint32) -> bool #foreign steam "SteamAPI_ISteamUGC_GetQueryUGCChildren";
SteamUGC_GetQueryUGCStatistic :: (self: *ISteamUGC, handle: UGCQueryHandle_t, index: uint32, eStatType: EItemStatistic, pStatValue: *uint64) -> bool #foreign steam "SteamAPI_ISteamUGC_GetQueryUGCStatistic";
SteamUGC_GetQueryUGCNumAdditionalPreviews :: (self: *ISteamUGC, handle: UGCQueryHandle_t, index: uint32) -> uint32 #foreign steam "SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews";
SteamUGC_GetQueryUGCAdditionalPreview :: (self: *ISteamUGC, handle: UGCQueryHandle_t, index: uint32, previewIndex: uint32, pchURLOrVideoID: *char, cchURLSize: uint32, pchOriginalFileName: *char, cchOriginalFileNameSize: uint32, pPreviewType: *EItemPreviewType) -> bool #foreign steam "SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview";
SteamUGC_GetQueryUGCNumKeyValueTags :: (self: *ISteamUGC, handle: UGCQueryHandle_t, index: uint32) -> uint32 #foreign steam "SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags";
SteamUGC_GetQueryUGCKeyValueTag :: (self: *ISteamUGC, handle: UGCQueryHandle_t, index: uint32, keyValueTagIndex: uint32, pchKey: *char, cchKeySize: uint32, pchValue: *char, cchValueSize: uint32) -> bool #foreign steam "SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag";
SteamUGC_GetQueryFirstUGCKeyValueTag :: (self: *ISteamUGC, handle: UGCQueryHandle_t, index: uint32, pchKey: *char, pchValue: *char, cchValueSize: uint32) -> bool #foreign steam "SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag";
SteamUGC_ReleaseQueryUGCRequest :: (self: *ISteamUGC, handle: UGCQueryHandle_t) -> bool #foreign steam "SteamAPI_ISteamUGC_ReleaseQueryUGCRequest";
SteamUGC_AddRequiredTag :: (self: *ISteamUGC, handle: UGCQueryHandle_t, pTagName: *char) -> bool #foreign steam "SteamAPI_ISteamUGC_AddRequiredTag";
SteamUGC_AddRequiredTagGroup :: (self: *ISteamUGC, handle: UGCQueryHandle_t, pTagGroups: *SteamParamStringArray_t) -> bool #foreign steam "SteamAPI_ISteamUGC_AddRequiredTagGroup";
SteamUGC_AddExcludedTag :: (self: *ISteamUGC, handle: UGCQueryHandle_t, pTagName: *char) -> bool #foreign steam "SteamAPI_ISteamUGC_AddExcludedTag";
SteamUGC_SetReturnOnlyIDs :: (self: *ISteamUGC, handle: UGCQueryHandle_t, bReturnOnlyIDs: bool) -> bool #foreign steam "SteamAPI_ISteamUGC_SetReturnOnlyIDs";
SteamUGC_SetReturnKeyValueTags :: (self: *ISteamUGC, handle: UGCQueryHandle_t, bReturnKeyValueTags: bool) -> bool #foreign steam "SteamAPI_ISteamUGC_SetReturnKeyValueTags";
SteamUGC_SetReturnLongDescription :: (self: *ISteamUGC, handle: UGCQueryHandle_t, bReturnLongDescription: bool) -> bool #foreign steam "SteamAPI_ISteamUGC_SetReturnLongDescription";
SteamUGC_SetReturnMetadata :: (self: *ISteamUGC, handle: UGCQueryHandle_t, bReturnMetadata: bool) -> bool #foreign steam "SteamAPI_ISteamUGC_SetReturnMetadata";
SteamUGC_SetReturnChildren :: (self: *ISteamUGC, handle: UGCQueryHandle_t, bReturnChildren: bool) -> bool #foreign steam "SteamAPI_ISteamUGC_SetReturnChildren";
SteamUGC_SetReturnAdditionalPreviews :: (self: *ISteamUGC, handle: UGCQueryHandle_t, bReturnAdditionalPreviews: bool) -> bool #foreign steam "SteamAPI_ISteamUGC_SetReturnAdditionalPreviews";
SteamUGC_SetReturnTotalOnly :: (self: *ISteamUGC, handle: UGCQueryHandle_t, bReturnTotalOnly: bool) -> bool #foreign steam "SteamAPI_ISteamUGC_SetReturnTotalOnly";
SteamUGC_SetReturnPlaytimeStats :: (self: *ISteamUGC, handle: UGCQueryHandle_t, unDays: uint32) -> bool #foreign steam "SteamAPI_ISteamUGC_SetReturnPlaytimeStats";
SteamUGC_SetLanguage :: (self: *ISteamUGC, handle: UGCQueryHandle_t, pchLanguage: *char) -> bool #foreign steam "SteamAPI_ISteamUGC_SetLanguage";
SteamUGC_SetAllowCachedResponse :: (self: *ISteamUGC, handle: UGCQueryHandle_t, unMaxAgeSeconds: uint32) -> bool #foreign steam "SteamAPI_ISteamUGC_SetAllowCachedResponse";
SteamUGC_SetCloudFileNameFilter :: (self: *ISteamUGC, handle: UGCQueryHandle_t, pMatchCloudFileName: *char) -> bool #foreign steam "SteamAPI_ISteamUGC_SetCloudFileNameFilter";
SteamUGC_SetMatchAnyTag :: (self: *ISteamUGC, handle: UGCQueryHandle_t, bMatchAnyTag: bool) -> bool #foreign steam "SteamAPI_ISteamUGC_SetMatchAnyTag";
SteamUGC_SetSearchText :: (self: *ISteamUGC, handle: UGCQueryHandle_t, pSearchText: *char) -> bool #foreign steam "SteamAPI_ISteamUGC_SetSearchText";
SteamUGC_SetRankedByTrendDays :: (self: *ISteamUGC, handle: UGCQueryHandle_t, unDays: uint32) -> bool #foreign steam "SteamAPI_ISteamUGC_SetRankedByTrendDays";
SteamUGC_AddRequiredKeyValueTag :: (self: *ISteamUGC, handle: UGCQueryHandle_t, pKey: *char, pValue: *char) -> bool #foreign steam "SteamAPI_ISteamUGC_AddRequiredKeyValueTag";
SteamUGC_RequestUGCDetails :: (self: *ISteamUGC, nPublishedFileID: PublishedFileId_t, unMaxAgeSeconds: uint32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUGC_RequestUGCDetails";
SteamUGC_CreateItem :: (self: *ISteamUGC, nConsumerAppId: AppId_t, eFileType: EWorkshopFileType) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUGC_CreateItem";
SteamUGC_StartItemUpdate :: (self: *ISteamUGC, nConsumerAppId: AppId_t, nPublishedFileID: PublishedFileId_t) -> UGCUpdateHandle_t #foreign steam "SteamAPI_ISteamUGC_StartItemUpdate";
SteamUGC_SetItemTitle :: (self: *ISteamUGC, handle: UGCUpdateHandle_t, pchTitle: *char) -> bool #foreign steam "SteamAPI_ISteamUGC_SetItemTitle";
SteamUGC_SetItemDescription :: (self: *ISteamUGC, handle: UGCUpdateHandle_t, pchDescription: *char) -> bool #foreign steam "SteamAPI_ISteamUGC_SetItemDescription";
SteamUGC_SetItemUpdateLanguage :: (self: *ISteamUGC, handle: UGCUpdateHandle_t, pchLanguage: *char) -> bool #foreign steam "SteamAPI_ISteamUGC_SetItemUpdateLanguage";
SteamUGC_SetItemMetadata :: (self: *ISteamUGC, handle: UGCUpdateHandle_t, pchMetaData: *char) -> bool #foreign steam "SteamAPI_ISteamUGC_SetItemMetadata";
SteamUGC_SetItemVisibility :: (self: *ISteamUGC, handle: UGCUpdateHandle_t, eVisibility: ERemoteStoragePublishedFileVisibility) -> bool #foreign steam "SteamAPI_ISteamUGC_SetItemVisibility";
SteamUGC_SetItemTags :: (self: *ISteamUGC, updateHandle: UGCUpdateHandle_t, pTags: *SteamParamStringArray_t) -> bool #foreign steam "SteamAPI_ISteamUGC_SetItemTags";
SteamUGC_SetItemContent :: (self: *ISteamUGC, handle: UGCUpdateHandle_t, pszContentFolder: *char) -> bool #foreign steam "SteamAPI_ISteamUGC_SetItemContent";
SteamUGC_SetItemPreview :: (self: *ISteamUGC, handle: UGCUpdateHandle_t, pszPreviewFile: *char) -> bool #foreign steam "SteamAPI_ISteamUGC_SetItemPreview";
SteamUGC_SetAllowLegacyUpload :: (self: *ISteamUGC, handle: UGCUpdateHandle_t, bAllowLegacyUpload: bool) -> bool #foreign steam "SteamAPI_ISteamUGC_SetAllowLegacyUpload";
SteamUGC_RemoveAllItemKeyValueTags :: (self: *ISteamUGC, handle: UGCUpdateHandle_t) -> bool #foreign steam "SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags";
SteamUGC_RemoveItemKeyValueTags :: (self: *ISteamUGC, handle: UGCUpdateHandle_t, pchKey: *char) -> bool #foreign steam "SteamAPI_ISteamUGC_RemoveItemKeyValueTags";
SteamUGC_AddItemKeyValueTag :: (self: *ISteamUGC, handle: UGCUpdateHandle_t, pchKey: *char, pchValue: *char) -> bool #foreign steam "SteamAPI_ISteamUGC_AddItemKeyValueTag";
SteamUGC_AddItemPreviewFile :: (self: *ISteamUGC, handle: UGCUpdateHandle_t, pszPreviewFile: *char, type: EItemPreviewType) -> bool #foreign steam "SteamAPI_ISteamUGC_AddItemPreviewFile";
SteamUGC_AddItemPreviewVideo :: (self: *ISteamUGC, handle: UGCUpdateHandle_t, pszVideoID: *char) -> bool #foreign steam "SteamAPI_ISteamUGC_AddItemPreviewVideo";
SteamUGC_UpdateItemPreviewFile :: (self: *ISteamUGC, handle: UGCUpdateHandle_t, index: uint32, pszPreviewFile: *char) -> bool #foreign steam "SteamAPI_ISteamUGC_UpdateItemPreviewFile";
SteamUGC_UpdateItemPreviewVideo :: (self: *ISteamUGC, handle: UGCUpdateHandle_t, index: uint32, pszVideoID: *char) -> bool #foreign steam "SteamAPI_ISteamUGC_UpdateItemPreviewVideo";
SteamUGC_RemoveItemPreview :: (self: *ISteamUGC, handle: UGCUpdateHandle_t, index: uint32) -> bool #foreign steam "SteamAPI_ISteamUGC_RemoveItemPreview";
SteamUGC_SubmitItemUpdate :: (self: *ISteamUGC, handle: UGCUpdateHandle_t, pchChangeNote: *char) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUGC_SubmitItemUpdate";
SteamUGC_GetItemUpdateProgress :: (self: *ISteamUGC, handle: UGCUpdateHandle_t, punBytesProcessed: *uint64, punBytesTotal: *uint64) -> EItemUpdateStatus #foreign steam "SteamAPI_ISteamUGC_GetItemUpdateProgress";
SteamUGC_SetUserItemVote :: (self: *ISteamUGC, nPublishedFileID: PublishedFileId_t, bVoteUp: bool) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUGC_SetUserItemVote";
SteamUGC_GetUserItemVote :: (self: *ISteamUGC, nPublishedFileID: PublishedFileId_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUGC_GetUserItemVote";
SteamUGC_AddItemToFavorites :: (self: *ISteamUGC, nAppId: AppId_t, nPublishedFileID: PublishedFileId_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUGC_AddItemToFavorites";
SteamUGC_RemoveItemFromFavorites :: (self: *ISteamUGC, nAppId: AppId_t, nPublishedFileID: PublishedFileId_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUGC_RemoveItemFromFavorites";
SteamUGC_SubscribeItem :: (self: *ISteamUGC, nPublishedFileID: PublishedFileId_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUGC_SubscribeItem";
SteamUGC_UnsubscribeItem :: (self: *ISteamUGC, nPublishedFileID: PublishedFileId_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUGC_UnsubscribeItem";
SteamUGC_GetNumSubscribedItems :: (self: *ISteamUGC) -> uint32 #foreign steam "SteamAPI_ISteamUGC_GetNumSubscribedItems";
SteamUGC_GetSubscribedItems :: (self: *ISteamUGC, pvecPublishedFileID: *PublishedFileId_t, cMaxEntries: uint32) -> uint32 #foreign steam "SteamAPI_ISteamUGC_GetSubscribedItems";
SteamUGC_GetItemState :: (self: *ISteamUGC, nPublishedFileID: PublishedFileId_t) -> uint32 #foreign steam "SteamAPI_ISteamUGC_GetItemState";
SteamUGC_GetItemInstallInfo :: (self: *ISteamUGC, nPublishedFileID: PublishedFileId_t, punSizeOnDisk: *uint64, pchFolder: *char, cchFolderSize: uint32, punTimeStamp: *uint32) -> bool #foreign steam "SteamAPI_ISteamUGC_GetItemInstallInfo";
SteamUGC_GetItemDownloadInfo :: (self: *ISteamUGC, nPublishedFileID: PublishedFileId_t, punBytesDownloaded: *uint64, punBytesTotal: *uint64) -> bool #foreign steam "SteamAPI_ISteamUGC_GetItemDownloadInfo";
SteamUGC_DownloadItem :: (self: *ISteamUGC, nPublishedFileID: PublishedFileId_t, bHighPriority: bool) -> bool #foreign steam "SteamAPI_ISteamUGC_DownloadItem";
SteamUGC_BInitWorkshopForGameServer :: (self: *ISteamUGC, unWorkshopDepotID: DepotId_t, pszFolder: *char) -> bool #foreign steam "SteamAPI_ISteamUGC_BInitWorkshopForGameServer";
SteamUGC_SuspendDownloads :: (self: *ISteamUGC, bSuspend: bool) #foreign steam "SteamAPI_ISteamUGC_SuspendDownloads";
SteamUGC_StartPlaytimeTracking :: (self: *ISteamUGC, pvecPublishedFileID: *PublishedFileId_t, unNumPublishedFileIDs: uint32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUGC_StartPlaytimeTracking";
SteamUGC_StopPlaytimeTracking :: (self: *ISteamUGC, pvecPublishedFileID: *PublishedFileId_t, unNumPublishedFileIDs: uint32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUGC_StopPlaytimeTracking";
SteamUGC_StopPlaytimeTrackingForAllItems :: (self: *ISteamUGC) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems";
SteamUGC_AddDependency :: (self: *ISteamUGC, nParentPublishedFileID: PublishedFileId_t, nChildPublishedFileID: PublishedFileId_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUGC_AddDependency";
SteamUGC_RemoveDependency :: (self: *ISteamUGC, nParentPublishedFileID: PublishedFileId_t, nChildPublishedFileID: PublishedFileId_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUGC_RemoveDependency";
SteamUGC_AddAppDependency :: (self: *ISteamUGC, nPublishedFileID: PublishedFileId_t, nAppID: AppId_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUGC_AddAppDependency";
SteamUGC_RemoveAppDependency :: (self: *ISteamUGC, nPublishedFileID: PublishedFileId_t, nAppID: AppId_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUGC_RemoveAppDependency";
SteamUGC_GetAppDependencies :: (self: *ISteamUGC, nPublishedFileID: PublishedFileId_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUGC_GetAppDependencies";
SteamUGC_DeleteItem :: (self: *ISteamUGC, nPublishedFileID: PublishedFileId_t) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamUGC_DeleteItem";

// ISteamAppList
SteamAppList_v001 :: () -> *ISteamAppList #foreign steam "SteamAPI_SteamAppList_v001";
SteamAppList_GetNumInstalledApps :: (self: *ISteamAppList) -> uint32 #foreign steam "SteamAPI_ISteamAppList_GetNumInstalledApps";
SteamAppList_GetInstalledApps :: (self: *ISteamAppList, pvecAppID: *AppId_t, unMaxAppIDs: uint32) -> uint32 #foreign steam "SteamAPI_ISteamAppList_GetInstalledApps";
SteamAppList_GetAppName :: (self: *ISteamAppList, nAppID: AppId_t, pchName: *char, cchNameMax: s32) -> s32 #foreign steam "SteamAPI_ISteamAppList_GetAppName";
SteamAppList_GetAppInstallDir :: (self: *ISteamAppList, nAppID: AppId_t, pchDirectory: *char, cchNameMax: s32) -> s32 #foreign steam "SteamAPI_ISteamAppList_GetAppInstallDir";
SteamAppList_GetAppBuildId :: (self: *ISteamAppList, nAppID: AppId_t) -> s32 #foreign steam "SteamAPI_ISteamAppList_GetAppBuildId";

// ISteamHTMLSurface
SteamHTMLSurface_v005 :: () -> *ISteamHTMLSurface #foreign steam "SteamAPI_SteamHTMLSurface_v005";
SteamHTMLSurface_Init :: (self: *ISteamHTMLSurface) -> bool #foreign steam "SteamAPI_ISteamHTMLSurface_Init";
SteamHTMLSurface_Shutdown :: (self: *ISteamHTMLSurface) -> bool #foreign steam "SteamAPI_ISteamHTMLSurface_Shutdown";
SteamHTMLSurface_CreateBrowser :: (self: *ISteamHTMLSurface, pchUserAgent: *char, pchUserCSS: *char) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamHTMLSurface_CreateBrowser";
SteamHTMLSurface_RemoveBrowser :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser) #foreign steam "SteamAPI_ISteamHTMLSurface_RemoveBrowser";
SteamHTMLSurface_LoadURL :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, pchURL: *char, pchPostData: *char) #foreign steam "SteamAPI_ISteamHTMLSurface_LoadURL";
SteamHTMLSurface_SetSize :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, unWidth: uint32, unHeight: uint32) #foreign steam "SteamAPI_ISteamHTMLSurface_SetSize";
SteamHTMLSurface_StopLoad :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser) #foreign steam "SteamAPI_ISteamHTMLSurface_StopLoad";
SteamHTMLSurface_Reload :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser) #foreign steam "SteamAPI_ISteamHTMLSurface_Reload";
SteamHTMLSurface_GoBack :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser) #foreign steam "SteamAPI_ISteamHTMLSurface_GoBack";
SteamHTMLSurface_GoForward :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser) #foreign steam "SteamAPI_ISteamHTMLSurface_GoForward";
SteamHTMLSurface_AddHeader :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, pchKey: *char, pchValue: *char) #foreign steam "SteamAPI_ISteamHTMLSurface_AddHeader";
SteamHTMLSurface_ExecuteJavascript :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, pchScript: *char) #foreign steam "SteamAPI_ISteamHTMLSurface_ExecuteJavascript";
SteamHTMLSurface_MouseUp :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, eMouseButton: EHTMLMouseButton) #foreign steam "SteamAPI_ISteamHTMLSurface_MouseUp";
SteamHTMLSurface_MouseDown :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, eMouseButton: EHTMLMouseButton) #foreign steam "SteamAPI_ISteamHTMLSurface_MouseDown";
SteamHTMLSurface_MouseDoubleClick :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, eMouseButton: EHTMLMouseButton) #foreign steam "SteamAPI_ISteamHTMLSurface_MouseDoubleClick";
SteamHTMLSurface_MouseMove :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, x: s32, y: s32) #foreign steam "SteamAPI_ISteamHTMLSurface_MouseMove";
SteamHTMLSurface_MouseWheel :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, nDelta: int32) #foreign steam "SteamAPI_ISteamHTMLSurface_MouseWheel";
SteamHTMLSurface_KeyDown :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, nNativeKeyCode: uint32, eHTMLKeyModifiers: EHTMLKeyModifiers, bIsSystemKey: bool) #foreign steam "SteamAPI_ISteamHTMLSurface_KeyDown";
SteamHTMLSurface_KeyUp :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, nNativeKeyCode: uint32, eHTMLKeyModifiers: EHTMLKeyModifiers) #foreign steam "SteamAPI_ISteamHTMLSurface_KeyUp";
SteamHTMLSurface_KeyChar :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, cUnicodeChar: uint32, eHTMLKeyModifiers: EHTMLKeyModifiers) #foreign steam "SteamAPI_ISteamHTMLSurface_KeyChar";
SteamHTMLSurface_SetHorizontalScroll :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, nAbsolutePixelScroll: uint32) #foreign steam "SteamAPI_ISteamHTMLSurface_SetHorizontalScroll";
SteamHTMLSurface_SetVerticalScroll :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, nAbsolutePixelScroll: uint32) #foreign steam "SteamAPI_ISteamHTMLSurface_SetVerticalScroll";
SteamHTMLSurface_SetKeyFocus :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, bHasKeyFocus: bool) #foreign steam "SteamAPI_ISteamHTMLSurface_SetKeyFocus";
SteamHTMLSurface_ViewSource :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser) #foreign steam "SteamAPI_ISteamHTMLSurface_ViewSource";
SteamHTMLSurface_CopyToClipboard :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser) #foreign steam "SteamAPI_ISteamHTMLSurface_CopyToClipboard";
SteamHTMLSurface_PasteFromClipboard :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser) #foreign steam "SteamAPI_ISteamHTMLSurface_PasteFromClipboard";
SteamHTMLSurface_Find :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, pchSearchStr: *char, bCurrentlyInFind: bool, bReverse: bool) #foreign steam "SteamAPI_ISteamHTMLSurface_Find";
SteamHTMLSurface_StopFind :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser) #foreign steam "SteamAPI_ISteamHTMLSurface_StopFind";
SteamHTMLSurface_GetLinkAtPosition :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, x: s32, y: s32) #foreign steam "SteamAPI_ISteamHTMLSurface_GetLinkAtPosition";
SteamHTMLSurface_SetCookie :: (self: *ISteamHTMLSurface, pchHostname: *char, pchKey: *char, pchValue: *char, pchPath: *char, nExpires: RTime32, bSecure: bool, bHTTPOnly: bool) #foreign steam "SteamAPI_ISteamHTMLSurface_SetCookie";
SteamHTMLSurface_SetPageScaleFactor :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, flZoom: float, nPointX: s32, nPointY: s32) #foreign steam "SteamAPI_ISteamHTMLSurface_SetPageScaleFactor";
SteamHTMLSurface_SetBackgroundMode :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, bBackgroundMode: bool) #foreign steam "SteamAPI_ISteamHTMLSurface_SetBackgroundMode";
SteamHTMLSurface_SetDPIScalingFactor :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, flDPIScaling: float) #foreign steam "SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor";
SteamHTMLSurface_OpenDeveloperTools :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser) #foreign steam "SteamAPI_ISteamHTMLSurface_OpenDeveloperTools";
SteamHTMLSurface_AllowStartRequest :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, bAllowed: bool) #foreign steam "SteamAPI_ISteamHTMLSurface_AllowStartRequest";
SteamHTMLSurface_JSDialogResponse :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, bResult: bool) #foreign steam "SteamAPI_ISteamHTMLSurface_JSDialogResponse";
SteamHTMLSurface_FileLoadDialogResponse :: (self: *ISteamHTMLSurface, unBrowserHandle: HHTMLBrowser, pchSelectedFiles: **char) #foreign steam "SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse";

// ISteamInventory
SteamInventory_v003 :: () -> *ISteamInventory #foreign steam "SteamAPI_SteamInventory_v003";
SteamGameServerInventory_v003 :: () -> *ISteamInventory #foreign steam "SteamAPI_SteamGameServerInventory_v003";
SteamInventory_GetResultStatus :: (self: *ISteamInventory, resultHandle: SteamInventoryResult_t) -> EResult #foreign steam "SteamAPI_ISteamInventory_GetResultStatus";
SteamInventory_GetResultItems :: (self: *ISteamInventory, resultHandle: SteamInventoryResult_t, pOutItemsArray: *SteamItemDetails_t, punOutItemsArraySize: *uint32) -> bool #foreign steam "SteamAPI_ISteamInventory_GetResultItems";
SteamInventory_GetResultItemProperty :: (self: *ISteamInventory, resultHandle: SteamInventoryResult_t, unItemIndex: uint32, pchPropertyName: *char, pchValueBuffer: *char, punValueBufferSizeOut: *uint32) -> bool #foreign steam "SteamAPI_ISteamInventory_GetResultItemProperty";
SteamInventory_GetResultTimestamp :: (self: *ISteamInventory, resultHandle: SteamInventoryResult_t) -> uint32 #foreign steam "SteamAPI_ISteamInventory_GetResultTimestamp";
SteamInventory_CheckResultSteamID :: (self: *ISteamInventory, resultHandle: SteamInventoryResult_t, steamIDExpected: uint64_steamid) -> bool #foreign steam "SteamAPI_ISteamInventory_CheckResultSteamID";
SteamInventory_DestroyResult :: (self: *ISteamInventory, resultHandle: SteamInventoryResult_t) #foreign steam "SteamAPI_ISteamInventory_DestroyResult";
SteamInventory_GetAllItems :: (self: *ISteamInventory, pResultHandle: *SteamInventoryResult_t) -> bool #foreign steam "SteamAPI_ISteamInventory_GetAllItems";
SteamInventory_GetItemsByID :: (self: *ISteamInventory, pResultHandle: *SteamInventoryResult_t, pInstanceIDs: *SteamItemInstanceID_t, unCountInstanceIDs: uint32) -> bool #foreign steam "SteamAPI_ISteamInventory_GetItemsByID";
SteamInventory_SerializeResult :: (self: *ISteamInventory, resultHandle: SteamInventoryResult_t, pOutBuffer: *void, punOutBufferSize: *uint32) -> bool #foreign steam "SteamAPI_ISteamInventory_SerializeResult";
SteamInventory_DeserializeResult :: (self: *ISteamInventory, pOutResultHandle: *SteamInventoryResult_t, pBuffer: *void, unBufferSize: uint32, bRESERVED_MUST_BE_FALSE: bool) -> bool #foreign steam "SteamAPI_ISteamInventory_DeserializeResult";
SteamInventory_GenerateItems :: (self: *ISteamInventory, pResultHandle: *SteamInventoryResult_t, pArrayItemDefs: *SteamItemDef_t, punArrayQuantity: *uint32, unArrayLength: uint32) -> bool #foreign steam "SteamAPI_ISteamInventory_GenerateItems";
SteamInventory_GrantPromoItems :: (self: *ISteamInventory, pResultHandle: *SteamInventoryResult_t) -> bool #foreign steam "SteamAPI_ISteamInventory_GrantPromoItems";
SteamInventory_AddPromoItem :: (self: *ISteamInventory, pResultHandle: *SteamInventoryResult_t, itemDef: SteamItemDef_t) -> bool #foreign steam "SteamAPI_ISteamInventory_AddPromoItem";
SteamInventory_AddPromoItems :: (self: *ISteamInventory, pResultHandle: *SteamInventoryResult_t, pArrayItemDefs: *SteamItemDef_t, unArrayLength: uint32) -> bool #foreign steam "SteamAPI_ISteamInventory_AddPromoItems";
SteamInventory_ConsumeItem :: (self: *ISteamInventory, pResultHandle: *SteamInventoryResult_t, itemConsume: SteamItemInstanceID_t, unQuantity: uint32) -> bool #foreign steam "SteamAPI_ISteamInventory_ConsumeItem";
SteamInventory_ExchangeItems :: (self: *ISteamInventory, pResultHandle: *SteamInventoryResult_t, pArrayGenerate: *SteamItemDef_t, punArrayGenerateQuantity: *uint32, unArrayGenerateLength: uint32, pArrayDestroy: *SteamItemInstanceID_t, punArrayDestroyQuantity: *uint32, unArrayDestroyLength: uint32) -> bool #foreign steam "SteamAPI_ISteamInventory_ExchangeItems";
SteamInventory_TransferItemQuantity :: (self: *ISteamInventory, pResultHandle: *SteamInventoryResult_t, itemIdSource: SteamItemInstanceID_t, unQuantity: uint32, itemIdDest: SteamItemInstanceID_t) -> bool #foreign steam "SteamAPI_ISteamInventory_TransferItemQuantity";
SteamInventory_SendItemDropHeartbeat :: (self: *ISteamInventory) #foreign steam "SteamAPI_ISteamInventory_SendItemDropHeartbeat";
SteamInventory_TriggerItemDrop :: (self: *ISteamInventory, pResultHandle: *SteamInventoryResult_t, dropListDefinition: SteamItemDef_t) -> bool #foreign steam "SteamAPI_ISteamInventory_TriggerItemDrop";
SteamInventory_TradeItems :: (self: *ISteamInventory, pResultHandle: *SteamInventoryResult_t, steamIDTradePartner: uint64_steamid, pArrayGive: *SteamItemInstanceID_t, pArrayGiveQuantity: *uint32, nArrayGiveLength: uint32, pArrayGet: *SteamItemInstanceID_t, pArrayGetQuantity: *uint32, nArrayGetLength: uint32) -> bool #foreign steam "SteamAPI_ISteamInventory_TradeItems";
SteamInventory_LoadItemDefinitions :: (self: *ISteamInventory) -> bool #foreign steam "SteamAPI_ISteamInventory_LoadItemDefinitions";
SteamInventory_GetItemDefinitionIDs :: (self: *ISteamInventory, pItemDefIDs: *SteamItemDef_t, punItemDefIDsArraySize: *uint32) -> bool #foreign steam "SteamAPI_ISteamInventory_GetItemDefinitionIDs";
SteamInventory_GetItemDefinitionProperty :: (self: *ISteamInventory, iDefinition: SteamItemDef_t, pchPropertyName: *char, pchValueBuffer: *char, punValueBufferSizeOut: *uint32) -> bool #foreign steam "SteamAPI_ISteamInventory_GetItemDefinitionProperty";
SteamInventory_RequestEligiblePromoItemDefinitionsIDs :: (self: *ISteamInventory, steamID: uint64_steamid) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs";
SteamInventory_GetEligiblePromoItemDefinitionIDs :: (self: *ISteamInventory, steamID: uint64_steamid, pItemDefIDs: *SteamItemDef_t, punItemDefIDsArraySize: *uint32) -> bool #foreign steam "SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs";
SteamInventory_StartPurchase :: (self: *ISteamInventory, pArrayItemDefs: *SteamItemDef_t, punArrayQuantity: *uint32, unArrayLength: uint32) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamInventory_StartPurchase";
SteamInventory_RequestPrices :: (self: *ISteamInventory) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamInventory_RequestPrices";
SteamInventory_GetNumItemsWithPrices :: (self: *ISteamInventory) -> uint32 #foreign steam "SteamAPI_ISteamInventory_GetNumItemsWithPrices";
SteamInventory_GetItemsWithPrices :: (self: *ISteamInventory, pArrayItemDefs: *SteamItemDef_t, pCurrentPrices: *uint64, pBasePrices: *uint64, unArrayLength: uint32) -> bool #foreign steam "SteamAPI_ISteamInventory_GetItemsWithPrices";
SteamInventory_GetItemPrice :: (self: *ISteamInventory, iDefinition: SteamItemDef_t, pCurrentPrice: *uint64, pBasePrice: *uint64) -> bool #foreign steam "SteamAPI_ISteamInventory_GetItemPrice";
SteamInventory_StartUpdateProperties :: (self: *ISteamInventory) -> SteamInventoryUpdateHandle_t #foreign steam "SteamAPI_ISteamInventory_StartUpdateProperties";
SteamInventory_RemoveProperty :: (self: *ISteamInventory, handle: SteamInventoryUpdateHandle_t, nItemID: SteamItemInstanceID_t, pchPropertyName: *char) -> bool #foreign steam "SteamAPI_ISteamInventory_RemoveProperty";
SteamInventory_SetPropertyString :: (self: *ISteamInventory, handle: SteamInventoryUpdateHandle_t, nItemID: SteamItemInstanceID_t, pchPropertyName: *char, pchPropertyValue: *char) -> bool #foreign steam "SteamAPI_ISteamInventory_SetPropertyString";
SteamInventory_SetPropertyBool :: (self: *ISteamInventory, handle: SteamInventoryUpdateHandle_t, nItemID: SteamItemInstanceID_t, pchPropertyName: *char, bValue: bool) -> bool #foreign steam "SteamAPI_ISteamInventory_SetPropertyBool";
SteamInventory_SetPropertyInt64 :: (self: *ISteamInventory, handle: SteamInventoryUpdateHandle_t, nItemID: SteamItemInstanceID_t, pchPropertyName: *char, nValue: int64) -> bool #foreign steam "SteamAPI_ISteamInventory_SetPropertyInt64";
SteamInventory_SetPropertyFloat :: (self: *ISteamInventory, handle: SteamInventoryUpdateHandle_t, nItemID: SteamItemInstanceID_t, pchPropertyName: *char, flValue: float) -> bool #foreign steam "SteamAPI_ISteamInventory_SetPropertyFloat";
SteamInventory_SubmitUpdateProperties :: (self: *ISteamInventory, handle: SteamInventoryUpdateHandle_t, pResultHandle: *SteamInventoryResult_t) -> bool #foreign steam "SteamAPI_ISteamInventory_SubmitUpdateProperties";
SteamInventory_InspectItem :: (self: *ISteamInventory, pResultHandle: *SteamInventoryResult_t, pchItemToken: *char) -> bool #foreign steam "SteamAPI_ISteamInventory_InspectItem";

// ISteamVideo
SteamVideo_v002 :: () -> *ISteamVideo #foreign steam "SteamAPI_SteamVideo_v002";
SteamVideo_GetVideoURL :: (self: *ISteamVideo, unVideoAppID: AppId_t) #foreign steam "SteamAPI_ISteamVideo_GetVideoURL";
SteamVideo_IsBroadcasting :: (self: *ISteamVideo, pnNumViewers: *s32) -> bool #foreign steam "SteamAPI_ISteamVideo_IsBroadcasting";
SteamVideo_GetOPFSettings :: (self: *ISteamVideo, unVideoAppID: AppId_t) #foreign steam "SteamAPI_ISteamVideo_GetOPFSettings";
SteamVideo_GetOPFStringForApp :: (self: *ISteamVideo, unVideoAppID: AppId_t, pchBuffer: *char, pnBufferSize: *int32) -> bool #foreign steam "SteamAPI_ISteamVideo_GetOPFStringForApp";

// ISteamParentalSettings
SteamParentalSettings_v001 :: () -> *ISteamParentalSettings #foreign steam "SteamAPI_SteamParentalSettings_v001";
SteamParentalSettings_BIsParentalLockEnabled :: (self: *ISteamParentalSettings) -> bool #foreign steam "SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled";
SteamParentalSettings_BIsParentalLockLocked :: (self: *ISteamParentalSettings) -> bool #foreign steam "SteamAPI_ISteamParentalSettings_BIsParentalLockLocked";
SteamParentalSettings_BIsAppBlocked :: (self: *ISteamParentalSettings, nAppID: AppId_t) -> bool #foreign steam "SteamAPI_ISteamParentalSettings_BIsAppBlocked";
SteamParentalSettings_BIsAppInBlockList :: (self: *ISteamParentalSettings, nAppID: AppId_t) -> bool #foreign steam "SteamAPI_ISteamParentalSettings_BIsAppInBlockList";
SteamParentalSettings_BIsFeatureBlocked :: (self: *ISteamParentalSettings, eFeature: EParentalFeature) -> bool #foreign steam "SteamAPI_ISteamParentalSettings_BIsFeatureBlocked";
SteamParentalSettings_BIsFeatureInBlockList :: (self: *ISteamParentalSettings, eFeature: EParentalFeature) -> bool #foreign steam "SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList";

// ISteamRemotePlay
SteamRemotePlay_v001 :: () -> *ISteamRemotePlay #foreign steam "SteamAPI_SteamRemotePlay_v001";
SteamRemotePlay_GetSessionCount :: (self: *ISteamRemotePlay) -> uint32 #foreign steam "SteamAPI_ISteamRemotePlay_GetSessionCount";
SteamRemotePlay_GetSessionID :: (self: *ISteamRemotePlay, iSessionIndex: s32) -> RemotePlaySessionID_t #foreign steam "SteamAPI_ISteamRemotePlay_GetSessionID";
SteamRemotePlay_GetSessionSteamID :: (self: *ISteamRemotePlay, unSessionID: RemotePlaySessionID_t) -> uint64_steamid #foreign steam "SteamAPI_ISteamRemotePlay_GetSessionSteamID";
SteamRemotePlay_GetSessionClientName :: (self: *ISteamRemotePlay, unSessionID: RemotePlaySessionID_t) -> *char #foreign steam "SteamAPI_ISteamRemotePlay_GetSessionClientName";
SteamRemotePlay_GetSessionClientFormFactor :: (self: *ISteamRemotePlay, unSessionID: RemotePlaySessionID_t) -> ESteamDeviceFormFactor #foreign steam "SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor";
SteamRemotePlay_BGetSessionClientResolution :: (self: *ISteamRemotePlay, unSessionID: RemotePlaySessionID_t, pnResolutionX: *s32, pnResolutionY: *s32) -> bool #foreign steam "SteamAPI_ISteamRemotePlay_BGetSessionClientResolution";
SteamRemotePlay_BSendRemotePlayTogetherInvite :: (self: *ISteamRemotePlay, steamIDFriend: uint64_steamid) -> bool #foreign steam "SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite";

// ISteamNetworkingMessages
SteamNetworkingMessages_v002 :: () -> *ISteamNetworkingMessages #foreign steam "SteamAPI_SteamNetworkingMessages_v002";
SteamGameServerNetworkingMessages_v002 :: () -> *ISteamNetworkingMessages #foreign steam "SteamAPI_SteamGameServerNetworkingMessages_v002";
SteamNetworkingMessages_SendMessageToUser :: (self: *ISteamNetworkingMessages, identityRemote: *SteamNetworkingIdentity, pubData: *void, cubData: uint32, nSendFlags: s32, nRemoteChannel: s32) -> EResult #foreign steam "SteamAPI_ISteamNetworkingMessages_SendMessageToUser";
SteamNetworkingMessages_ReceiveMessagesOnChannel :: (self: *ISteamNetworkingMessages, nLocalChannel: s32, ppOutMessages: **SteamNetworkingMessage_t, nMaxMessages: s32) -> s32 #foreign steam "SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel";
SteamNetworkingMessages_AcceptSessionWithUser :: (self: *ISteamNetworkingMessages, identityRemote: *SteamNetworkingIdentity) -> bool #foreign steam "SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser";
SteamNetworkingMessages_CloseSessionWithUser :: (self: *ISteamNetworkingMessages, identityRemote: *SteamNetworkingIdentity) -> bool #foreign steam "SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser";
SteamNetworkingMessages_CloseChannelWithUser :: (self: *ISteamNetworkingMessages, identityRemote: *SteamNetworkingIdentity, nLocalChannel: s32) -> bool #foreign steam "SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser";
SteamNetworkingMessages_GetSessionConnectionInfo :: (self: *ISteamNetworkingMessages, identityRemote: *SteamNetworkingIdentity, pConnectionInfo: *SteamNetConnectionInfo_t, pQuickStatus: *SteamNetworkingQuickConnectionStatus) -> ESteamNetworkingConnectionState #foreign steam "SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo";

// ISteamNetworkingSockets
SteamNetworkingSockets_v009 :: () -> *ISteamNetworkingSockets #foreign steam "SteamAPI_SteamNetworkingSockets_v009";
SteamGameServerNetworkingSockets_v009 :: () -> *ISteamNetworkingSockets #foreign steam "SteamAPI_SteamGameServerNetworkingSockets_v009";
SteamNetworkingSockets_CreateListenSocketIP :: (self: *ISteamNetworkingSockets, localAddress: *SteamNetworkingIPAddr, nOptions: s32, pOptions: *SteamNetworkingConfigValue_t) -> HSteamListenSocket #foreign steam "SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP";
SteamNetworkingSockets_ConnectByIPAddress :: (self: *ISteamNetworkingSockets, address: *SteamNetworkingIPAddr, nOptions: s32, pOptions: *SteamNetworkingConfigValue_t) -> HSteamNetConnection #foreign steam "SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress";
SteamNetworkingSockets_CreateListenSocketP2P :: (self: *ISteamNetworkingSockets, nLocalVirtualPort: s32, nOptions: s32, pOptions: *SteamNetworkingConfigValue_t) -> HSteamListenSocket #foreign steam "SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P";
SteamNetworkingSockets_ConnectP2P :: (self: *ISteamNetworkingSockets, identityRemote: *SteamNetworkingIdentity, nRemoteVirtualPort: s32, nOptions: s32, pOptions: *SteamNetworkingConfigValue_t) -> HSteamNetConnection #foreign steam "SteamAPI_ISteamNetworkingSockets_ConnectP2P";
SteamNetworkingSockets_AcceptConnection :: (self: *ISteamNetworkingSockets, hConn: HSteamNetConnection) -> EResult #foreign steam "SteamAPI_ISteamNetworkingSockets_AcceptConnection";
SteamNetworkingSockets_CloseConnection :: (self: *ISteamNetworkingSockets, hPeer: HSteamNetConnection, nReason: s32, pszDebug: *char, bEnableLinger: bool) -> bool #foreign steam "SteamAPI_ISteamNetworkingSockets_CloseConnection";
SteamNetworkingSockets_CloseListenSocket :: (self: *ISteamNetworkingSockets, hSocket: HSteamListenSocket) -> bool #foreign steam "SteamAPI_ISteamNetworkingSockets_CloseListenSocket";
SteamNetworkingSockets_SetConnectionUserData :: (self: *ISteamNetworkingSockets, hPeer: HSteamNetConnection, nUserData: int64) -> bool #foreign steam "SteamAPI_ISteamNetworkingSockets_SetConnectionUserData";
SteamNetworkingSockets_GetConnectionUserData :: (self: *ISteamNetworkingSockets, hPeer: HSteamNetConnection) -> int64 #foreign steam "SteamAPI_ISteamNetworkingSockets_GetConnectionUserData";
SteamNetworkingSockets_SetConnectionName :: (self: *ISteamNetworkingSockets, hPeer: HSteamNetConnection, pszName: *char) #foreign steam "SteamAPI_ISteamNetworkingSockets_SetConnectionName";
SteamNetworkingSockets_GetConnectionName :: (self: *ISteamNetworkingSockets, hPeer: HSteamNetConnection, pszName: *char, nMaxLen: s32) -> bool #foreign steam "SteamAPI_ISteamNetworkingSockets_GetConnectionName";
SteamNetworkingSockets_SendMessageToConnection :: (self: *ISteamNetworkingSockets, hConn: HSteamNetConnection, pData: *void, cbData: uint32, nSendFlags: s32, pOutMessageNumber: *int64) -> EResult #foreign steam "SteamAPI_ISteamNetworkingSockets_SendMessageToConnection";
SteamNetworkingSockets_SendMessages :: (self: *ISteamNetworkingSockets, nMessages: s32, pMessages: **SteamNetworkingMessage_t, pOutMessageNumberOrResult: *int64) #foreign steam "SteamAPI_ISteamNetworkingSockets_SendMessages";
SteamNetworkingSockets_FlushMessagesOnConnection :: (self: *ISteamNetworkingSockets, hConn: HSteamNetConnection) -> EResult #foreign steam "SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection";
SteamNetworkingSockets_ReceiveMessagesOnConnection :: (self: *ISteamNetworkingSockets, hConn: HSteamNetConnection, ppOutMessages: **SteamNetworkingMessage_t, nMaxMessages: s32) -> s32 #foreign steam "SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection";
SteamNetworkingSockets_GetConnectionInfo :: (self: *ISteamNetworkingSockets, hConn: HSteamNetConnection, pInfo: *SteamNetConnectionInfo_t) -> bool #foreign steam "SteamAPI_ISteamNetworkingSockets_GetConnectionInfo";
SteamNetworkingSockets_GetQuickConnectionStatus :: (self: *ISteamNetworkingSockets, hConn: HSteamNetConnection, pStats: *SteamNetworkingQuickConnectionStatus) -> bool #foreign steam "SteamAPI_ISteamNetworkingSockets_GetQuickConnectionStatus";
SteamNetworkingSockets_GetDetailedConnectionStatus :: (self: *ISteamNetworkingSockets, hConn: HSteamNetConnection, pszBuf: *char, cbBuf: s32) -> s32 #foreign steam "SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus";
SteamNetworkingSockets_GetListenSocketAddress :: (self: *ISteamNetworkingSockets, hSocket: HSteamListenSocket, address: *SteamNetworkingIPAddr) -> bool #foreign steam "SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress";
SteamNetworkingSockets_CreateSocketPair :: (self: *ISteamNetworkingSockets, pOutConnection1: *HSteamNetConnection, pOutConnection2: *HSteamNetConnection, bUseNetworkLoopback: bool, pIdentity1: *SteamNetworkingIdentity, pIdentity2: *SteamNetworkingIdentity) -> bool #foreign steam "SteamAPI_ISteamNetworkingSockets_CreateSocketPair";
SteamNetworkingSockets_GetIdentity :: (self: *ISteamNetworkingSockets, pIdentity: *SteamNetworkingIdentity) -> bool #foreign steam "SteamAPI_ISteamNetworkingSockets_GetIdentity";
SteamNetworkingSockets_InitAuthentication :: (self: *ISteamNetworkingSockets) -> ESteamNetworkingAvailability #foreign steam "SteamAPI_ISteamNetworkingSockets_InitAuthentication";
SteamNetworkingSockets_GetAuthenticationStatus :: (self: *ISteamNetworkingSockets, pDetails: *SteamNetAuthenticationStatus_t) -> ESteamNetworkingAvailability #foreign steam "SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus";
SteamNetworkingSockets_CreatePollGroup :: (self: *ISteamNetworkingSockets) -> HSteamNetPollGroup #foreign steam "SteamAPI_ISteamNetworkingSockets_CreatePollGroup";
SteamNetworkingSockets_DestroyPollGroup :: (self: *ISteamNetworkingSockets, hPollGroup: HSteamNetPollGroup) -> bool #foreign steam "SteamAPI_ISteamNetworkingSockets_DestroyPollGroup";
SteamNetworkingSockets_SetConnectionPollGroup :: (self: *ISteamNetworkingSockets, hConn: HSteamNetConnection, hPollGroup: HSteamNetPollGroup) -> bool #foreign steam "SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup";
SteamNetworkingSockets_ReceiveMessagesOnPollGroup :: (self: *ISteamNetworkingSockets, hPollGroup: HSteamNetPollGroup, ppOutMessages: **SteamNetworkingMessage_t, nMaxMessages: s32) -> s32 #foreign steam "SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup";
SteamNetworkingSockets_ReceivedRelayAuthTicket :: (self: *ISteamNetworkingSockets, pvTicket: *void, cbTicket: s32, pOutParsedTicket: *SteamDatagramRelayAuthTicket) -> bool #foreign steam "SteamAPI_ISteamNetworkingSockets_ReceivedRelayAuthTicket";
SteamNetworkingSockets_FindRelayAuthTicketForServer :: (self: *ISteamNetworkingSockets, identityGameServer: *SteamNetworkingIdentity, nRemoteVirtualPort: s32, pOutParsedTicket: *SteamDatagramRelayAuthTicket) -> s32 #foreign steam "SteamAPI_ISteamNetworkingSockets_FindRelayAuthTicketForServer";
SteamNetworkingSockets_ConnectToHostedDedicatedServer :: (self: *ISteamNetworkingSockets, identityTarget: *SteamNetworkingIdentity, nRemoteVirtualPort: s32, nOptions: s32, pOptions: *SteamNetworkingConfigValue_t) -> HSteamNetConnection #foreign steam "SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer";
SteamNetworkingSockets_GetHostedDedicatedServerPort :: (self: *ISteamNetworkingSockets) -> uint16 #foreign steam "SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort";
SteamNetworkingSockets_GetHostedDedicatedServerPOPID :: (self: *ISteamNetworkingSockets) -> SteamNetworkingPOPID #foreign steam "SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID";
SteamNetworkingSockets_GetHostedDedicatedServerAddress :: (self: *ISteamNetworkingSockets, pRouting: *SteamDatagramHostedAddress) -> EResult #foreign steam "SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress";
SteamNetworkingSockets_CreateHostedDedicatedServerListenSocket :: (self: *ISteamNetworkingSockets, nLocalVirtualPort: s32, nOptions: s32, pOptions: *SteamNetworkingConfigValue_t) -> HSteamListenSocket #foreign steam "SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket";
SteamNetworkingSockets_GetGameCoordinatorServerLogin :: (self: *ISteamNetworkingSockets, pLoginInfo: *SteamDatagramGameCoordinatorServerLogin, pcbSignedBlob: *s32, pBlob: *void) -> EResult #foreign steam "SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin";
SteamNetworkingSockets_ConnectP2PCustomSignaling :: (self: *ISteamNetworkingSockets, pSignaling: *ISteamNetworkingConnectionCustomSignaling, pPeerIdentity: *SteamNetworkingIdentity, nRemoteVirtualPort: s32, nOptions: s32, pOptions: *SteamNetworkingConfigValue_t) -> HSteamNetConnection #foreign steam "SteamAPI_ISteamNetworkingSockets_ConnectP2PCustomSignaling";
SteamNetworkingSockets_ReceivedP2PCustomSignal :: (self: *ISteamNetworkingSockets, pMsg: *void, cbMsg: s32, pContext: *ISteamNetworkingCustomSignalingRecvContext) -> bool #foreign steam "SteamAPI_ISteamNetworkingSockets_ReceivedP2PCustomSignal";
SteamNetworkingSockets_GetCertificateRequest :: (self: *ISteamNetworkingSockets, pcbBlob: *s32, pBlob: *void, errMsg: *SteamNetworkingErrMsg) -> bool #foreign steam "SteamAPI_ISteamNetworkingSockets_GetCertificateRequest";
SteamNetworkingSockets_SetCertificate :: (self: *ISteamNetworkingSockets, pCertificate: *void, cbCertificate: s32, errMsg: *SteamNetworkingErrMsg) -> bool #foreign steam "SteamAPI_ISteamNetworkingSockets_SetCertificate";
SteamNetworkingSockets_RunCallbacks :: (self: *ISteamNetworkingSockets) #foreign steam "SteamAPI_ISteamNetworkingSockets_RunCallbacks";

// ISteamNetworkingUtils
SteamNetworkingUtils_v003 :: () -> *ISteamNetworkingUtils #foreign steam "SteamAPI_SteamNetworkingUtils_v003";
SteamNetworkingUtils_AllocateMessage :: (self: *ISteamNetworkingUtils, cbAllocateBuffer: s32) -> *SteamNetworkingMessage_t #foreign steam "SteamAPI_ISteamNetworkingUtils_AllocateMessage";
SteamNetworkingUtils_InitRelayNetworkAccess :: (self: *ISteamNetworkingUtils) #foreign steam "SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess";
SteamNetworkingUtils_GetRelayNetworkStatus :: (self: *ISteamNetworkingUtils, pDetails: *SteamRelayNetworkStatus_t) -> ESteamNetworkingAvailability #foreign steam "SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus";
SteamNetworkingUtils_GetLocalPingLocation :: (self: *ISteamNetworkingUtils, result: *SteamNetworkPingLocation_t) -> float #foreign steam "SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation";
SteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations :: (self: *ISteamNetworkingUtils, location1: *SteamNetworkPingLocation_t, location2: *SteamNetworkPingLocation_t) -> s32 #foreign steam "SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations";
SteamNetworkingUtils_EstimatePingTimeFromLocalHost :: (self: *ISteamNetworkingUtils, remoteLocation: *SteamNetworkPingLocation_t) -> s32 #foreign steam "SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost";
SteamNetworkingUtils_ConvertPingLocationToString :: (self: *ISteamNetworkingUtils, location: *SteamNetworkPingLocation_t, pszBuf: *char, cchBufSize: s32) #foreign steam "SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString";
SteamNetworkingUtils_ParsePingLocationString :: (self: *ISteamNetworkingUtils, pszString: *char, result: *SteamNetworkPingLocation_t) -> bool #foreign steam "SteamAPI_ISteamNetworkingUtils_ParsePingLocationString";
SteamNetworkingUtils_CheckPingDataUpToDate :: (self: *ISteamNetworkingUtils, flMaxAgeSeconds: float) -> bool #foreign steam "SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate";
SteamNetworkingUtils_GetPingToDataCenter :: (self: *ISteamNetworkingUtils, popID: SteamNetworkingPOPID, pViaRelayPoP: *SteamNetworkingPOPID) -> s32 #foreign steam "SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter";
SteamNetworkingUtils_GetDirectPingToPOP :: (self: *ISteamNetworkingUtils, popID: SteamNetworkingPOPID) -> s32 #foreign steam "SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP";
SteamNetworkingUtils_GetPOPCount :: (self: *ISteamNetworkingUtils) -> s32 #foreign steam "SteamAPI_ISteamNetworkingUtils_GetPOPCount";
SteamNetworkingUtils_GetPOPList :: (self: *ISteamNetworkingUtils, list: *SteamNetworkingPOPID, nListSz: s32) -> s32 #foreign steam "SteamAPI_ISteamNetworkingUtils_GetPOPList";
SteamNetworkingUtils_GetLocalTimestamp :: (self: *ISteamNetworkingUtils) -> SteamNetworkingMicroseconds #foreign steam "SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp";
SteamNetworkingUtils_SetDebugOutputFunction :: (self: *ISteamNetworkingUtils, eDetailLevel: ESteamNetworkingSocketsDebugOutputType, pfnFunc: FSteamNetworkingSocketsDebugOutput) #foreign steam "SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction";
SteamNetworkingUtils_SetGlobalConfigValueInt32 :: (self: *ISteamNetworkingUtils, eValue: ESteamNetworkingConfigValue, val: int32) -> bool #foreign steam "SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32";
SteamNetworkingUtils_SetGlobalConfigValueFloat :: (self: *ISteamNetworkingUtils, eValue: ESteamNetworkingConfigValue, val: float) -> bool #foreign steam "SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat";
SteamNetworkingUtils_SetGlobalConfigValueString :: (self: *ISteamNetworkingUtils, eValue: ESteamNetworkingConfigValue, val: *char) -> bool #foreign steam "SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString";
SteamNetworkingUtils_SetGlobalConfigValuePtr :: (self: *ISteamNetworkingUtils, eValue: ESteamNetworkingConfigValue, val: *void) -> bool #foreign steam "SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr";
SteamNetworkingUtils_SetConnectionConfigValueInt32 :: (self: *ISteamNetworkingUtils, hConn: HSteamNetConnection, eValue: ESteamNetworkingConfigValue, val: int32) -> bool #foreign steam "SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32";
SteamNetworkingUtils_SetConnectionConfigValueFloat :: (self: *ISteamNetworkingUtils, hConn: HSteamNetConnection, eValue: ESteamNetworkingConfigValue, val: float) -> bool #foreign steam "SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat";
SteamNetworkingUtils_SetConnectionConfigValueString :: (self: *ISteamNetworkingUtils, hConn: HSteamNetConnection, eValue: ESteamNetworkingConfigValue, val: *char) -> bool #foreign steam "SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString";
SteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged :: (self: *ISteamNetworkingUtils, fnCallback: FnSteamNetConnectionStatusChanged) -> bool #foreign steam "SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged";
SteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged :: (self: *ISteamNetworkingUtils, fnCallback: FnSteamNetAuthenticationStatusChanged) -> bool #foreign steam "SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged";
SteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged :: (self: *ISteamNetworkingUtils, fnCallback: FnSteamRelayNetworkStatusChanged) -> bool #foreign steam "SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged";
SteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest :: (self: *ISteamNetworkingUtils, fnCallback: FnSteamNetworkingMessagesSessionRequest) -> bool #foreign steam "SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest";
SteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed :: (self: *ISteamNetworkingUtils, fnCallback: FnSteamNetworkingMessagesSessionFailed) -> bool #foreign steam "SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed";
SteamNetworkingUtils_SetConfigValue :: (self: *ISteamNetworkingUtils, eValue: ESteamNetworkingConfigValue, eScopeType: ESteamNetworkingConfigScope, scopeObj: intptr_t, eDataType: ESteamNetworkingConfigDataType, pArg: *void) -> bool #foreign steam "SteamAPI_ISteamNetworkingUtils_SetConfigValue";
SteamNetworkingUtils_SetConfigValueStruct :: (self: *ISteamNetworkingUtils, opt: *SteamNetworkingConfigValue_t, eScopeType: ESteamNetworkingConfigScope, scopeObj: intptr_t) -> bool #foreign steam "SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct";
SteamNetworkingUtils_GetConfigValue :: (self: *ISteamNetworkingUtils, eValue: ESteamNetworkingConfigValue, eScopeType: ESteamNetworkingConfigScope, scopeObj: intptr_t, pOutDataType: *ESteamNetworkingConfigDataType, pResult: *void, cbResult: *size_t) -> ESteamNetworkingGetConfigValueResult #foreign steam "SteamAPI_ISteamNetworkingUtils_GetConfigValue";
SteamNetworkingUtils_GetConfigValueInfo :: (self: *ISteamNetworkingUtils, eValue: ESteamNetworkingConfigValue, pOutName: **char, pOutDataType: *ESteamNetworkingConfigDataType, pOutScope: *ESteamNetworkingConfigScope, pOutNextValue: *ESteamNetworkingConfigValue) -> bool #foreign steam "SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo";
SteamNetworkingUtils_GetFirstConfigValue :: (self: *ISteamNetworkingUtils) -> ESteamNetworkingConfigValue #foreign steam "SteamAPI_ISteamNetworkingUtils_GetFirstConfigValue";
SteamNetworkingUtils_SteamNetworkingIPAddr_ToString :: (self: *ISteamNetworkingUtils, addr: *SteamNetworkingIPAddr, buf: *char, cbBuf: uint32, bWithPort: bool) #foreign steam "SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString";
SteamNetworkingUtils_SteamNetworkingIPAddr_ParseString :: (self: *ISteamNetworkingUtils, pAddr: *SteamNetworkingIPAddr, pszStr: *char) -> bool #foreign steam "SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString";
SteamNetworkingUtils_SteamNetworkingIdentity_ToString :: (self: *ISteamNetworkingUtils, identity: *SteamNetworkingIdentity, buf: *char, cbBuf: uint32) #foreign steam "SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString";
SteamNetworkingUtils_SteamNetworkingIdentity_ParseString :: (self: *ISteamNetworkingUtils, pIdentity: *SteamNetworkingIdentity, pszStr: *char) -> bool #foreign steam "SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString";

// ISteamGameServer
SteamGameServer_v013 :: () -> *ISteamGameServer #foreign steam "SteamAPI_SteamGameServer_v013";
SteamGameServer_SetProduct :: (self: *ISteamGameServer, pszProduct: *char) #foreign steam "SteamAPI_ISteamGameServer_SetProduct";
SteamGameServer_SetGameDescription :: (self: *ISteamGameServer, pszGameDescription: *char) #foreign steam "SteamAPI_ISteamGameServer_SetGameDescription";
SteamGameServer_SetModDir :: (self: *ISteamGameServer, pszModDir: *char) #foreign steam "SteamAPI_ISteamGameServer_SetModDir";
SteamGameServer_SetDedicatedServer :: (self: *ISteamGameServer, bDedicated: bool) #foreign steam "SteamAPI_ISteamGameServer_SetDedicatedServer";
SteamGameServer_LogOn :: (self: *ISteamGameServer, pszToken: *char) #foreign steam "SteamAPI_ISteamGameServer_LogOn";
SteamGameServer_LogOnAnonymous :: (self: *ISteamGameServer) #foreign steam "SteamAPI_ISteamGameServer_LogOnAnonymous";
SteamGameServer_LogOff :: (self: *ISteamGameServer) #foreign steam "SteamAPI_ISteamGameServer_LogOff";
SteamGameServer_BLoggedOn :: (self: *ISteamGameServer) -> bool #foreign steam "SteamAPI_ISteamGameServer_BLoggedOn";
SteamGameServer_BSecure :: (self: *ISteamGameServer) -> bool #foreign steam "SteamAPI_ISteamGameServer_BSecure";
SteamGameServer_GetSteamID :: (self: *ISteamGameServer) -> uint64_steamid #foreign steam "SteamAPI_ISteamGameServer_GetSteamID";
SteamGameServer_WasRestartRequested :: (self: *ISteamGameServer) -> bool #foreign steam "SteamAPI_ISteamGameServer_WasRestartRequested";
SteamGameServer_SetMaxPlayerCount :: (self: *ISteamGameServer, cPlayersMax: s32) #foreign steam "SteamAPI_ISteamGameServer_SetMaxPlayerCount";
SteamGameServer_SetBotPlayerCount :: (self: *ISteamGameServer, cBotplayers: s32) #foreign steam "SteamAPI_ISteamGameServer_SetBotPlayerCount";
SteamGameServer_SetServerName :: (self: *ISteamGameServer, pszServerName: *char) #foreign steam "SteamAPI_ISteamGameServer_SetServerName";
SteamGameServer_SetMapName :: (self: *ISteamGameServer, pszMapName: *char) #foreign steam "SteamAPI_ISteamGameServer_SetMapName";
SteamGameServer_SetPasswordProtected :: (self: *ISteamGameServer, bPasswordProtected: bool) #foreign steam "SteamAPI_ISteamGameServer_SetPasswordProtected";
SteamGameServer_SetSpectatorPort :: (self: *ISteamGameServer, unSpectatorPort: uint16) #foreign steam "SteamAPI_ISteamGameServer_SetSpectatorPort";
SteamGameServer_SetSpectatorServerName :: (self: *ISteamGameServer, pszSpectatorServerName: *char) #foreign steam "SteamAPI_ISteamGameServer_SetSpectatorServerName";
SteamGameServer_ClearAllKeyValues :: (self: *ISteamGameServer) #foreign steam "SteamAPI_ISteamGameServer_ClearAllKeyValues";
SteamGameServer_SetKeyValue :: (self: *ISteamGameServer, pKey: *char, pValue: *char) #foreign steam "SteamAPI_ISteamGameServer_SetKeyValue";
SteamGameServer_SetGameTags :: (self: *ISteamGameServer, pchGameTags: *char) #foreign steam "SteamAPI_ISteamGameServer_SetGameTags";
SteamGameServer_SetGameData :: (self: *ISteamGameServer, pchGameData: *char) #foreign steam "SteamAPI_ISteamGameServer_SetGameData";
SteamGameServer_SetRegion :: (self: *ISteamGameServer, pszRegion: *char) #foreign steam "SteamAPI_ISteamGameServer_SetRegion";
SteamGameServer_SendUserConnectAndAuthenticate :: (self: *ISteamGameServer, unIPClient: uint32, pvAuthBlob: *void, cubAuthBlobSize: uint32, pSteamIDUser: *CSteamID) -> bool #foreign steam "SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate";
SteamGameServer_CreateUnauthenticatedUserConnection :: (self: *ISteamGameServer) -> uint64_steamid #foreign steam "SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection";
SteamGameServer_SendUserDisconnect :: (self: *ISteamGameServer, steamIDUser: uint64_steamid) #foreign steam "SteamAPI_ISteamGameServer_SendUserDisconnect";
SteamGameServer_BUpdateUserData :: (self: *ISteamGameServer, steamIDUser: uint64_steamid, pchPlayerName: *char, uScore: uint32) -> bool #foreign steam "SteamAPI_ISteamGameServer_BUpdateUserData";
SteamGameServer_GetAuthSessionTicket :: (self: *ISteamGameServer, pTicket: *void, cbMaxTicket: s32, pcbTicket: *uint32) -> HAuthTicket #foreign steam "SteamAPI_ISteamGameServer_GetAuthSessionTicket";
SteamGameServer_BeginAuthSession :: (self: *ISteamGameServer, pAuthTicket: *void, cbAuthTicket: s32, steamID: uint64_steamid) -> EBeginAuthSessionResult #foreign steam "SteamAPI_ISteamGameServer_BeginAuthSession";
SteamGameServer_EndAuthSession :: (self: *ISteamGameServer, steamID: uint64_steamid) #foreign steam "SteamAPI_ISteamGameServer_EndAuthSession";
SteamGameServer_CancelAuthTicket :: (self: *ISteamGameServer, hAuthTicket: HAuthTicket) #foreign steam "SteamAPI_ISteamGameServer_CancelAuthTicket";
SteamGameServer_UserHasLicenseForApp :: (self: *ISteamGameServer, steamID: uint64_steamid, appID: AppId_t) -> EUserHasLicenseForAppResult #foreign steam "SteamAPI_ISteamGameServer_UserHasLicenseForApp";
SteamGameServer_RequestUserGroupStatus :: (self: *ISteamGameServer, steamIDUser: uint64_steamid, steamIDGroup: uint64_steamid) -> bool #foreign steam "SteamAPI_ISteamGameServer_RequestUserGroupStatus";
SteamGameServer_GetGameplayStats :: (self: *ISteamGameServer) #foreign steam "SteamAPI_ISteamGameServer_GetGameplayStats";
SteamGameServer_GetServerReputation :: (self: *ISteamGameServer) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamGameServer_GetServerReputation";
SteamGameServer_GetPublicIP :: (self: *ISteamGameServer) -> SteamIPAddress_t #foreign steam "SteamAPI_ISteamGameServer_GetPublicIP";
SteamGameServer_HandleIncomingPacket :: (self: *ISteamGameServer, pData: *void, cbData: s32, srcIP: uint32, srcPort: uint16) -> bool #foreign steam "SteamAPI_ISteamGameServer_HandleIncomingPacket";
SteamGameServer_GetNextOutgoingPacket :: (self: *ISteamGameServer, pOut: *void, cbMaxOut: s32, pNetAdr: *uint32, pPort: *uint16) -> s32 #foreign steam "SteamAPI_ISteamGameServer_GetNextOutgoingPacket";
SteamGameServer_EnableHeartbeats :: (self: *ISteamGameServer, bActive: bool) #foreign steam "SteamAPI_ISteamGameServer_EnableHeartbeats";
SteamGameServer_SetHeartbeatInterval :: (self: *ISteamGameServer, iHeartbeatInterval: s32) #foreign steam "SteamAPI_ISteamGameServer_SetHeartbeatInterval";
SteamGameServer_ForceHeartbeat :: (self: *ISteamGameServer) #foreign steam "SteamAPI_ISteamGameServer_ForceHeartbeat";
SteamGameServer_AssociateWithClan :: (self: *ISteamGameServer, steamIDClan: uint64_steamid) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamGameServer_AssociateWithClan";
SteamGameServer_ComputeNewPlayerCompatibility :: (self: *ISteamGameServer, steamIDNewPlayer: uint64_steamid) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility";

// ISteamGameServerStats
SteamGameServerStats_v001 :: () -> *ISteamGameServerStats #foreign steam "SteamAPI_SteamGameServerStats_v001";
SteamGameServerStats_RequestUserStats :: (self: *ISteamGameServerStats, steamIDUser: uint64_steamid) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamGameServerStats_RequestUserStats";
SteamGameServerStats_GetUserStatInt32 :: (self: *ISteamGameServerStats, steamIDUser: uint64_steamid, pchName: *char, pData: *int32) -> bool #foreign steam "SteamAPI_ISteamGameServerStats_GetUserStatInt32";
SteamGameServerStats_GetUserStatFloat :: (self: *ISteamGameServerStats, steamIDUser: uint64_steamid, pchName: *char, pData: *float) -> bool #foreign steam "SteamAPI_ISteamGameServerStats_GetUserStatFloat";
SteamGameServerStats_GetUserAchievement :: (self: *ISteamGameServerStats, steamIDUser: uint64_steamid, pchName: *char, pbAchieved: *bool) -> bool #foreign steam "SteamAPI_ISteamGameServerStats_GetUserAchievement";
SteamGameServerStats_SetUserStatInt32 :: (self: *ISteamGameServerStats, steamIDUser: uint64_steamid, pchName: *char, nData: int32) -> bool #foreign steam "SteamAPI_ISteamGameServerStats_SetUserStatInt32";
SteamGameServerStats_SetUserStatFloat :: (self: *ISteamGameServerStats, steamIDUser: uint64_steamid, pchName: *char, fData: float) -> bool #foreign steam "SteamAPI_ISteamGameServerStats_SetUserStatFloat";
SteamGameServerStats_UpdateUserAvgRateStat :: (self: *ISteamGameServerStats, steamIDUser: uint64_steamid, pchName: *char, flCountThisSession: float, dSessionLength: double) -> bool #foreign steam "SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat";
SteamGameServerStats_SetUserAchievement :: (self: *ISteamGameServerStats, steamIDUser: uint64_steamid, pchName: *char) -> bool #foreign steam "SteamAPI_ISteamGameServerStats_SetUserAchievement";
SteamGameServerStats_ClearUserAchievement :: (self: *ISteamGameServerStats, steamIDUser: uint64_steamid, pchName: *char) -> bool #foreign steam "SteamAPI_ISteamGameServerStats_ClearUserAchievement";
SteamGameServerStats_StoreUserStats :: (self: *ISteamGameServerStats, steamIDUser: uint64_steamid) -> SteamAPICall_t #must #foreign steam "SteamAPI_ISteamGameServerStats_StoreUserStats";

// SteamIPAddress_t
SteamIPAddress_t_IsSet :: (self: *SteamIPAddress_t) -> bool #foreign steam "SteamAPI_SteamIPAddress_t_IsSet";

// MatchMakingKeyValuePair_t
MatchMakingKeyValuePair_t_Construct :: (self: *MatchMakingKeyValuePair_t) #foreign steam "SteamAPI_MatchMakingKeyValuePair_t_Construct";

// servernetadr_t
servernetadr_t_Construct :: (self: *servernetadr_t) #foreign steam "SteamAPI_servernetadr_t_Construct";
servernetadr_t_Init :: (self: *servernetadr_t, ip: u32, usQueryPort: uint16, usConnectionPort: uint16) #foreign steam "SteamAPI_servernetadr_t_Init";
servernetadr_t_GetQueryPort :: (self: *servernetadr_t) -> uint16 #foreign steam "SteamAPI_servernetadr_t_GetQueryPort";
servernetadr_t_SetQueryPort :: (self: *servernetadr_t, usPort: uint16) #foreign steam "SteamAPI_servernetadr_t_SetQueryPort";
servernetadr_t_GetConnectionPort :: (self: *servernetadr_t) -> uint16 #foreign steam "SteamAPI_servernetadr_t_GetConnectionPort";
servernetadr_t_SetConnectionPort :: (self: *servernetadr_t, usPort: uint16) #foreign steam "SteamAPI_servernetadr_t_SetConnectionPort";
servernetadr_t_GetIP :: (self: *servernetadr_t) -> uint32 #foreign steam "SteamAPI_servernetadr_t_GetIP";
servernetadr_t_SetIP :: (self: *servernetadr_t, unIP: uint32) #foreign steam "SteamAPI_servernetadr_t_SetIP";
servernetadr_t_GetConnectionAddressString :: (self: *servernetadr_t) -> *char #foreign steam "SteamAPI_servernetadr_t_GetConnectionAddressString";
servernetadr_t_GetQueryAddressString :: (self: *servernetadr_t) -> *char #foreign steam "SteamAPI_servernetadr_t_GetQueryAddressString";
servernetadr_t_IsLessThan :: (self: *servernetadr_t, netadr: *servernetadr_t) -> bool #foreign steam "SteamAPI_servernetadr_t_IsLessThan";
servernetadr_t_Assign :: (self: *servernetadr_t, that: *servernetadr_t) #foreign steam "SteamAPI_servernetadr_t_Assign";

// gameserveritem_t
gameserveritem_t_Construct :: (self: *gameserveritem_t) #foreign steam "SteamAPI_gameserveritem_t_Construct";
gameserveritem_t_GetName :: (self: *gameserveritem_t) -> *char #foreign steam "SteamAPI_gameserveritem_t_GetName";
gameserveritem_t_SetName :: (self: *gameserveritem_t, pName: *char) #foreign steam "SteamAPI_gameserveritem_t_SetName";

// SteamNetworkingIPAddr
SteamNetworkingIPAddr_Clear :: (self: *SteamNetworkingIPAddr) #foreign steam "SteamAPI_SteamNetworkingIPAddr_Clear";
SteamNetworkingIPAddr_IsIPv6AllZeros :: (self: *SteamNetworkingIPAddr) -> bool #foreign steam "SteamAPI_SteamNetworkingIPAddr_IsIPv6AllZeros";
SteamNetworkingIPAddr_SetIPv6 :: (self: *SteamNetworkingIPAddr, ipv6: *uint8, nPort: uint16) #foreign steam "SteamAPI_SteamNetworkingIPAddr_SetIPv6";
SteamNetworkingIPAddr_SetIPv4 :: (self: *SteamNetworkingIPAddr, nIP: uint32, nPort: uint16) #foreign steam "SteamAPI_SteamNetworkingIPAddr_SetIPv4";
SteamNetworkingIPAddr_IsIPv4 :: (self: *SteamNetworkingIPAddr) -> bool #foreign steam "SteamAPI_SteamNetworkingIPAddr_IsIPv4";
SteamNetworkingIPAddr_GetIPv4 :: (self: *SteamNetworkingIPAddr) -> uint32 #foreign steam "SteamAPI_SteamNetworkingIPAddr_GetIPv4";
SteamNetworkingIPAddr_SetIPv6LocalHost :: (self: *SteamNetworkingIPAddr, nPort: uint16) #foreign steam "SteamAPI_SteamNetworkingIPAddr_SetIPv6LocalHost";
SteamNetworkingIPAddr_IsLocalHost :: (self: *SteamNetworkingIPAddr) -> bool #foreign steam "SteamAPI_SteamNetworkingIPAddr_IsLocalHost";
SteamNetworkingIPAddr_ToString :: (self: *SteamNetworkingIPAddr, buf: *char, cbBuf: uint32, bWithPort: bool) #foreign steam "SteamAPI_SteamNetworkingIPAddr_ToString";
SteamNetworkingIPAddr_ParseString :: (self: *SteamNetworkingIPAddr, pszStr: *char) -> bool #foreign steam "SteamAPI_SteamNetworkingIPAddr_ParseString";
SteamNetworkingIPAddr_IsEqualTo :: (self: *SteamNetworkingIPAddr, x: *SteamNetworkingIPAddr) -> bool #foreign steam "SteamAPI_SteamNetworkingIPAddr_IsEqualTo";

// SteamNetworkingIdentity
SteamNetworkingIdentity_Clear :: (self: *SteamNetworkingIdentity) #foreign steam "SteamAPI_SteamNetworkingIdentity_Clear";
SteamNetworkingIdentity_IsInvalid :: (self: *SteamNetworkingIdentity) -> bool #foreign steam "SteamAPI_SteamNetworkingIdentity_IsInvalid";
SteamNetworkingIdentity_SetSteamID :: (self: *SteamNetworkingIdentity, steamID: uint64_steamid) #foreign steam "SteamAPI_SteamNetworkingIdentity_SetSteamID";
SteamNetworkingIdentity_GetSteamID :: (self: *SteamNetworkingIdentity) -> uint64_steamid #foreign steam "SteamAPI_SteamNetworkingIdentity_GetSteamID";
SteamNetworkingIdentity_SetSteamID64 :: (self: *SteamNetworkingIdentity, steamID: uint64) #foreign steam "SteamAPI_SteamNetworkingIdentity_SetSteamID64";
SteamNetworkingIdentity_GetSteamID64 :: (self: *SteamNetworkingIdentity) -> uint64 #foreign steam "SteamAPI_SteamNetworkingIdentity_GetSteamID64";
SteamNetworkingIdentity_SetXboxPairwiseID :: (self: *SteamNetworkingIdentity, pszString: *char) -> bool #foreign steam "SteamAPI_SteamNetworkingIdentity_SetXboxPairwiseID";
SteamNetworkingIdentity_GetXboxPairwiseID :: (self: *SteamNetworkingIdentity) -> *char #foreign steam "SteamAPI_SteamNetworkingIdentity_GetXboxPairwiseID";
SteamNetworkingIdentity_SetIPAddr :: (self: *SteamNetworkingIdentity, addr: *SteamNetworkingIPAddr) #foreign steam "SteamAPI_SteamNetworkingIdentity_SetIPAddr";
SteamNetworkingIdentity_GetIPAddr :: (self: *SteamNetworkingIdentity) -> *SteamNetworkingIPAddr #foreign steam "SteamAPI_SteamNetworkingIdentity_GetIPAddr";
SteamNetworkingIdentity_SetLocalHost :: (self: *SteamNetworkingIdentity) #foreign steam "SteamAPI_SteamNetworkingIdentity_SetLocalHost";
SteamNetworkingIdentity_IsLocalHost :: (self: *SteamNetworkingIdentity) -> bool #foreign steam "SteamAPI_SteamNetworkingIdentity_IsLocalHost";
SteamNetworkingIdentity_SetGenericString :: (self: *SteamNetworkingIdentity, pszString: *char) -> bool #foreign steam "SteamAPI_SteamNetworkingIdentity_SetGenericString";
SteamNetworkingIdentity_GetGenericString :: (self: *SteamNetworkingIdentity) -> *char #foreign steam "SteamAPI_SteamNetworkingIdentity_GetGenericString";
SteamNetworkingIdentity_SetGenericBytes :: (self: *SteamNetworkingIdentity, data: *void, cbLen: uint32) -> bool #foreign steam "SteamAPI_SteamNetworkingIdentity_SetGenericBytes";
SteamNetworkingIdentity_GetGenericBytes :: (self: *SteamNetworkingIdentity, cbLen: *s32) -> *uint8 #foreign steam "SteamAPI_SteamNetworkingIdentity_GetGenericBytes";
SteamNetworkingIdentity_IsEqualTo :: (self: *SteamNetworkingIdentity, x: *SteamNetworkingIdentity) -> bool #foreign steam "SteamAPI_SteamNetworkingIdentity_IsEqualTo";
SteamNetworkingIdentity_ToString :: (self: *SteamNetworkingIdentity, buf: *char, cbBuf: uint32) #foreign steam "SteamAPI_SteamNetworkingIdentity_ToString";
SteamNetworkingIdentity_ParseString :: (self: *SteamNetworkingIdentity, pszStr: *char) -> bool #foreign steam "SteamAPI_SteamNetworkingIdentity_ParseString";

// SteamNetworkingMessage_t
SteamNetworkingMessage_t_Release :: (self: *SteamNetworkingMessage_t) #foreign steam "SteamAPI_SteamNetworkingMessage_t_Release";

// SteamNetworkingConfigValue_t
SteamNetworkingConfigValue_t_SetInt32 :: (self: *SteamNetworkingConfigValue_t, eVal: ESteamNetworkingConfigValue, data: int32_t) #foreign steam "SteamAPI_SteamNetworkingConfigValue_t_SetInt32";
SteamNetworkingConfigValue_t_SetInt64 :: (self: *SteamNetworkingConfigValue_t, eVal: ESteamNetworkingConfigValue, data: int64_t) #foreign steam "SteamAPI_SteamNetworkingConfigValue_t_SetInt64";
SteamNetworkingConfigValue_t_SetFloat :: (self: *SteamNetworkingConfigValue_t, eVal: ESteamNetworkingConfigValue, data: float) #foreign steam "SteamAPI_SteamNetworkingConfigValue_t_SetFloat";
SteamNetworkingConfigValue_t_SetPtr :: (self: *SteamNetworkingConfigValue_t, eVal: ESteamNetworkingConfigValue, data: *void) #foreign steam "SteamAPI_SteamNetworkingConfigValue_t_SetPtr";
SteamNetworkingConfigValue_t_SetString :: (self: *SteamNetworkingConfigValue_t, eVal: ESteamNetworkingConfigValue, data: *char) #foreign steam "SteamAPI_SteamNetworkingConfigValue_t_SetString";

// SteamNetworkingPOPIDRender
SteamNetworkingPOPIDRender_c_str :: (self: *SteamNetworkingPOPIDRender) -> *char #foreign steam "SteamAPI_SteamNetworkingPOPIDRender_c_str";

// SteamNetworkingIdentityRender
SteamNetworkingIdentityRender_c_str :: (self: *SteamNetworkingIdentityRender) -> *char #foreign steam "SteamAPI_SteamNetworkingIdentityRender_c_str";

// SteamNetworkingIPAddrRender
SteamNetworkingIPAddrRender_c_str :: (self: *SteamNetworkingIPAddrRender) -> *char #foreign steam "SteamAPI_SteamNetworkingIPAddrRender_c_str";

// SteamDatagramHostedAddress
SteamDatagramHostedAddress_Clear :: (self: *SteamDatagramHostedAddress) #foreign steam "SteamAPI_SteamDatagramHostedAddress_Clear";
SteamDatagramHostedAddress_GetPopID :: (self: *SteamDatagramHostedAddress) -> SteamNetworkingPOPID #foreign steam "SteamAPI_SteamDatagramHostedAddress_GetPopID";
SteamDatagramHostedAddress_SetDevAddress :: (self: *SteamDatagramHostedAddress, nIP: uint32, nPort: uint16, popid: SteamNetworkingPOPID) #foreign steam "SteamAPI_SteamDatagramHostedAddress_SetDevAddress";


